   1               		.file	"rgblight.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.setrgb,"ax",@progbits
  11               	.global	setrgb
  13               	setrgb:
  14               	.LFB8:
  15               		.file 1 "rgblight.c"
   1:rgblight.c    **** #include <avr/eeprom.h>
   2:rgblight.c    **** #include <avr/interrupt.h>
   3:rgblight.c    **** #include <util/delay.h>
   4:rgblight.c    **** #include "progmem.h"
   5:rgblight.c    **** #include "timer.h"
   6:rgblight.c    **** #include "rgblight.h"
   7:rgblight.c    **** #include "debug.h"
   8:rgblight.c    **** 
   9:rgblight.c    **** const uint8_t DIM_CURVE[] PROGMEM = {
  10:rgblight.c    **** 	0, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
  11:rgblight.c    **** 	3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  12:rgblight.c    **** 	4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6,
  13:rgblight.c    **** 	6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8,
  14:rgblight.c    **** 	8, 8, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11,
  15:rgblight.c    **** 	11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15,
  16:rgblight.c    **** 	15, 15, 16, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20,
  17:rgblight.c    **** 	20, 20, 21, 21, 22, 22, 22, 23, 23, 24, 24, 25, 25, 25, 26, 26,
  18:rgblight.c    **** 	27, 27, 28, 28, 29, 29, 30, 30, 31, 32, 32, 33, 33, 34, 35, 35,
  19:rgblight.c    **** 	36, 36, 37, 38, 38, 39, 40, 40, 41, 42, 43, 43, 44, 45, 46, 47,
  20:rgblight.c    **** 	48, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
  21:rgblight.c    **** 	63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 81, 82,
  22:rgblight.c    **** 	83, 85, 86, 88, 90, 91, 93, 94, 96, 98, 99, 101, 103, 105, 107, 109,
  23:rgblight.c    **** 	110, 112, 114, 116, 118, 121, 123, 125, 127, 129, 132, 134, 136, 139, 141, 144,
  24:rgblight.c    **** 	146, 149, 151, 154, 157, 159, 162, 165, 168, 171, 174, 177, 180, 183, 186, 190,
  25:rgblight.c    **** 	193, 196, 200, 203, 207, 211, 214, 218, 222, 226, 230, 234, 238, 242, 248, 255,
  26:rgblight.c    **** };
  27:rgblight.c    **** const uint8_t RGBLED_BREATHING_TABLE[] PROGMEM = {0,0,0,0,1,1,1,2,2,3,4,5,5,6,7,9,10,11,12,14,15,17
  28:rgblight.c    **** const uint8_t RGBLED_BREATHING_INTERVALS[] PROGMEM = {30, 20, 10, 5};
  29:rgblight.c    **** const uint8_t RGBLED_RAINBOW_MOOD_INTERVALS[] PROGMEM = {120, 60, 30};
  30:rgblight.c    **** const uint8_t RGBLED_RAINBOW_SWIRL_INTERVALS[] PROGMEM = {100, 50, 20};
  31:rgblight.c    **** const uint8_t RGBLED_SNAKE_INTERVALS[] PROGMEM = {100, 50, 20};
  32:rgblight.c    **** const uint8_t RGBLED_KNIGHT_INTERVALS[] PROGMEM = {100, 50, 20};
  33:rgblight.c    **** 
  34:rgblight.c    **** rgblight_config_t rgblight_config;
  35:rgblight.c    **** rgblight_config_t inmem_config;
  36:rgblight.c    **** struct cRGB led[RGBLED_NUM];
  37:rgblight.c    **** uint8_t rgblight_inited = 0;
  38:rgblight.c    **** 
  39:rgblight.c    **** 
  40:rgblight.c    **** void sethsv(uint16_t hue, uint8_t sat, uint8_t val, struct cRGB *led1) {
  41:rgblight.c    **** 	/* convert hue, saturation and brightness ( HSB/HSV ) to RGB
  42:rgblight.c    **** 	The DIM_CURVE is used only on brightness/value and on saturation (inverted).
  43:rgblight.c    **** 	This looks the most natural.
  44:rgblight.c    **** 	*/
  45:rgblight.c    ****   uint8_t r, g, b;
  46:rgblight.c    **** 
  47:rgblight.c    ****   val = pgm_read_byte(&DIM_CURVE[val]);
  48:rgblight.c    **** 	sat = 255 - pgm_read_byte(&DIM_CURVE[255 - sat]);
  49:rgblight.c    **** 
  50:rgblight.c    **** 	uint8_t base;
  51:rgblight.c    **** 
  52:rgblight.c    **** 	if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
  53:rgblight.c    **** 		r = val;
  54:rgblight.c    **** 		g = val;
  55:rgblight.c    **** 		b = val;
  56:rgblight.c    **** 	} else  {
  57:rgblight.c    **** 		base = ((255 - sat) * val) >> 8;
  58:rgblight.c    **** 
  59:rgblight.c    **** 		switch (hue / 60) {
  60:rgblight.c    **** 		case 0:
  61:rgblight.c    **** 			r = val;
  62:rgblight.c    **** 			g = (((val - base)*hue) / 60) + base;
  63:rgblight.c    **** 			b = base;
  64:rgblight.c    **** 			break;
  65:rgblight.c    **** 
  66:rgblight.c    **** 		case 1:
  67:rgblight.c    **** 			r = (((val - base)*(60 - (hue % 60))) / 60) + base;
  68:rgblight.c    **** 			g = val;
  69:rgblight.c    **** 			b = base;
  70:rgblight.c    **** 			break;
  71:rgblight.c    **** 
  72:rgblight.c    **** 		case 2:
  73:rgblight.c    **** 			r = base;
  74:rgblight.c    **** 			g = val;
  75:rgblight.c    **** 			b = (((val - base)*(hue % 60)) / 60) + base;
  76:rgblight.c    **** 			break;
  77:rgblight.c    **** 
  78:rgblight.c    **** 		case 3:
  79:rgblight.c    **** 			r = base;
  80:rgblight.c    **** 			g = (((val - base)*(60 - (hue % 60))) / 60) + base;
  81:rgblight.c    **** 			b = val;
  82:rgblight.c    **** 			break;
  83:rgblight.c    **** 
  84:rgblight.c    **** 		case 4:
  85:rgblight.c    **** 			r = (((val - base)*(hue % 60)) / 60) + base;
  86:rgblight.c    **** 			g = base;
  87:rgblight.c    **** 			b = val;
  88:rgblight.c    **** 			break;
  89:rgblight.c    **** 
  90:rgblight.c    **** 		case 5:
  91:rgblight.c    **** 			r = val;
  92:rgblight.c    **** 			g = base;
  93:rgblight.c    **** 			b = (((val - base)*(60 - (hue % 60))) / 60) + base;
  94:rgblight.c    **** 			break;
  95:rgblight.c    **** 		}
  96:rgblight.c    **** 	}
  97:rgblight.c    ****   setrgb(r,g,b, led1);
  98:rgblight.c    **** }
  99:rgblight.c    **** 
 100:rgblight.c    **** void setrgb(uint8_t r, uint8_t g, uint8_t b, struct cRGB *led1) {
  16               		.loc 1 100 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23 0000 F901      		movw r30,r18
 101:rgblight.c    ****   (*led1).r = r;
  24               		.loc 1 101 0
  25 0002 8183      		std Z+1,r24
 102:rgblight.c    ****   (*led1).g = g;
  26               		.loc 1 102 0
  27 0004 6083      		st Z,r22
 103:rgblight.c    ****   (*led1).b = b;
  28               		.loc 1 103 0
  29 0006 4283      		std Z+2,r20
  30 0008 0895      		ret
  31               		.cfi_endproc
  32               	.LFE8:
  34               		.section	.text.sethsv,"ax",@progbits
  35               	.global	sethsv
  37               	sethsv:
  38               	.LFB7:
  40:rgblight.c    **** void sethsv(uint16_t hue, uint8_t sat, uint8_t val, struct cRGB *led1) {
  39               		.loc 1 40 0
  40               		.cfi_startproc
  41               	.LVL1:
  42 0000 7F92      		push r7
  43               	.LCFI0:
  44               		.cfi_def_cfa_offset 3
  45               		.cfi_offset 7, -2
  46 0002 8F92      		push r8
  47               	.LCFI1:
  48               		.cfi_def_cfa_offset 4
  49               		.cfi_offset 8, -3
  50 0004 9F92      		push r9
  51               	.LCFI2:
  52               		.cfi_def_cfa_offset 5
  53               		.cfi_offset 9, -4
  54 0006 AF92      		push r10
  55               	.LCFI3:
  56               		.cfi_def_cfa_offset 6
  57               		.cfi_offset 10, -5
  58 0008 BF92      		push r11
  59               	.LCFI4:
  60               		.cfi_def_cfa_offset 7
  61               		.cfi_offset 11, -6
  62 000a CF92      		push r12
  63               	.LCFI5:
  64               		.cfi_def_cfa_offset 8
  65               		.cfi_offset 12, -7
  66 000c DF92      		push r13
  67               	.LCFI6:
  68               		.cfi_def_cfa_offset 9
  69               		.cfi_offset 13, -8
  70 000e EF92      		push r14
  71               	.LCFI7:
  72               		.cfi_def_cfa_offset 10
  73               		.cfi_offset 14, -9
  74 0010 FF92      		push r15
  75               	.LCFI8:
  76               		.cfi_def_cfa_offset 11
  77               		.cfi_offset 15, -10
  78 0012 0F93      		push r16
  79               	.LCFI9:
  80               		.cfi_def_cfa_offset 12
  81               		.cfi_offset 16, -11
  82 0014 1F93      		push r17
  83               	.LCFI10:
  84               		.cfi_def_cfa_offset 13
  85               		.cfi_offset 17, -12
  86 0016 CF93      		push r28
  87               	.LCFI11:
  88               		.cfi_def_cfa_offset 14
  89               		.cfi_offset 28, -13
  90 0018 DF93      		push r29
  91               	.LCFI12:
  92               		.cfi_def_cfa_offset 15
  93               		.cfi_offset 29, -14
  94               	/* prologue: function */
  95               	/* frame size = 0 */
  96               	/* stack size = 13 */
  97               	.L__stack_usage = 13
  98 001a 5C01      		movw r10,r24
  99               	.LVL2:
 100               	.LBB4:
  47:rgblight.c    ****   val = pgm_read_byte(&DIM_CURVE[val]);
 101               		.loc 1 47 0
 102 001c E42F      		mov r30,r20
 103 001e F0E0      		ldi r31,0
 104 0020 E050      		subi r30,lo8(-(DIM_CURVE))
 105 0022 F040      		sbci r31,hi8(-(DIM_CURVE))
 106               	/* #APP */
 107               	 ;  47 "rgblight.c" 1
 108 0024 4491      		lpm r20, Z
 109               		
 110               	 ;  0 "" 2
 111               	.LVL3:
 112               	/* #NOAPP */
 113               	.LBE4:
 114               	.LBB5:
  48:rgblight.c    **** 	sat = 255 - pgm_read_byte(&DIM_CURVE[255 - sat]);
 115               		.loc 1 48 0
 116 0026 8FEF      		ldi r24,lo8(-1)
 117 0028 90E0      		ldi r25,0
 118               	.LVL4:
 119 002a FC01      		movw r30,r24
 120 002c E61B      		sub r30,r22
 121 002e F109      		sbc r31,__zero_reg__
 122 0030 E050      		subi r30,lo8(-(DIM_CURVE))
 123 0032 F040      		sbci r31,hi8(-(DIM_CURVE))
 124               	/* #APP */
 125               	 ;  48 "rgblight.c" 1
 126 0034 E491      		lpm r30, Z
 127               		
 128               	 ;  0 "" 2
 129               	.LVL5:
 130               	/* #NOAPP */
 131               	.LBE5:
 132 0036 E095      		com r30
 133               	.LVL6:
  52:rgblight.c    **** 	if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
 134               		.loc 1 52 0
 135 0038 01F4      		brne .+2
 136 003a 00C0      		rjmp .L11
  57:rgblight.c    **** 		base = ((255 - sat) * val) >> 8;
 137               		.loc 1 57 0
 138 003c E42E      		mov r14,r20
 139 003e F12C      		mov r15,__zero_reg__
 140 0040 8E1B      		sub r24,r30
 141 0042 9109      		sbc r25,__zero_reg__
 142 0044 8E9D      		mul r24,r14
 143 0046 E001      		movw r28,r0
 144 0048 8F9D      		mul r24,r15
 145 004a D00D      		add r29,r0
 146 004c 9E9D      		mul r25,r14
 147 004e D00D      		add r29,r0
 148 0050 1124      		clr r1
 149 0052 CD2F      		mov r28,r29
 150 0054 DD0F      		lsl r29
 151 0056 DD0B      		sbc r29,r29
 152               	.LVL7:
  59:rgblight.c    **** 		switch (hue / 60) {
 153               		.loc 1 59 0
 154 0058 0CE3      		ldi r16,lo8(60)
 155 005a 10E0      		ldi r17,0
 156 005c C501      		movw r24,r10
 157 005e B801      		movw r22,r16
 158               	.LVL8:
 159 0060 0E94 0000 		call __udivmodhi4
 160 0064 6C01      		movw r12,r24
 161 0066 6230      		cpi r22,2
 162 0068 7105      		cpc r23,__zero_reg__
 163 006a 01F0      		breq .L6
 164 006c 00F4      		brsh .L10
 165 006e 6115      		cp r22,__zero_reg__
 166 0070 7105      		cpc r23,__zero_reg__
 167 0072 01F0      		breq .L4
 168 0074 6130      		cpi r22,1
 169 0076 7105      		cpc r23,__zero_reg__
 170 0078 01F0      		breq .+2
 171 007a 00C0      		rjmp .L3
 172 007c 00C0      		rjmp .L5
 173               	.L10:
 174 007e 6430      		cpi r22,4
 175 0080 7105      		cpc r23,__zero_reg__
 176 0082 01F4      		brne .+2
 177 0084 00C0      		rjmp .L8
 178 0086 00F0      		brlo .L7
 179 0088 6530      		cpi r22,5
 180 008a 7105      		cpc r23,__zero_reg__
 181 008c 01F0      		breq .+2
 182 008e 00C0      		rjmp .L3
 183 0090 00C0      		rjmp .L9
 184               	.L4:
 185               	.LVL9:
  62:rgblight.c    **** 			g = (((val - base)*hue) / 60) + base;
 186               		.loc 1 62 0
 187 0092 EC1A      		sub r14,r28
 188 0094 F108      		sbc r15,__zero_reg__
 189 0096 EA9C      		mul r14,r10
 190 0098 C001      		movw r24,r0
 191 009a EB9C      		mul r14,r11
 192 009c 900D      		add r25,r0
 193 009e FA9C      		mul r15,r10
 194 00a0 900D      		add r25,r0
 195 00a2 1124      		clr r1
 196 00a4 B801      		movw r22,r16
 197 00a6 0E94 0000 		call __udivmodhi4
 198 00aa 7C2E      		mov r7,r28
 199 00ac 760E      		add r7,r22
 200               	.LVL10:
  63:rgblight.c    **** 			b = base;
 201               		.loc 1 63 0
 202 00ae 9C2E      		mov r9,r28
 203 00b0 00C0      		rjmp .L12
 204               	.LVL11:
 205               	.L5:
  67:rgblight.c    **** 			r = (((val - base)*(60 - (hue % 60))) / 60) + base;
 206               		.loc 1 67 0
 207 00b2 EC1A      		sub r14,r28
 208 00b4 F108      		sbc r15,__zero_reg__
 209               	.LVL12:
 210 00b6 B801      		movw r22,r16
 211 00b8 6C19      		sub r22,r12
 212 00ba 7D09      		sbc r23,r13
 213 00bc E69E      		mul r14,r22
 214 00be C001      		movw r24,r0
 215 00c0 E79E      		mul r14,r23
 216 00c2 900D      		add r25,r0
 217 00c4 F69E      		mul r15,r22
 218 00c6 900D      		add r25,r0
 219 00c8 1124      		clr r1
 220 00ca B801      		movw r22,r16
 221 00cc 0E94 0000 		call __udivmodhi4
 222 00d0 8C2E      		mov r8,r28
 223 00d2 860E      		add r8,r22
 224               	.LVL13:
  69:rgblight.c    **** 			b = base;
 225               		.loc 1 69 0
 226 00d4 9C2E      		mov r9,r28
  68:rgblight.c    **** 			g = val;
 227               		.loc 1 68 0
 228 00d6 742E      		mov r7,r20
  70:rgblight.c    **** 			break;
 229               		.loc 1 70 0
 230 00d8 00C0      		rjmp .L3
 231               	.LVL14:
 232               	.L6:
  75:rgblight.c    **** 			b = (((val - base)*(hue % 60)) / 60) + base;
 233               		.loc 1 75 0
 234 00da EC1A      		sub r14,r28
 235 00dc F108      		sbc r15,__zero_reg__
 236               	.LVL15:
 237 00de EC9C      		mul r14,r12
 238 00e0 C001      		movw r24,r0
 239 00e2 ED9C      		mul r14,r13
 240 00e4 900D      		add r25,r0
 241 00e6 FC9C      		mul r15,r12
 242 00e8 900D      		add r25,r0
 243 00ea 1124      		clr r1
 244 00ec B801      		movw r22,r16
 245 00ee 0E94 0000 		call __udivmodhi4
 246 00f2 9C2E      		mov r9,r28
 247 00f4 960E      		add r9,r22
 248               	.LVL16:
  74:rgblight.c    **** 			g = val;
 249               		.loc 1 74 0
 250 00f6 742E      		mov r7,r20
 251 00f8 00C0      		rjmp .L13
 252               	.LVL17:
 253               	.L7:
  80:rgblight.c    **** 			g = (((val - base)*(60 - (hue % 60))) / 60) + base;
 254               		.loc 1 80 0
 255 00fa EC1A      		sub r14,r28
 256 00fc F108      		sbc r15,__zero_reg__
 257               	.LVL18:
 258 00fe B801      		movw r22,r16
 259 0100 6C19      		sub r22,r12
 260 0102 7D09      		sbc r23,r13
 261 0104 E69E      		mul r14,r22
 262 0106 C001      		movw r24,r0
 263 0108 E79E      		mul r14,r23
 264 010a 900D      		add r25,r0
 265 010c F69E      		mul r15,r22
 266 010e 900D      		add r25,r0
 267 0110 1124      		clr r1
 268 0112 B801      		movw r22,r16
 269 0114 0E94 0000 		call __udivmodhi4
 270 0118 7C2E      		mov r7,r28
 271 011a 760E      		add r7,r22
 272               	.LVL19:
  81:rgblight.c    **** 			b = val;
 273               		.loc 1 81 0
 274 011c 942E      		mov r9,r20
 275               	.LVL20:
 276               	.L13:
  79:rgblight.c    **** 			r = base;
 277               		.loc 1 79 0
 278 011e 8C2E      		mov r8,r28
  82:rgblight.c    **** 			break;
 279               		.loc 1 82 0
 280 0120 00C0      		rjmp .L3
 281               	.LVL21:
 282               	.L8:
  85:rgblight.c    **** 			r = (((val - base)*(hue % 60)) / 60) + base;
 283               		.loc 1 85 0
 284 0122 EC1A      		sub r14,r28
 285 0124 F108      		sbc r15,__zero_reg__
 286               	.LVL22:
 287 0126 EC9C      		mul r14,r12
 288 0128 C001      		movw r24,r0
 289 012a ED9C      		mul r14,r13
 290 012c 900D      		add r25,r0
 291 012e FC9C      		mul r15,r12
 292 0130 900D      		add r25,r0
 293 0132 1124      		clr r1
 294 0134 B801      		movw r22,r16
 295 0136 0E94 0000 		call __udivmodhi4
 296 013a 8C2E      		mov r8,r28
 297 013c 860E      		add r8,r22
 298               	.LVL23:
  87:rgblight.c    **** 			b = val;
 299               		.loc 1 87 0
 300 013e 942E      		mov r9,r20
  86:rgblight.c    **** 			g = base;
 301               		.loc 1 86 0
 302 0140 7C2E      		mov r7,r28
  88:rgblight.c    **** 			break;
 303               		.loc 1 88 0
 304 0142 00C0      		rjmp .L3
 305               	.LVL24:
 306               	.L9:
  93:rgblight.c    **** 			b = (((val - base)*(60 - (hue % 60))) / 60) + base;
 307               		.loc 1 93 0
 308 0144 EC1A      		sub r14,r28
 309 0146 F108      		sbc r15,__zero_reg__
 310               	.LVL25:
 311 0148 B801      		movw r22,r16
 312 014a 6C19      		sub r22,r12
 313 014c 7D09      		sbc r23,r13
 314 014e E69E      		mul r14,r22
 315 0150 C001      		movw r24,r0
 316 0152 E79E      		mul r14,r23
 317 0154 900D      		add r25,r0
 318 0156 F69E      		mul r15,r22
 319 0158 900D      		add r25,r0
 320 015a 1124      		clr r1
 321 015c B801      		movw r22,r16
 322 015e 0E94 0000 		call __udivmodhi4
 323 0162 9C2E      		mov r9,r28
 324 0164 960E      		add r9,r22
 325               	.LVL26:
  92:rgblight.c    **** 			g = base;
 326               		.loc 1 92 0
 327 0166 7C2E      		mov r7,r28
 328               	.LVL27:
 329               	.L12:
  91:rgblight.c    **** 			r = val;
 330               		.loc 1 91 0
 331 0168 842E      		mov r8,r20
  94:rgblight.c    **** 			break;
 332               		.loc 1 94 0
 333 016a 00C0      		rjmp .L3
 334               	.LVL28:
 335               	.L11:
  55:rgblight.c    **** 		b = val;
 336               		.loc 1 55 0
 337 016c 942E      		mov r9,r20
  54:rgblight.c    **** 		g = val;
 338               		.loc 1 54 0
 339 016e 742E      		mov r7,r20
  53:rgblight.c    **** 		r = val;
 340               		.loc 1 53 0
 341 0170 842E      		mov r8,r20
 342               	.LVL29:
 343               	.L3:
  97:rgblight.c    ****   setrgb(r,g,b, led1);
 344               		.loc 1 97 0
 345 0172 492D      		mov r20,r9
 346               	.LVL30:
 347 0174 672D      		mov r22,r7
 348 0176 882D      		mov r24,r8
 349               	/* epilogue start */
  98:rgblight.c    **** }
 350               		.loc 1 98 0
 351 0178 DF91      		pop r29
 352 017a CF91      		pop r28
 353 017c 1F91      		pop r17
 354 017e 0F91      		pop r16
 355 0180 FF90      		pop r15
 356 0182 EF90      		pop r14
 357 0184 DF90      		pop r13
 358 0186 CF90      		pop r12
 359 0188 BF90      		pop r11
 360 018a AF90      		pop r10
 361               	.LVL31:
 362 018c 9F90      		pop r9
 363               	.LVL32:
 364 018e 8F90      		pop r8
 365               	.LVL33:
 366 0190 7F90      		pop r7
 367               	.LVL34:
  97:rgblight.c    ****   setrgb(r,g,b, led1);
 368               		.loc 1 97 0
 369 0192 0C94 0000 		jmp setrgb
 370               	.LVL35:
 371               		.cfi_endproc
 372               	.LFE7:
 374               		.section	.text.eeconfig_read_rgblight,"ax",@progbits
 375               	.global	eeconfig_read_rgblight
 377               	eeconfig_read_rgblight:
 378               	.LFB9:
 104:rgblight.c    **** }
 105:rgblight.c    **** 
 106:rgblight.c    **** 
 107:rgblight.c    **** uint32_t eeconfig_read_rgblight(void) {
 379               		.loc 1 107 0
 380               		.cfi_startproc
 381               	/* prologue: function */
 382               	/* frame size = 0 */
 383               	/* stack size = 0 */
 384               	.L__stack_usage = 0
 108:rgblight.c    ****   return eeprom_read_dword(EECONFIG_RGBLIGHT);
 385               		.loc 1 108 0
 386 0000 87E0      		ldi r24,lo8(7)
 387 0002 90E0      		ldi r25,0
 388 0004 0C94 0000 		jmp __eerd_dword_m32u4
 389               	.LVL36:
 390               		.cfi_endproc
 391               	.LFE9:
 393               		.section	.text.eeconfig_write_rgblight,"ax",@progbits
 394               	.global	eeconfig_write_rgblight
 396               	eeconfig_write_rgblight:
 397               	.LFB10:
 109:rgblight.c    **** }
 110:rgblight.c    **** void eeconfig_write_rgblight(uint32_t val) {
 398               		.loc 1 110 0
 399               		.cfi_startproc
 400               	.LVL37:
 401               	/* prologue: function */
 402               	/* frame size = 0 */
 403               	/* stack size = 0 */
 404               	.L__stack_usage = 0
 405 0000 AB01      		movw r20,r22
 406 0002 BC01      		movw r22,r24
 111:rgblight.c    ****   eeprom_write_dword(EECONFIG_RGBLIGHT, val);
 407               		.loc 1 111 0
 408 0004 87E0      		ldi r24,lo8(7)
 409 0006 90E0      		ldi r25,0
 410 0008 0C94 0000 		jmp __eewr_dword_m32u4
 411               	.LVL38:
 412               		.cfi_endproc
 413               	.LFE10:
 415               		.section	.text.eeconfig_write_rgblight_default,"ax",@progbits
 416               	.global	eeconfig_write_rgblight_default
 418               	eeconfig_write_rgblight_default:
 419               	.LFB11:
 112:rgblight.c    **** }
 113:rgblight.c    **** void eeconfig_write_rgblight_default(void) {
 420               		.loc 1 113 0
 421               		.cfi_startproc
 422               	/* prologue: function */
 423               	/* frame size = 0 */
 424               	/* stack size = 0 */
 425               	.L__stack_usage = 0
 114:rgblight.c    **** 	dprintf("eeconfig_write_rgblight_default\n");
 115:rgblight.c    **** 	rgblight_config.enable = 1;
 116:rgblight.c    **** 	rgblight_config.mode = 1;
 117:rgblight.c    **** 	rgblight_config.hue = 200;
 426               		.loc 1 117 0
 427 0000 83E0      		ldi r24,lo8(3)
 428 0002 8093 0000 		sts rgblight_config,r24
 429 0006 E0E0      		ldi r30,lo8(rgblight_config+1)
 430 0008 F0E0      		ldi r31,hi8(rgblight_config+1)
 431 000a 8081      		ld r24,Z
 432 000c 8078      		andi r24,lo8(-128)
 433 000e 8466      		ori r24,lo8(100)
 434 0010 8F77      		andi r24,lo8(~(1<<7))
 435 0012 8083      		st Z,r24
 118:rgblight.c    **** 	rgblight_config.sat = 204;
 436               		.loc 1 118 0
 437 0014 8CEC      		ldi r24,lo8(-52)
 438 0016 8093 0000 		sts rgblight_config+2,r24
 119:rgblight.c    **** 	rgblight_config.val = 204;
 439               		.loc 1 119 0
 440 001a 8093 0000 		sts rgblight_config+3,r24
 120:rgblight.c    **** 	eeconfig_write_rgblight(rgblight_config.raw);
 441               		.loc 1 120 0
 442 001e 6091 0000 		lds r22,rgblight_config
 443 0022 7091 0000 		lds r23,rgblight_config+1
 444 0026 8091 0000 		lds r24,rgblight_config+2
 445 002a 9091 0000 		lds r25,rgblight_config+3
 446 002e 0C94 0000 		jmp eeconfig_write_rgblight
 447               	.LVL39:
 448               		.cfi_endproc
 449               	.LFE11:
 451               		.section	.text.eeconfig_debug_rgblight,"ax",@progbits
 452               	.global	eeconfig_debug_rgblight
 454               	eeconfig_debug_rgblight:
 455               	.LFB12:
 121:rgblight.c    **** }
 122:rgblight.c    **** void eeconfig_debug_rgblight(void) {
 456               		.loc 1 122 0
 457               		.cfi_startproc
 458               	/* prologue: function */
 459               	/* frame size = 0 */
 460               	/* stack size = 0 */
 461               	.L__stack_usage = 0
 462 0000 0895      		ret
 463               		.cfi_endproc
 464               	.LFE12:
 466               		.section	.text.rgblight_set,"ax",@progbits
 467               	.global	rgblight_set
 469               	rgblight_set:
 470               	.LFB29:
 123:rgblight.c    **** 	dprintf("rgblight_config eprom\n");
 124:rgblight.c    **** 	dprintf("rgblight_config.enable = %d\n", rgblight_config.enable);
 125:rgblight.c    **** 	dprintf("rghlight_config.mode = %d\n", rgblight_config.mode);
 126:rgblight.c    **** 	dprintf("rgblight_config.hue = %d\n", rgblight_config.hue);
 127:rgblight.c    **** 	dprintf("rgblight_config.sat = %d\n", rgblight_config.sat);
 128:rgblight.c    **** 	dprintf("rgblight_config.val = %d\n", rgblight_config.val);
 129:rgblight.c    **** }
 130:rgblight.c    **** 
 131:rgblight.c    **** void rgblight_init(void) {
 132:rgblight.c    ****   debug_enable = 1; // Debug ON!
 133:rgblight.c    **** 	dprintf("rgblight_init called.\n");
 134:rgblight.c    ****   rgblight_inited = 1;
 135:rgblight.c    **** 	dprintf("rgblight_init start!\n");
 136:rgblight.c    ****   if (!eeconfig_is_enabled()) {
 137:rgblight.c    **** 		dprintf("rgblight_init eeconfig is not enabled.\n");
 138:rgblight.c    ****     eeconfig_init();
 139:rgblight.c    **** 		eeconfig_write_rgblight_default();
 140:rgblight.c    ****   }
 141:rgblight.c    ****   rgblight_config.raw = eeconfig_read_rgblight();
 142:rgblight.c    **** 	if (!rgblight_config.mode) {
 143:rgblight.c    **** 		dprintf("rgblight_init rgblight_config.mode = 0. Write default values to EEPROM.\n");
 144:rgblight.c    **** 		eeconfig_write_rgblight_default();
 145:rgblight.c    **** 		rgblight_config.raw = eeconfig_read_rgblight();
 146:rgblight.c    **** 	}
 147:rgblight.c    **** 	eeconfig_debug_rgblight(); // display current eeprom values
 148:rgblight.c    **** 
 149:rgblight.c    **** 	rgblight_timer_init(); // setup the timer
 150:rgblight.c    **** 
 151:rgblight.c    ****   if (rgblight_config.enable) {
 152:rgblight.c    ****     rgblight_mode(rgblight_config.mode);
 153:rgblight.c    ****   }
 154:rgblight.c    **** }
 155:rgblight.c    **** 
 156:rgblight.c    **** void rgblight_increase(void) {
 157:rgblight.c    **** 	uint8_t mode;
 158:rgblight.c    ****   if (rgblight_config.mode < RGBLIGHT_MODES) {
 159:rgblight.c    ****     mode = rgblight_config.mode + 1;
 160:rgblight.c    ****   }
 161:rgblight.c    **** 	rgblight_mode(mode);
 162:rgblight.c    **** }
 163:rgblight.c    **** 
 164:rgblight.c    **** void rgblight_decrease(void) {
 165:rgblight.c    **** 	uint8_t mode;
 166:rgblight.c    ****   if (rgblight_config.mode > 1) { //mode will never < 1, if mode is less than 1, eeprom need to be 
 167:rgblight.c    ****     mode = rgblight_config.mode-1;
 168:rgblight.c    ****   }
 169:rgblight.c    **** 	rgblight_mode(mode);
 170:rgblight.c    **** }
 171:rgblight.c    **** 
 172:rgblight.c    **** void rgblight_pre(void) {
 173:rgblight.c    **** 	uint8_t mode;
 174:rgblight.c    ****   mode = rgblight_config.mode - 1;
 175:rgblight.c    ****   if (mode < 0) {
 176:rgblight.c    ****     mode = 0;
 177:rgblight.c    ****   }
 178:rgblight.c    **** 	rgblight_mode(mode);
 179:rgblight.c    **** }
 180:rgblight.c    **** 
 181:rgblight.c    **** void rgblight_step(void) {
 182:rgblight.c    **** 	uint8_t mode;
 183:rgblight.c    ****   mode = rgblight_config.mode + 1;
 184:rgblight.c    ****   if (mode > RGBLIGHT_MODES) {
 185:rgblight.c    ****     mode = 1;
 186:rgblight.c    ****   }
 187:rgblight.c    **** 	rgblight_mode(mode);
 188:rgblight.c    **** }
 189:rgblight.c    **** 
 190:rgblight.c    **** void rgblight_mode(uint8_t mode) {
 191:rgblight.c    **** 	if (!rgblight_config.enable) {
 192:rgblight.c    **** 		return;
 193:rgblight.c    **** 	}
 194:rgblight.c    ****   if (mode<1) {
 195:rgblight.c    **** 		rgblight_config.mode = 1;
 196:rgblight.c    **** 	} else if (mode > RGBLIGHT_MODES) {
 197:rgblight.c    **** 		rgblight_config.mode = RGBLIGHT_MODES;
 198:rgblight.c    **** 	} else {
 199:rgblight.c    **** 		rgblight_config.mode = mode;
 200:rgblight.c    **** 	}
 201:rgblight.c    ****   eeconfig_write_rgblight(rgblight_config.raw);
 202:rgblight.c    ****   dprintf("rgblight mode: %u\n", rgblight_config.mode);
 203:rgblight.c    **** 	if (rgblight_config.mode == 1) {
 204:rgblight.c    **** 		rgblight_timer_disable();
 205:rgblight.c    **** 	} else if (rgblight_config.mode >=2 && rgblight_config.mode <=23) {
 206:rgblight.c    **** 		// MODE 2-5, breathing
 207:rgblight.c    **** 		// MODE 6-8, rainbow mood
 208:rgblight.c    **** 		// MODE 9-14, rainbow swirl
 209:rgblight.c    **** 		// MODE 15-20, snake
 210:rgblight.c    **** 		// MODE 21-23, knight
 211:rgblight.c    **** 		rgblight_timer_enable();
 212:rgblight.c    **** 	}
 213:rgblight.c    ****   rgblight_sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val);
 214:rgblight.c    **** }
 215:rgblight.c    **** 
 216:rgblight.c    **** void rgblight_toggle(void) {
 217:rgblight.c    ****   rgblight_config.enable ^= 1;
 218:rgblight.c    ****   eeconfig_write_rgblight(rgblight_config.raw);
 219:rgblight.c    ****   dprintf("rgblight toggle: rgblight_config.enable = %u\n", rgblight_config.enable);
 220:rgblight.c    **** 	if (rgblight_config.enable) {
 221:rgblight.c    **** 		rgblight_mode(rgblight_config.mode);
 222:rgblight.c    **** 	} else {
 223:rgblight.c    **** 		rgblight_timer_disable();
 224:rgblight.c    **** 		_delay_ms(50);
 225:rgblight.c    **** 		rgblight_set();
 226:rgblight.c    **** 	}
 227:rgblight.c    **** }
 228:rgblight.c    **** 
 229:rgblight.c    **** 
 230:rgblight.c    **** void rgblight_increase_hue(void){
 231:rgblight.c    **** 	uint16_t hue;
 232:rgblight.c    ****   hue = (rgblight_config.hue+RGBLIGHT_HUE_STEP) % 360;
 233:rgblight.c    ****   rgblight_sethsv(hue, rgblight_config.sat, rgblight_config.val);
 234:rgblight.c    **** }
 235:rgblight.c    **** void rgblight_decrease_hue(void){
 236:rgblight.c    **** 	uint16_t hue;
 237:rgblight.c    **** 	if (rgblight_config.hue-RGBLIGHT_HUE_STEP <0 ) {
 238:rgblight.c    **** 		hue = (rgblight_config.hue+360-RGBLIGHT_HUE_STEP) % 360;
 239:rgblight.c    **** 	} else {
 240:rgblight.c    **** 		hue = (rgblight_config.hue-RGBLIGHT_HUE_STEP) % 360;
 241:rgblight.c    **** 	}
 242:rgblight.c    ****   rgblight_sethsv(hue, rgblight_config.sat, rgblight_config.val);
 243:rgblight.c    **** }
 244:rgblight.c    **** void rgblight_increase_sat(void) {
 245:rgblight.c    **** 	uint8_t sat;
 246:rgblight.c    ****   if (rgblight_config.sat + RGBLIGHT_SAT_STEP > 255) {
 247:rgblight.c    ****     sat = 255;
 248:rgblight.c    ****   } else {
 249:rgblight.c    ****     sat = rgblight_config.sat+RGBLIGHT_SAT_STEP;
 250:rgblight.c    ****   }
 251:rgblight.c    ****   rgblight_sethsv(rgblight_config.hue, sat, rgblight_config.val);
 252:rgblight.c    **** }
 253:rgblight.c    **** void rgblight_decrease_sat(void){
 254:rgblight.c    **** 	uint8_t sat;
 255:rgblight.c    ****   if (rgblight_config.sat - RGBLIGHT_SAT_STEP < 0) {
 256:rgblight.c    ****     sat = 0;
 257:rgblight.c    ****   } else {
 258:rgblight.c    ****     sat = rgblight_config.sat-RGBLIGHT_SAT_STEP;
 259:rgblight.c    ****   }
 260:rgblight.c    ****   rgblight_sethsv(rgblight_config.hue, sat, rgblight_config.val);
 261:rgblight.c    **** }
 262:rgblight.c    **** void rgblight_increase_val(void){
 263:rgblight.c    **** 	uint8_t val;
 264:rgblight.c    ****   if (rgblight_config.val + RGBLIGHT_VAL_STEP > 255) {
 265:rgblight.c    ****     val = 255;
 266:rgblight.c    ****   } else {
 267:rgblight.c    ****     val = rgblight_config.val+RGBLIGHT_VAL_STEP;
 268:rgblight.c    ****   }
 269:rgblight.c    ****   rgblight_sethsv(rgblight_config.hue, rgblight_config.sat, val);
 270:rgblight.c    **** }
 271:rgblight.c    **** void rgblight_decrease_val(void) {
 272:rgblight.c    **** 	uint8_t val;
 273:rgblight.c    ****   if (rgblight_config.val - RGBLIGHT_VAL_STEP < 0) {
 274:rgblight.c    ****     val = 0;
 275:rgblight.c    ****   } else {
 276:rgblight.c    ****     val = rgblight_config.val-RGBLIGHT_VAL_STEP;
 277:rgblight.c    ****   }
 278:rgblight.c    ****   rgblight_sethsv(rgblight_config.hue, rgblight_config.sat, val);
 279:rgblight.c    **** }
 280:rgblight.c    **** 
 281:rgblight.c    **** void rgblight_sethsv_noeeprom(uint16_t hue, uint8_t sat, uint8_t val){
 282:rgblight.c    **** 	inmem_config.raw = rgblight_config.raw;
 283:rgblight.c    ****   if (rgblight_config.enable) {
 284:rgblight.c    ****     struct cRGB tmp_led;
 285:rgblight.c    ****     sethsv(hue, sat, val, &tmp_led);
 286:rgblight.c    **** 		inmem_config.hue = hue;
 287:rgblight.c    **** 		inmem_config.sat = sat;
 288:rgblight.c    **** 		inmem_config.val = val;
 289:rgblight.c    ****     // dprintf("rgblight set hue [MEMORY]: %u,%u,%u\n", inmem_config.hue, inmem_config.sat, inmem_c
 290:rgblight.c    ****     rgblight_setrgb(tmp_led.r, tmp_led.g, tmp_led.b);
 291:rgblight.c    ****   }
 292:rgblight.c    **** }
 293:rgblight.c    **** void rgblight_sethsv(uint16_t hue, uint8_t sat, uint8_t val){
 294:rgblight.c    ****   if (rgblight_config.enable) {
 295:rgblight.c    **** 		if (rgblight_config.mode == 1) {
 296:rgblight.c    **** 			// same static color
 297:rgblight.c    **** 			rgblight_sethsv_noeeprom(hue, sat, val);
 298:rgblight.c    **** 		} else {
 299:rgblight.c    **** 			// all LEDs in same color
 300:rgblight.c    **** 			if (rgblight_config.mode >= 2 && rgblight_config.mode <= 5) {
 301:rgblight.c    **** 				// breathing mode, ignore the change of val, use in memory value instead
 302:rgblight.c    **** 				val = rgblight_config.val;
 303:rgblight.c    **** 			} else if (rgblight_config.mode >= 6 && rgblight_config.mode <= 14) {
 304:rgblight.c    **** 				// rainbow mood and rainbow swirl, ignore the change of hue
 305:rgblight.c    **** 				hue = rgblight_config.hue;
 306:rgblight.c    **** 			}
 307:rgblight.c    **** 		}
 308:rgblight.c    **** 		rgblight_config.hue = hue;
 309:rgblight.c    **** 		rgblight_config.sat = sat;
 310:rgblight.c    **** 		rgblight_config.val = val;
 311:rgblight.c    **** 		eeconfig_write_rgblight(rgblight_config.raw);
 312:rgblight.c    **** 		dprintf("rgblight set hsv [EEPROM]: %u,%u,%u\n", rgblight_config.hue, rgblight_config.sat, rgblig
 313:rgblight.c    ****   }
 314:rgblight.c    **** }
 315:rgblight.c    **** 
 316:rgblight.c    **** void rgblight_setrgb(uint8_t r, uint8_t g, uint8_t b){
 317:rgblight.c    ****   // dprintf("rgblight set rgb: %u,%u,%u\n", r,g,b);
 318:rgblight.c    ****   for (uint8_t i=0;i<RGBLED_NUM;i++) {
 319:rgblight.c    ****     led[i].r = r;
 320:rgblight.c    ****     led[i].g = g;
 321:rgblight.c    ****     led[i].b = b;
 322:rgblight.c    ****   }
 323:rgblight.c    ****   rgblight_set();
 324:rgblight.c    **** 
 325:rgblight.c    **** }
 326:rgblight.c    **** 
 327:rgblight.c    **** void rgblight_set(void) {
 471               		.loc 1 327 0
 472               		.cfi_startproc
 473               	/* prologue: function */
 474               	/* frame size = 0 */
 475               	/* stack size = 0 */
 476               	.L__stack_usage = 0
 328:rgblight.c    **** 	if (rgblight_config.enable) {
 477               		.loc 1 328 0
 478 0000 8091 0000 		lds r24,rgblight_config
 479 0004 80FF      		sbrs r24,0
 480 0006 00C0      		rjmp .L19
 481               	.L21:
 329:rgblight.c    **** 		ws2812_setleds(led, RGBLED_NUM);
 482               		.loc 1 329 0
 483 0008 68E0      		ldi r22,lo8(8)
 484 000a 70E0      		ldi r23,0
 485 000c 80E0      		ldi r24,lo8(led)
 486 000e 90E0      		ldi r25,hi8(led)
 487 0010 0C94 0000 		jmp ws2812_setleds
 488               	.LVL40:
 489               	.L19:
 490 0014 E0E0      		ldi r30,lo8(led+2)
 491 0016 F0E0      		ldi r31,hi8(led+2)
 492               	.L20:
 493               	.LBB6:
 327:rgblight.c    **** void rgblight_set(void) {
 494               		.loc 1 327 0 discriminator 2
 495 0018 DF01      		movw r26,r30
 496 001a 1197      		sbiw r26,1
 330:rgblight.c    **** 	} else {
 331:rgblight.c    **** 		for (uint8_t i=0;i<RGBLED_NUM;i++) {
 332:rgblight.c    **** 	    led[i].r = 0;
 497               		.loc 1 332 0 discriminator 2
 498 001c 1C92      		st X,__zero_reg__
 327:rgblight.c    **** void rgblight_set(void) {
 499               		.loc 1 327 0 discriminator 2
 500 001e DF01      		movw r26,r30
 501 0020 1297      		sbiw r26,2
 333:rgblight.c    **** 	    led[i].g = 0;
 502               		.loc 1 333 0 discriminator 2
 503 0022 1C92      		st X,__zero_reg__
 334:rgblight.c    **** 	    led[i].b = 0;
 504               		.loc 1 334 0 discriminator 2
 505 0024 1082      		st Z,__zero_reg__
 506               	.LVL41:
 507 0026 3396      		adiw r30,3
 331:rgblight.c    **** 		for (uint8_t i=0;i<RGBLED_NUM;i++) {
 508               		.loc 1 331 0 discriminator 2
 509 0028 80E0      		ldi r24,hi8(led+26)
 510 002a E030      		cpi r30,lo8(led+26)
 511 002c F807      		cpc r31,r24
 512 002e 01F4      		brne .L20
 513 0030 00C0      		rjmp .L21
 514               	.LBE6:
 515               		.cfi_endproc
 516               	.LFE29:
 518               		.section	.text.rgblight_setrgb,"ax",@progbits
 519               	.global	rgblight_setrgb
 521               	rgblight_setrgb:
 522               	.LFB28:
 316:rgblight.c    **** void rgblight_setrgb(uint8_t r, uint8_t g, uint8_t b){
 523               		.loc 1 316 0
 524               		.cfi_startproc
 525               	.LVL42:
 526               	/* prologue: function */
 527               	/* frame size = 0 */
 528               	/* stack size = 0 */
 529               	.L__stack_usage = 0
 530 0000 E0E0      		ldi r30,lo8(led+2)
 531 0002 F0E0      		ldi r31,hi8(led+2)
 532               	.LVL43:
 533               	.L24:
 534               	.LBB7:
 316:rgblight.c    **** void rgblight_setrgb(uint8_t r, uint8_t g, uint8_t b){
 535               		.loc 1 316 0 discriminator 2
 536 0004 DF01      		movw r26,r30
 537 0006 1197      		sbiw r26,1
 319:rgblight.c    ****     led[i].r = r;
 538               		.loc 1 319 0 discriminator 2
 539 0008 8C93      		st X,r24
 316:rgblight.c    **** void rgblight_setrgb(uint8_t r, uint8_t g, uint8_t b){
 540               		.loc 1 316 0 discriminator 2
 541 000a DF01      		movw r26,r30
 542 000c 1297      		sbiw r26,2
 320:rgblight.c    ****     led[i].g = g;
 543               		.loc 1 320 0 discriminator 2
 544 000e 6C93      		st X,r22
 321:rgblight.c    ****     led[i].b = b;
 545               		.loc 1 321 0 discriminator 2
 546 0010 4083      		st Z,r20
 547 0012 3396      		adiw r30,3
 318:rgblight.c    ****   for (uint8_t i=0;i<RGBLED_NUM;i++) {
 548               		.loc 1 318 0 discriminator 2
 549 0014 90E0      		ldi r25,hi8(led+26)
 550 0016 E030      		cpi r30,lo8(led+26)
 551 0018 F907      		cpc r31,r25
 552 001a 01F4      		brne .L24
 553               	.LBE7:
 323:rgblight.c    ****   rgblight_set();
 554               		.loc 1 323 0
 555 001c 0C94 0000 		jmp rgblight_set
 556               	.LVL44:
 557               		.cfi_endproc
 558               	.LFE28:
 560               		.section	.text.rgblight_sethsv_noeeprom,"ax",@progbits
 561               	.global	rgblight_sethsv_noeeprom
 563               	rgblight_sethsv_noeeprom:
 564               	.LFB26:
 281:rgblight.c    **** void rgblight_sethsv_noeeprom(uint16_t hue, uint8_t sat, uint8_t val){
 565               		.loc 1 281 0
 566               		.cfi_startproc
 567               	.LVL45:
 568 0000 CF92      		push r12
 569               	.LCFI13:
 570               		.cfi_def_cfa_offset 3
 571               		.cfi_offset 12, -2
 572 0002 DF92      		push r13
 573               	.LCFI14:
 574               		.cfi_def_cfa_offset 4
 575               		.cfi_offset 13, -3
 576 0004 EF92      		push r14
 577               	.LCFI15:
 578               		.cfi_def_cfa_offset 5
 579               		.cfi_offset 14, -4
 580 0006 FF92      		push r15
 581               	.LCFI16:
 582               		.cfi_def_cfa_offset 6
 583               		.cfi_offset 15, -5
 584 0008 0F93      		push r16
 585               	.LCFI17:
 586               		.cfi_def_cfa_offset 7
 587               		.cfi_offset 16, -6
 588 000a 1F93      		push r17
 589               	.LCFI18:
 590               		.cfi_def_cfa_offset 8
 591               		.cfi_offset 17, -7
 592 000c CF93      		push r28
 593               	.LCFI19:
 594               		.cfi_def_cfa_offset 9
 595               		.cfi_offset 28, -8
 596 000e DF93      		push r29
 597               	.LCFI20:
 598               		.cfi_def_cfa_offset 10
 599               		.cfi_offset 29, -9
 600 0010 00D0      		rcall .
 601 0012 1F92      		push __zero_reg__
 602               	.LCFI21:
 603               		.cfi_def_cfa_offset 13
 604 0014 CDB7      		in r28,__SP_L__
 605 0016 DEB7      		in r29,__SP_H__
 606               	.LCFI22:
 607               		.cfi_def_cfa_register 28
 608               	/* prologue: function */
 609               	/* frame size = 3 */
 610               	/* stack size = 11 */
 611               	.L__stack_usage = 11
 612 0018 F82E      		mov r15,r24
 613 001a C92E      		mov r12,r25
 614 001c D62E      		mov r13,r22
 615 001e E42E      		mov r14,r20
 282:rgblight.c    **** 	inmem_config.raw = rgblight_config.raw;
 616               		.loc 1 282 0
 617 0020 0091 0000 		lds r16,rgblight_config
 618 0024 1091 0000 		lds r17,rgblight_config+1
 619 0028 2091 0000 		lds r18,rgblight_config+2
 620 002c 3091 0000 		lds r19,rgblight_config+3
 621 0030 0093 0000 		sts inmem_config,r16
 622 0034 1093 0000 		sts inmem_config+1,r17
 623 0038 2093 0000 		sts inmem_config+2,r18
 624 003c 3093 0000 		sts inmem_config+3,r19
 283:rgblight.c    ****   if (rgblight_config.enable) {
 625               		.loc 1 283 0
 626 0040 8091 0000 		lds r24,rgblight_config
 627               	.LVL46:
 628 0044 80FF      		sbrs r24,0
 629 0046 00C0      		rjmp .L26
 630               	.LBB8:
 285:rgblight.c    ****     sethsv(hue, sat, val, &tmp_led);
 631               		.loc 1 285 0
 632 0048 9E01      		movw r18,r28
 633 004a 2F5F      		subi r18,-1
 634 004c 3F4F      		sbci r19,-1
 635 004e 8F2D      		mov r24,r15
 636 0050 0E94 0000 		call sethsv
 637               	.LVL47:
 286:rgblight.c    **** 		inmem_config.hue = hue;
 638               		.loc 1 286 0
 639 0054 8091 0000 		lds r24,inmem_config
 640 0058 F0FA      		bst r15,0
 641 005a 87F9      		bld r24,7
 642 005c 8093 0000 		sts inmem_config,r24
 643 0060 F694      		lsr r15
 644 0062 2091 0000 		lds r18,inmem_config+1
 645 0066 2078      		andi r18,lo8(-128)
 646 0068 2F29      		or r18,r15
 647 006a C0FA      		bst r12,0
 648 006c 27F9      		bld r18,7
 649 006e 2093 0000 		sts inmem_config+1,r18
 287:rgblight.c    **** 		inmem_config.sat = sat;
 650               		.loc 1 287 0
 651 0072 D092 0000 		sts inmem_config+2,r13
 288:rgblight.c    **** 		inmem_config.val = val;
 652               		.loc 1 288 0
 653 0076 E092 0000 		sts inmem_config+3,r14
 290:rgblight.c    ****     rgblight_setrgb(tmp_led.r, tmp_led.g, tmp_led.b);
 654               		.loc 1 290 0
 655 007a 4B81      		ldd r20,Y+3
 656 007c 6981      		ldd r22,Y+1
 657 007e 8A81      		ldd r24,Y+2
 658 0080 0E94 0000 		call rgblight_setrgb
 659               	.LVL48:
 660               	.L26:
 661               	/* epilogue start */
 662               	.LBE8:
 292:rgblight.c    **** }
 663               		.loc 1 292 0
 664 0084 0F90      		pop __tmp_reg__
 665 0086 0F90      		pop __tmp_reg__
 666 0088 0F90      		pop __tmp_reg__
 667 008a DF91      		pop r29
 668 008c CF91      		pop r28
 669 008e 1F91      		pop r17
 670 0090 0F91      		pop r16
 671 0092 FF90      		pop r15
 672 0094 EF90      		pop r14
 673               	.LVL49:
 674 0096 DF90      		pop r13
 675               	.LVL50:
 676 0098 CF90      		pop r12
 677 009a 0895      		ret
 678               		.cfi_endproc
 679               	.LFE26:
 681               		.section	.text.rgblight_sethsv,"ax",@progbits
 682               	.global	rgblight_sethsv
 684               	rgblight_sethsv:
 685               	.LFB27:
 293:rgblight.c    **** void rgblight_sethsv(uint16_t hue, uint8_t sat, uint8_t val){
 686               		.loc 1 293 0
 687               		.cfi_startproc
 688               	.LVL51:
 689 0000 0F93      		push r16
 690               	.LCFI23:
 691               		.cfi_def_cfa_offset 3
 692               		.cfi_offset 16, -2
 693 0002 1F93      		push r17
 694               	.LCFI24:
 695               		.cfi_def_cfa_offset 4
 696               		.cfi_offset 17, -3
 697 0004 CF93      		push r28
 698               	.LCFI25:
 699               		.cfi_def_cfa_offset 5
 700               		.cfi_offset 28, -4
 701 0006 DF93      		push r29
 702               	.LCFI26:
 703               		.cfi_def_cfa_offset 6
 704               		.cfi_offset 29, -5
 705               	/* prologue: function */
 706               	/* frame size = 0 */
 707               	/* stack size = 4 */
 708               	.L__stack_usage = 4
 709 0008 C82F      		mov r28,r24
 710 000a 192F      		mov r17,r25
 711 000c 062F      		mov r16,r22
 712 000e D42F      		mov r29,r20
 294:rgblight.c    ****   if (rgblight_config.enable) {
 713               		.loc 1 294 0
 714 0010 8091 0000 		lds r24,rgblight_config
 715               	.LVL52:
 716 0014 80FF      		sbrs r24,0
 717 0016 00C0      		rjmp .L31
 295:rgblight.c    **** 		if (rgblight_config.mode == 1) {
 718               		.loc 1 295 0
 719 0018 982F      		mov r25,r24
 720 001a 9E77      		andi r25,lo8(126)
 721 001c 9230      		cpi r25,lo8(2)
 722 001e 01F4      		brne .L33
 297:rgblight.c    **** 			rgblight_sethsv_noeeprom(hue, sat, val);
 723               		.loc 1 297 0
 724 0020 8C2F      		mov r24,r28
 725 0022 912F      		mov r25,r17
 726 0024 0E94 0000 		call rgblight_sethsv_noeeprom
 727               	.LVL53:
 728 0028 00C0      		rjmp .L34
 729               	.LVL54:
 730               	.L33:
 300:rgblight.c    **** 			if (rgblight_config.mode >= 2 && rgblight_config.mode <= 5) {
 731               		.loc 1 300 0
 732 002a 282F      		mov r18,r24
 733 002c 2695      		lsr r18
 734 002e 2F73      		andi r18,lo8(63)
 735 0030 922F      		mov r25,r18
 736 0032 925C      		subi r25,lo8(-(62))
 737 0034 9F73      		andi r25,lo8(63)
 738 0036 9430      		cpi r25,lo8(4)
 739 0038 00F4      		brsh .L35
 302:rgblight.c    **** 				val = rgblight_config.val;
 740               		.loc 1 302 0
 741 003a D091 0000 		lds r29,rgblight_config+3
 742               	.LVL55:
 743 003e 00C0      		rjmp .L34
 744               	.LVL56:
 745               	.L35:
 303:rgblight.c    **** 			} else if (rgblight_config.mode >= 6 && rgblight_config.mode <= 14) {
 746               		.loc 1 303 0
 747 0040 265C      		subi r18,lo8(-(58))
 748 0042 2F73      		andi r18,lo8(63)
 749 0044 2930      		cpi r18,lo8(9)
 750 0046 00F4      		brsh .L34
 305:rgblight.c    **** 				hue = rgblight_config.hue;
 751               		.loc 1 305 0
 752 0048 881F      		rol r24
 753 004a 8827      		clr r24
 754 004c 881F      		rol r24
 755 004e 1091 0000 		lds r17,rgblight_config+1
 756 0052 C12F      		mov r28,r17
 757 0054 CC0F      		lsl r28
 758 0056 C82B      		or r28,r24
 759 0058 17FB      		bst r17,7
 760 005a 1127      		clr r17
 761 005c 10F9      		bld r17,0
 762               	.LVL57:
 763               	.L34:
 308:rgblight.c    **** 		rgblight_config.hue = hue;
 764               		.loc 1 308 0
 765 005e 8091 0000 		lds r24,rgblight_config
 766 0062 C0FB      		bst r28,0
 767 0064 87F9      		bld r24,7
 768 0066 8093 0000 		sts rgblight_config,r24
 769 006a C695      		lsr r28
 770               	.LVL58:
 771 006c 8091 0000 		lds r24,rgblight_config+1
 772 0070 8078      		andi r24,lo8(-128)
 773 0072 8C2B      		or r24,r28
 774 0074 10FB      		bst r17,0
 775 0076 87F9      		bld r24,7
 776 0078 8093 0000 		sts rgblight_config+1,r24
 309:rgblight.c    **** 		rgblight_config.sat = sat;
 777               		.loc 1 309 0
 778 007c 0093 0000 		sts rgblight_config+2,r16
 310:rgblight.c    **** 		rgblight_config.val = val;
 779               		.loc 1 310 0
 780 0080 D093 0000 		sts rgblight_config+3,r29
 311:rgblight.c    **** 		eeconfig_write_rgblight(rgblight_config.raw);
 781               		.loc 1 311 0
 782 0084 6091 0000 		lds r22,rgblight_config
 783 0088 7091 0000 		lds r23,rgblight_config+1
 784 008c 8091 0000 		lds r24,rgblight_config+2
 785 0090 9091 0000 		lds r25,rgblight_config+3
 786               	/* epilogue start */
 314:rgblight.c    **** }
 787               		.loc 1 314 0
 788 0094 DF91      		pop r29
 789               	.LVL59:
 790 0096 CF91      		pop r28
 791 0098 1F91      		pop r17
 792 009a 0F91      		pop r16
 793               	.LVL60:
 311:rgblight.c    **** 		eeconfig_write_rgblight(rgblight_config.raw);
 794               		.loc 1 311 0
 795 009c 0C94 0000 		jmp eeconfig_write_rgblight
 796               	.LVL61:
 797               	.L31:
 798               	/* epilogue start */
 314:rgblight.c    **** }
 799               		.loc 1 314 0
 800 00a0 DF91      		pop r29
 801 00a2 CF91      		pop r28
 802 00a4 1F91      		pop r17
 803 00a6 0F91      		pop r16
 804               	.LVL62:
 805 00a8 0895      		ret
 806               		.cfi_endproc
 807               	.LFE27:
 809               		.section	.text.rgblight_decrease_val,"ax",@progbits
 810               	.global	rgblight_decrease_val
 812               	rgblight_decrease_val:
 813               	.LFB25:
 271:rgblight.c    **** void rgblight_decrease_val(void) {
 814               		.loc 1 271 0
 815               		.cfi_startproc
 816               	/* prologue: function */
 817               	/* frame size = 0 */
 818               	/* stack size = 0 */
 819               	.L__stack_usage = 0
 273:rgblight.c    ****   if (rgblight_config.val - RGBLIGHT_VAL_STEP < 0) {
 820               		.loc 1 273 0
 821 0000 4091 0000 		lds r20,rgblight_config+3
 822 0004 842F      		mov r24,r20
 823 0006 90E0      		ldi r25,0
 824 0008 4197      		sbiw r24,17
 825 000a 04F0      		brlt .L38
 276:rgblight.c    ****     val = rgblight_config.val-RGBLIGHT_VAL_STEP;
 826               		.loc 1 276 0
 827 000c 4151      		subi r20,lo8(-(-17))
 828               	.LVL63:
 829 000e 00C0      		rjmp .L37
 830               	.LVL64:
 831               	.L38:
 274:rgblight.c    ****     val = 0;
 832               		.loc 1 274 0
 833 0010 40E0      		ldi r20,0
 834               	.L37:
 835               	.LVL65:
 278:rgblight.c    ****   rgblight_sethsv(rgblight_config.hue, rgblight_config.sat, val);
 836               		.loc 1 278 0
 837 0012 8091 0000 		lds r24,rgblight_config
 838 0016 881F      		rol r24
 839 0018 8827      		clr r24
 840 001a 881F      		rol r24
 841 001c 9091 0000 		lds r25,rgblight_config+1
 842 0020 292F      		mov r18,r25
 843 0022 220F      		lsl r18
 844 0024 97FB      		bst r25,7
 845 0026 9927      		clr r25
 846 0028 90F9      		bld r25,0
 847 002a 6091 0000 		lds r22,rgblight_config+2
 848 002e 822B      		or r24,r18
 849 0030 0C94 0000 		jmp rgblight_sethsv
 850               	.LVL66:
 851               		.cfi_endproc
 852               	.LFE25:
 854               		.section	.text.rgblight_increase_val,"ax",@progbits
 855               	.global	rgblight_increase_val
 857               	rgblight_increase_val:
 858               	.LFB24:
 262:rgblight.c    **** void rgblight_increase_val(void){
 859               		.loc 1 262 0
 860               		.cfi_startproc
 861               	/* prologue: function */
 862               	/* frame size = 0 */
 863               	/* stack size = 0 */
 864               	.L__stack_usage = 0
 264:rgblight.c    ****   if (rgblight_config.val + RGBLIGHT_VAL_STEP > 255) {
 865               		.loc 1 264 0
 866 0000 4091 0000 		lds r20,rgblight_config+3
 867 0004 842F      		mov r24,r20
 868 0006 90E0      		ldi r25,0
 869 0008 8F3E      		cpi r24,-17
 870 000a 9105      		cpc r25,__zero_reg__
 871 000c 04F4      		brge .L41
 267:rgblight.c    ****     val = rgblight_config.val+RGBLIGHT_VAL_STEP;
 872               		.loc 1 267 0
 873 000e 4F5E      		subi r20,lo8(-(17))
 874               	.LVL67:
 875 0010 00C0      		rjmp .L40
 876               	.LVL68:
 877               	.L41:
 265:rgblight.c    ****     val = 255;
 878               		.loc 1 265 0
 879 0012 4FEF      		ldi r20,lo8(-1)
 880               	.L40:
 881               	.LVL69:
 269:rgblight.c    ****   rgblight_sethsv(rgblight_config.hue, rgblight_config.sat, val);
 882               		.loc 1 269 0
 883 0014 8091 0000 		lds r24,rgblight_config
 884 0018 881F      		rol r24
 885 001a 8827      		clr r24
 886 001c 881F      		rol r24
 887 001e 9091 0000 		lds r25,rgblight_config+1
 888 0022 292F      		mov r18,r25
 889 0024 220F      		lsl r18
 890 0026 97FB      		bst r25,7
 891 0028 9927      		clr r25
 892 002a 90F9      		bld r25,0
 893 002c 6091 0000 		lds r22,rgblight_config+2
 894 0030 822B      		or r24,r18
 895 0032 0C94 0000 		jmp rgblight_sethsv
 896               	.LVL70:
 897               		.cfi_endproc
 898               	.LFE24:
 900               		.section	.text.rgblight_decrease_sat,"ax",@progbits
 901               	.global	rgblight_decrease_sat
 903               	rgblight_decrease_sat:
 904               	.LFB23:
 253:rgblight.c    **** void rgblight_decrease_sat(void){
 905               		.loc 1 253 0
 906               		.cfi_startproc
 907               	/* prologue: function */
 908               	/* frame size = 0 */
 909               	/* stack size = 0 */
 910               	.L__stack_usage = 0
 255:rgblight.c    ****   if (rgblight_config.sat - RGBLIGHT_SAT_STEP < 0) {
 911               		.loc 1 255 0
 912 0000 6091 0000 		lds r22,rgblight_config+2
 913 0004 862F      		mov r24,r22
 914 0006 90E0      		ldi r25,0
 915 0008 4197      		sbiw r24,17
 916 000a 04F0      		brlt .L44
 258:rgblight.c    ****     sat = rgblight_config.sat-RGBLIGHT_SAT_STEP;
 917               		.loc 1 258 0
 918 000c 6151      		subi r22,lo8(-(-17))
 919               	.LVL71:
 920 000e 00C0      		rjmp .L43
 921               	.LVL72:
 922               	.L44:
 256:rgblight.c    ****     sat = 0;
 923               		.loc 1 256 0
 924 0010 60E0      		ldi r22,0
 925               	.L43:
 926               	.LVL73:
 260:rgblight.c    ****   rgblight_sethsv(rgblight_config.hue, sat, rgblight_config.val);
 927               		.loc 1 260 0
 928 0012 8091 0000 		lds r24,rgblight_config
 929 0016 881F      		rol r24
 930 0018 8827      		clr r24
 931 001a 881F      		rol r24
 932 001c 9091 0000 		lds r25,rgblight_config+1
 933 0020 292F      		mov r18,r25
 934 0022 220F      		lsl r18
 935 0024 97FB      		bst r25,7
 936 0026 9927      		clr r25
 937 0028 90F9      		bld r25,0
 938 002a 4091 0000 		lds r20,rgblight_config+3
 939 002e 822B      		or r24,r18
 940 0030 0C94 0000 		jmp rgblight_sethsv
 941               	.LVL74:
 942               		.cfi_endproc
 943               	.LFE23:
 945               		.section	.text.rgblight_increase_sat,"ax",@progbits
 946               	.global	rgblight_increase_sat
 948               	rgblight_increase_sat:
 949               	.LFB22:
 244:rgblight.c    **** void rgblight_increase_sat(void) {
 950               		.loc 1 244 0
 951               		.cfi_startproc
 952               	/* prologue: function */
 953               	/* frame size = 0 */
 954               	/* stack size = 0 */
 955               	.L__stack_usage = 0
 246:rgblight.c    ****   if (rgblight_config.sat + RGBLIGHT_SAT_STEP > 255) {
 956               		.loc 1 246 0
 957 0000 6091 0000 		lds r22,rgblight_config+2
 958 0004 862F      		mov r24,r22
 959 0006 90E0      		ldi r25,0
 960 0008 8F3E      		cpi r24,-17
 961 000a 9105      		cpc r25,__zero_reg__
 962 000c 04F4      		brge .L47
 249:rgblight.c    ****     sat = rgblight_config.sat+RGBLIGHT_SAT_STEP;
 963               		.loc 1 249 0
 964 000e 6F5E      		subi r22,lo8(-(17))
 965               	.LVL75:
 966 0010 00C0      		rjmp .L46
 967               	.LVL76:
 968               	.L47:
 247:rgblight.c    ****     sat = 255;
 969               		.loc 1 247 0
 970 0012 6FEF      		ldi r22,lo8(-1)
 971               	.L46:
 972               	.LVL77:
 251:rgblight.c    ****   rgblight_sethsv(rgblight_config.hue, sat, rgblight_config.val);
 973               		.loc 1 251 0
 974 0014 8091 0000 		lds r24,rgblight_config
 975 0018 881F      		rol r24
 976 001a 8827      		clr r24
 977 001c 881F      		rol r24
 978 001e 9091 0000 		lds r25,rgblight_config+1
 979 0022 292F      		mov r18,r25
 980 0024 220F      		lsl r18
 981 0026 97FB      		bst r25,7
 982 0028 9927      		clr r25
 983 002a 90F9      		bld r25,0
 984 002c 4091 0000 		lds r20,rgblight_config+3
 985 0030 822B      		or r24,r18
 986 0032 0C94 0000 		jmp rgblight_sethsv
 987               	.LVL78:
 988               		.cfi_endproc
 989               	.LFE22:
 991               		.section	.text.rgblight_decrease_hue,"ax",@progbits
 992               	.global	rgblight_decrease_hue
 994               	rgblight_decrease_hue:
 995               	.LFB21:
 235:rgblight.c    **** void rgblight_decrease_hue(void){
 996               		.loc 1 235 0
 997               		.cfi_startproc
 998               	/* prologue: function */
 999               	/* frame size = 0 */
 1000               	/* stack size = 0 */
 1001               	.L__stack_usage = 0
 237:rgblight.c    **** 	if (rgblight_config.hue-RGBLIGHT_HUE_STEP <0 ) {
 1002               		.loc 1 237 0
 1003 0000 2091 0000 		lds r18,rgblight_config
 1004 0004 221F      		rol r18
 1005 0006 2227      		clr r18
 1006 0008 221F      		rol r18
 1007 000a 3091 0000 		lds r19,rgblight_config+1
 1008 000e 432F      		mov r20,r19
 1009 0010 440F      		lsl r20
 1010 0012 842F      		mov r24,r20
 1011 0014 822B      		or r24,r18
 1012 0016 37FB      		bst r19,7
 1013 0018 9927      		clr r25
 1014 001a 90F9      		bld r25,0
 1015 001c 8A30      		cpi r24,10
 1016 001e 9105      		cpc r25,__zero_reg__
 1017 0020 04F4      		brge .L49
 238:rgblight.c    **** 		hue = (rgblight_config.hue+360-RGBLIGHT_HUE_STEP) % 360;
 1018               		.loc 1 238 0
 1019 0022 825A      		subi r24,-94
 1020 0024 9E4F      		sbci r25,-2
 1021 0026 00C0      		rjmp .L51
 1022               	.L49:
 240:rgblight.c    **** 		hue = (rgblight_config.hue-RGBLIGHT_HUE_STEP) % 360;
 1023               		.loc 1 240 0
 1024 0028 0A97      		sbiw r24,10
 1025               	.L51:
 1026 002a 68E6      		ldi r22,lo8(104)
 1027 002c 71E0      		ldi r23,lo8(1)
 1028 002e 0E94 0000 		call __divmodhi4
 1029               	.LVL79:
 242:rgblight.c    ****   rgblight_sethsv(hue, rgblight_config.sat, rgblight_config.val);
 1030               		.loc 1 242 0
 1031 0032 4091 0000 		lds r20,rgblight_config+3
 1032 0036 6091 0000 		lds r22,rgblight_config+2
 1033 003a 0C94 0000 		jmp rgblight_sethsv
 1034               	.LVL80:
 1035               		.cfi_endproc
 1036               	.LFE21:
 1038               		.section	.text.rgblight_increase_hue,"ax",@progbits
 1039               	.global	rgblight_increase_hue
 1041               	rgblight_increase_hue:
 1042               	.LFB20:
 230:rgblight.c    **** void rgblight_increase_hue(void){
 1043               		.loc 1 230 0
 1044               		.cfi_startproc
 1045               	/* prologue: function */
 1046               	/* frame size = 0 */
 1047               	/* stack size = 0 */
 1048               	.L__stack_usage = 0
 1049               	.LVL81:
 232:rgblight.c    ****   hue = (rgblight_config.hue+RGBLIGHT_HUE_STEP) % 360;
 1050               		.loc 1 232 0
 1051 0000 2091 0000 		lds r18,rgblight_config
 1052 0004 221F      		rol r18
 1053 0006 2227      		clr r18
 1054 0008 221F      		rol r18
 1055 000a 3091 0000 		lds r19,rgblight_config+1
 1056 000e 432F      		mov r20,r19
 1057 0010 440F      		lsl r20
 1058 0012 842F      		mov r24,r20
 1059 0014 822B      		or r24,r18
 1060 0016 37FB      		bst r19,7
 1061 0018 9927      		clr r25
 1062 001a 90F9      		bld r25,0
 1063 001c 0A96      		adiw r24,10
 1064 001e 68E6      		ldi r22,lo8(104)
 1065 0020 71E0      		ldi r23,lo8(1)
 1066 0022 0E94 0000 		call __divmodhi4
 233:rgblight.c    ****   rgblight_sethsv(hue, rgblight_config.sat, rgblight_config.val);
 1067               		.loc 1 233 0
 1068 0026 4091 0000 		lds r20,rgblight_config+3
 1069 002a 6091 0000 		lds r22,rgblight_config+2
 1070 002e 0C94 0000 		jmp rgblight_sethsv
 1071               	.LVL82:
 1072               		.cfi_endproc
 1073               	.LFE20:
 1075               		.section	.text.rgblight_timer_init,"ax",@progbits
 1076               	.global	rgblight_timer_init
 1078               	rgblight_timer_init:
 1079               	.LFB30:
 335:rgblight.c    **** 	  }
 336:rgblight.c    **** 		ws2812_setleds(led, RGBLED_NUM);
 337:rgblight.c    **** 	}
 338:rgblight.c    **** }
 339:rgblight.c    **** 
 340:rgblight.c    **** // Animation timer -- AVR Timer3
 341:rgblight.c    **** void rgblight_timer_init(void) {
 1080               		.loc 1 341 0
 1081               		.cfi_startproc
 1082               	/* prologue: function */
 1083               	/* frame size = 0 */
 1084               	/* stack size = 0 */
 1085               	.L__stack_usage = 0
 342:rgblight.c    **** 	static uint8_t rgblight_timer_is_init = 0;
 343:rgblight.c    **** 	if (rgblight_timer_is_init) {
 1086               		.loc 1 343 0
 1087 0000 8091 0000 		lds r24,rgblight_timer_is_init.1996
 1088 0004 8111      		cpse r24,__zero_reg__
 1089 0006 00C0      		rjmp .L53
 344:rgblight.c    **** 		return;
 345:rgblight.c    **** 	}
 346:rgblight.c    **** 	rgblight_timer_is_init = 1;
 1090               		.loc 1 346 0
 1091 0008 81E0      		ldi r24,lo8(1)
 1092 000a 8093 0000 		sts rgblight_timer_is_init.1996,r24
 347:rgblight.c    **** 	/* Timer 3 setup */
 348:rgblight.c    **** 	TCCR3B = _BV(WGM32) //CTC mode OCR3A as TOP
 1093               		.loc 1 348 0
 1094 000e 89E0      		ldi r24,lo8(9)
 1095 0010 8093 9100 		sts 145,r24
 349:rgblight.c    **** 	      | _BV(CS30); //Clock selelct: clk/1
 350:rgblight.c    **** 	/* Set TOP value */
 351:rgblight.c    **** 	uint8_t sreg = SREG;
 1096               		.loc 1 351 0
 1097 0014 8FB7      		in r24,__SREG__
 1098               	.LVL83:
 352:rgblight.c    **** 	cli();
 1099               		.loc 1 352 0
 1100               	/* #APP */
 1101               	 ;  352 "rgblight.c" 1
 1102 0016 F894      		cli
 1103               	 ;  0 "" 2
 353:rgblight.c    **** 	OCR3AH = (RGBLED_TIMER_TOP>>8)&0xff;
 1104               		.loc 1 353 0
 1105               	/* #NOAPP */
 1106 0018 93E0      		ldi r25,lo8(3)
 1107 001a 9093 9900 		sts 153,r25
 354:rgblight.c    **** 	OCR3AL = RGBLED_TIMER_TOP&0xff;
 1108               		.loc 1 354 0
 1109 001e 90ED      		ldi r25,lo8(-48)
 1110 0020 9093 9800 		sts 152,r25
 355:rgblight.c    **** 	SREG = sreg;
 1111               		.loc 1 355 0
 1112 0024 8FBF      		out __SREG__,r24
 1113               	.LVL84:
 1114               	.L53:
 1115 0026 0895      		ret
 1116               		.cfi_endproc
 1117               	.LFE30:
 1119               		.section	.text.rgblight_timer_enable,"ax",@progbits
 1120               	.global	rgblight_timer_enable
 1122               	rgblight_timer_enable:
 1123               	.LFB31:
 356:rgblight.c    **** }
 357:rgblight.c    **** void rgblight_timer_enable(void) {
 1124               		.loc 1 357 0
 1125               		.cfi_startproc
 1126               	/* prologue: function */
 1127               	/* frame size = 0 */
 1128               	/* stack size = 0 */
 1129               	.L__stack_usage = 0
 358:rgblight.c    **** 	TIMSK3 |= _BV(OCIE3A);
 1130               		.loc 1 358 0
 1131 0000 E1E7      		ldi r30,lo8(113)
 1132 0002 F0E0      		ldi r31,0
 1133 0004 8081      		ld r24,Z
 1134 0006 8260      		ori r24,lo8(2)
 1135 0008 8083      		st Z,r24
 1136 000a 0895      		ret
 1137               		.cfi_endproc
 1138               	.LFE31:
 1140               		.section	.text.rgblight_timer_disable,"ax",@progbits
 1141               	.global	rgblight_timer_disable
 1143               	rgblight_timer_disable:
 1144               	.LFB32:
 359:rgblight.c    **** 	dprintf("TIMER3 enabled.\n");
 360:rgblight.c    **** }
 361:rgblight.c    **** void rgblight_timer_disable(void) {
 1145               		.loc 1 361 0
 1146               		.cfi_startproc
 1147               	/* prologue: function */
 1148               	/* frame size = 0 */
 1149               	/* stack size = 0 */
 1150               	.L__stack_usage = 0
 362:rgblight.c    **** 	TIMSK3 &= ~_BV(OCIE3A);
 1151               		.loc 1 362 0
 1152 0000 E1E7      		ldi r30,lo8(113)
 1153 0002 F0E0      		ldi r31,0
 1154 0004 8081      		ld r24,Z
 1155 0006 8D7F      		andi r24,lo8(-3)
 1156 0008 8083      		st Z,r24
 1157 000a 0895      		ret
 1158               		.cfi_endproc
 1159               	.LFE32:
 1161               		.section	.text.rgblight_mode,"ax",@progbits
 1162               	.global	rgblight_mode
 1164               	rgblight_mode:
 1165               	.LFB18:
 190:rgblight.c    **** void rgblight_mode(uint8_t mode) {
 1166               		.loc 1 190 0
 1167               		.cfi_startproc
 1168               	.LVL85:
 1169               	/* prologue: function */
 1170               	/* frame size = 0 */
 1171               	/* stack size = 0 */
 1172               	.L__stack_usage = 0
 191:rgblight.c    **** 	if (!rgblight_config.enable) {
 1173               		.loc 1 191 0
 1174 0000 9091 0000 		lds r25,rgblight_config
 1175 0004 90FF      		sbrs r25,0
 1176 0006 00C0      		rjmp .L57
 1177 0008 9178      		andi r25,lo8(-127)
 194:rgblight.c    ****   if (mode<1) {
 1178               		.loc 1 194 0
 1179 000a 8111      		cpse r24,__zero_reg__
 1180 000c 00C0      		rjmp .L59
 195:rgblight.c    **** 		rgblight_config.mode = 1;
 1181               		.loc 1 195 0
 1182 000e 9260      		ori r25,lo8(2)
 1183 0010 00C0      		rjmp .L64
 1184               	.L59:
 196:rgblight.c    **** 	} else if (mode > RGBLIGHT_MODES) {
 1185               		.loc 1 196 0
 1186 0012 8831      		cpi r24,lo8(24)
 1187 0014 00F0      		brlo .L61
 197:rgblight.c    **** 		rgblight_config.mode = RGBLIGHT_MODES;
 1188               		.loc 1 197 0
 1189 0016 9E62      		ori r25,lo8(46)
 1190               	.L64:
 1191 0018 9093 0000 		sts rgblight_config,r25
 1192 001c 00C0      		rjmp .L60
 1193               	.L61:
 199:rgblight.c    **** 		rgblight_config.mode = mode;
 1194               		.loc 1 199 0
 1195 001e 8F73      		andi r24,lo8(63)
 1196               	.LVL86:
 1197 0020 880F      		lsl r24
 1198 0022 892B      		or r24,r25
 1199 0024 8093 0000 		sts rgblight_config,r24
 1200               	.L60:
 201:rgblight.c    ****   eeconfig_write_rgblight(rgblight_config.raw);
 1201               		.loc 1 201 0
 1202 0028 6091 0000 		lds r22,rgblight_config
 1203 002c 7091 0000 		lds r23,rgblight_config+1
 1204 0030 8091 0000 		lds r24,rgblight_config+2
 1205 0034 9091 0000 		lds r25,rgblight_config+3
 1206 0038 0E94 0000 		call eeconfig_write_rgblight
 1207               	.LVL87:
 203:rgblight.c    **** 	if (rgblight_config.mode == 1) {
 1208               		.loc 1 203 0
 1209 003c 8091 0000 		lds r24,rgblight_config
 1210 0040 982F      		mov r25,r24
 1211 0042 9E77      		andi r25,lo8(126)
 1212 0044 9230      		cpi r25,lo8(2)
 1213 0046 01F4      		brne .L62
 204:rgblight.c    **** 		rgblight_timer_disable();
 1214               		.loc 1 204 0
 1215 0048 0E94 0000 		call rgblight_timer_disable
 1216               	.LVL88:
 1217 004c 00C0      		rjmp .L63
 1218               	.L62:
 205:rgblight.c    **** 	} else if (rgblight_config.mode >=2 && rgblight_config.mode <=23) {
 1219               		.loc 1 205 0
 1220 004e 8695      		lsr r24
 1221 0050 825C      		subi r24,lo8(-(62))
 1222 0052 8F73      		andi r24,lo8(63)
 1223 0054 8631      		cpi r24,lo8(22)
 1224 0056 00F4      		brsh .L63
 211:rgblight.c    **** 		rgblight_timer_enable();
 1225               		.loc 1 211 0
 1226 0058 0E94 0000 		call rgblight_timer_enable
 1227               	.LVL89:
 1228               	.L63:
 213:rgblight.c    ****   rgblight_sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val);
 1229               		.loc 1 213 0
 1230 005c 8091 0000 		lds r24,rgblight_config
 1231 0060 881F      		rol r24
 1232 0062 8827      		clr r24
 1233 0064 881F      		rol r24
 1234 0066 9091 0000 		lds r25,rgblight_config+1
 1235 006a 292F      		mov r18,r25
 1236 006c 220F      		lsl r18
 1237 006e 97FB      		bst r25,7
 1238 0070 9927      		clr r25
 1239 0072 90F9      		bld r25,0
 1240 0074 4091 0000 		lds r20,rgblight_config+3
 1241 0078 6091 0000 		lds r22,rgblight_config+2
 1242 007c 822B      		or r24,r18
 1243 007e 0C94 0000 		jmp rgblight_sethsv
 1244               	.LVL90:
 1245               	.L57:
 1246 0082 0895      		ret
 1247               		.cfi_endproc
 1248               	.LFE18:
 1250               		.section	.text.rgblight_step,"ax",@progbits
 1251               	.global	rgblight_step
 1253               	rgblight_step:
 1254               	.LFB17:
 181:rgblight.c    **** void rgblight_step(void) {
 1255               		.loc 1 181 0
 1256               		.cfi_startproc
 1257               	/* prologue: function */
 1258               	/* frame size = 0 */
 1259               	/* stack size = 0 */
 1260               	.L__stack_usage = 0
 183:rgblight.c    ****   mode = rgblight_config.mode + 1;
 1261               		.loc 1 183 0
 1262 0000 8091 0000 		lds r24,rgblight_config
 1263 0004 8695      		lsr r24
 1264 0006 8F73      		andi r24,lo8(63)
 1265 0008 8F5F      		subi r24,lo8(-(1))
 1266               	.LVL91:
 184:rgblight.c    ****   if (mode > RGBLIGHT_MODES) {
 1267               		.loc 1 184 0
 1268 000a 8831      		cpi r24,lo8(24)
 1269 000c 00F0      		brlo .L66
 185:rgblight.c    ****     mode = 1;
 1270               		.loc 1 185 0
 1271 000e 81E0      		ldi r24,lo8(1)
 1272               	.LVL92:
 1273               	.L66:
 187:rgblight.c    **** 	rgblight_mode(mode);
 1274               		.loc 1 187 0
 1275 0010 0C94 0000 		jmp rgblight_mode
 1276               	.LVL93:
 1277               		.cfi_endproc
 1278               	.LFE17:
 1280               		.section	.text.rgblight_pre,"ax",@progbits
 1281               	.global	rgblight_pre
 1283               	rgblight_pre:
 1284               	.LFB16:
 172:rgblight.c    **** void rgblight_pre(void) {
 1285               		.loc 1 172 0
 1286               		.cfi_startproc
 1287               	/* prologue: function */
 1288               	/* frame size = 0 */
 1289               	/* stack size = 0 */
 1290               	.L__stack_usage = 0
 1291               	.LVL94:
 174:rgblight.c    ****   mode = rgblight_config.mode - 1;
 1292               		.loc 1 174 0
 1293 0000 8091 0000 		lds r24,rgblight_config
 1294 0004 8695      		lsr r24
 1295 0006 8F73      		andi r24,lo8(63)
 178:rgblight.c    **** 	rgblight_mode(mode);
 1296               		.loc 1 178 0
 1297 0008 8150      		subi r24,lo8(-(-1))
 1298 000a 0C94 0000 		jmp rgblight_mode
 1299               	.LVL95:
 1300               		.cfi_endproc
 1301               	.LFE16:
 1303               		.section	.text.rgblight_decrease,"ax",@progbits
 1304               	.global	rgblight_decrease
 1306               	rgblight_decrease:
 1307               	.LFB15:
 164:rgblight.c    **** void rgblight_decrease(void) {
 1308               		.loc 1 164 0
 1309               		.cfi_startproc
 1310               	/* prologue: function */
 1311               	/* frame size = 0 */
 1312               	/* stack size = 0 */
 1313               	.L__stack_usage = 0
 166:rgblight.c    ****   if (rgblight_config.mode > 1) { //mode will never < 1, if mode is less than 1, eeprom need to be 
 1314               		.loc 1 166 0
 1315 0000 9091 0000 		lds r25,rgblight_config
 1316 0004 9695      		lsr r25
 1317 0006 9F73      		andi r25,lo8(63)
 1318 0008 292F      		mov r18,r25
 1319 000a 30E0      		ldi r19,0
 1320 000c 2230      		cpi r18,2
 1321 000e 3105      		cpc r19,__zero_reg__
 1322 0010 04F0      		brlt .L70
 167:rgblight.c    ****     mode = rgblight_config.mode-1;
 1323               		.loc 1 167 0
 1324 0012 892F      		mov r24,r25
 1325 0014 8150      		subi r24,lo8(-(-1))
 1326               	.LVL96:
 1327               	.L70:
 169:rgblight.c    **** 	rgblight_mode(mode);
 1328               		.loc 1 169 0
 1329 0016 0C94 0000 		jmp rgblight_mode
 1330               	.LVL97:
 1331               		.cfi_endproc
 1332               	.LFE15:
 1334               		.section	.text.rgblight_increase,"ax",@progbits
 1335               	.global	rgblight_increase
 1337               	rgblight_increase:
 1338               	.LFB14:
 156:rgblight.c    **** void rgblight_increase(void) {
 1339               		.loc 1 156 0
 1340               		.cfi_startproc
 1341               	/* prologue: function */
 1342               	/* frame size = 0 */
 1343               	/* stack size = 0 */
 1344               	.L__stack_usage = 0
 158:rgblight.c    ****   if (rgblight_config.mode < RGBLIGHT_MODES) {
 1345               		.loc 1 158 0
 1346 0000 9091 0000 		lds r25,rgblight_config
 1347 0004 9695      		lsr r25
 1348 0006 9F73      		andi r25,lo8(63)
 1349 0008 292F      		mov r18,r25
 1350 000a 30E0      		ldi r19,0
 1351 000c 2731      		cpi r18,23
 1352 000e 3105      		cpc r19,__zero_reg__
 1353 0010 04F4      		brge .L72
 159:rgblight.c    ****     mode = rgblight_config.mode + 1;
 1354               		.loc 1 159 0
 1355 0012 892F      		mov r24,r25
 1356 0014 8F5F      		subi r24,lo8(-(1))
 1357               	.LVL98:
 1358               	.L72:
 161:rgblight.c    **** 	rgblight_mode(mode);
 1359               		.loc 1 161 0
 1360 0016 0C94 0000 		jmp rgblight_mode
 1361               	.LVL99:
 1362               		.cfi_endproc
 1363               	.LFE14:
 1365               		.section	.text.rgblight_init,"ax",@progbits
 1366               	.global	rgblight_init
 1368               	rgblight_init:
 1369               	.LFB13:
 131:rgblight.c    **** void rgblight_init(void) {
 1370               		.loc 1 131 0
 1371               		.cfi_startproc
 1372               	/* prologue: function */
 1373               	/* frame size = 0 */
 1374               	/* stack size = 0 */
 1375               	.L__stack_usage = 0
 132:rgblight.c    ****   debug_enable = 1; // Debug ON!
 1376               		.loc 1 132 0
 1377 0000 8091 0000 		lds r24,debug_config
 1378 0004 8160      		ori r24,lo8(1<<0)
 1379 0006 8093 0000 		sts debug_config,r24
 134:rgblight.c    ****   rgblight_inited = 1;
 1380               		.loc 1 134 0
 1381 000a 81E0      		ldi r24,lo8(1)
 1382 000c 8093 0000 		sts rgblight_inited,r24
 136:rgblight.c    ****   if (!eeconfig_is_enabled()) {
 1383               		.loc 1 136 0
 1384 0010 0E94 0000 		call eeconfig_is_enabled
 1385               	.LVL100:
 1386 0014 8111      		cpse r24,__zero_reg__
 1387 0016 00C0      		rjmp .L74
 138:rgblight.c    ****     eeconfig_init();
 1388               		.loc 1 138 0
 1389 0018 0E94 0000 		call eeconfig_init
 1390               	.LVL101:
 139:rgblight.c    **** 		eeconfig_write_rgblight_default();
 1391               		.loc 1 139 0
 1392 001c 0E94 0000 		call eeconfig_write_rgblight_default
 1393               	.LVL102:
 1394               	.L74:
 141:rgblight.c    ****   rgblight_config.raw = eeconfig_read_rgblight();
 1395               		.loc 1 141 0
 1396 0020 0E94 0000 		call eeconfig_read_rgblight
 1397               	.LVL103:
 1398 0024 6093 0000 		sts rgblight_config,r22
 1399 0028 7093 0000 		sts rgblight_config+1,r23
 1400 002c 8093 0000 		sts rgblight_config+2,r24
 1401 0030 9093 0000 		sts rgblight_config+3,r25
 142:rgblight.c    **** 	if (!rgblight_config.mode) {
 1402               		.loc 1 142 0
 1403 0034 6E77      		andi r22,lo8(126)
 1404 0036 01F4      		brne .L75
 144:rgblight.c    **** 		eeconfig_write_rgblight_default();
 1405               		.loc 1 144 0
 1406 0038 0E94 0000 		call eeconfig_write_rgblight_default
 1407               	.LVL104:
 145:rgblight.c    **** 		rgblight_config.raw = eeconfig_read_rgblight();
 1408               		.loc 1 145 0
 1409 003c 0E94 0000 		call eeconfig_read_rgblight
 1410               	.LVL105:
 1411 0040 6093 0000 		sts rgblight_config,r22
 1412 0044 7093 0000 		sts rgblight_config+1,r23
 1413 0048 8093 0000 		sts rgblight_config+2,r24
 1414 004c 9093 0000 		sts rgblight_config+3,r25
 1415               	.L75:
 149:rgblight.c    **** 	rgblight_timer_init(); // setup the timer
 1416               		.loc 1 149 0
 1417 0050 0E94 0000 		call rgblight_timer_init
 1418               	.LVL106:
 151:rgblight.c    ****   if (rgblight_config.enable) {
 1419               		.loc 1 151 0
 1420 0054 8091 0000 		lds r24,rgblight_config
 1421 0058 80FF      		sbrs r24,0
 1422 005a 00C0      		rjmp .L73
 152:rgblight.c    ****     rgblight_mode(rgblight_config.mode);
 1423               		.loc 1 152 0
 1424 005c 8695      		lsr r24
 1425 005e 8F73      		andi r24,lo8(63)
 1426 0060 0C94 0000 		jmp rgblight_mode
 1427               	.LVL107:
 1428               	.L73:
 1429 0064 0895      		ret
 1430               		.cfi_endproc
 1431               	.LFE13:
 1433               		.section	.text.rgblight_toggle,"ax",@progbits
 1434               	.global	rgblight_toggle
 1436               	rgblight_toggle:
 1437               	.LFB19:
 216:rgblight.c    **** void rgblight_toggle(void) {
 1438               		.loc 1 216 0
 1439               		.cfi_startproc
 1440               	/* prologue: function */
 1441               	/* frame size = 0 */
 1442               	/* stack size = 0 */
 1443               	.L__stack_usage = 0
 217:rgblight.c    ****   rgblight_config.enable ^= 1;
 1444               		.loc 1 217 0
 1445 0000 8091 0000 		lds r24,rgblight_config
 1446 0004 982F      		mov r25,r24
 1447 0006 9095      		com r25
 1448 0008 90FB      		bst r25,0
 1449 000a 80F9      		bld r24,0
 1450 000c 8093 0000 		sts rgblight_config,r24
 218:rgblight.c    ****   eeconfig_write_rgblight(rgblight_config.raw);
 1451               		.loc 1 218 0
 1452 0010 6091 0000 		lds r22,rgblight_config
 1453 0014 7091 0000 		lds r23,rgblight_config+1
 1454 0018 8091 0000 		lds r24,rgblight_config+2
 1455 001c 9091 0000 		lds r25,rgblight_config+3
 1456 0020 0E94 0000 		call eeconfig_write_rgblight
 1457               	.LVL108:
 220:rgblight.c    **** 	if (rgblight_config.enable) {
 1458               		.loc 1 220 0
 1459 0024 8091 0000 		lds r24,rgblight_config
 1460 0028 80FF      		sbrs r24,0
 1461 002a 00C0      		rjmp .L78
 221:rgblight.c    **** 		rgblight_mode(rgblight_config.mode);
 1462               		.loc 1 221 0
 1463 002c 8695      		lsr r24
 1464 002e 8F73      		andi r24,lo8(63)
 1465 0030 0C94 0000 		jmp rgblight_mode
 1466               	.LVL109:
 1467               	.L78:
 223:rgblight.c    **** 		rgblight_timer_disable();
 1468               		.loc 1 223 0
 1469 0034 0E94 0000 		call rgblight_timer_disable
 1470               	.LVL110:
 1471               	.LBB9:
 1472               	.LBB10:
 1473               		.file 2 "d:\\applications\\keyboard\\avr-gcc-4.7.2-mingw32\\bin\\../lib/gcc/avr/4.7.2/../../../../
   1:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    All rights reserved.
   5:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
   6:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
   9:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  12:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****      the documentation and/or other materials provided with the
  15:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****      distribution.
  16:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  17:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****      contributors may be used to endorse or promote products derived
  19:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****      from this software without specific prior written permission.
  20:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  21:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  33:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  35:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  38:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #define __HAS_DELAY_CYCLES 1
  40:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #endif
  41:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  42:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #include <inttypes.h>
  43:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #include <util/delay_basic.h>
  44:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #include <math.h>
  45:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  46:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** /** \file */
  47:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     \code
  49:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     //#define F_CPU 14.7456E6
  51:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     #include <util/delay.h>
  52:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     \endcode
  53:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  54:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     \note As an alternative method, it is possible to pass the
  55:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     used.
  58:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  59:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     The functions in this header file are wrappers around the basic
  60:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     convenience functions where actual time values can be specified
  62:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     that compile-time constant expressions will be eliminated by
  64:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     compiler optimization so floating-point expressions can be used
  65:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     frequency passed by the macro F_CPU.
  67:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  68:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     \note In order for these functions to work as intended, compiler
  69:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     <em>must</em> be an expression that is a known constant at
  71:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     delay will be much longer (and basically unpredictable), and
  73:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     applications that otherwise do not use floating-point calculations
  74:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     will experience severe code bloat by the floating-point library
  75:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     routines linked into the application.
  76:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  77:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     The functions available allow the specification of microsecond, and
  78:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     millisecond delays directly, using the application-supplied macro
  79:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  81:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** */
  82:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  83:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #if !defined(__DOXYGEN__)
  84:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #endif
  87:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  88:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #ifndef F_CPU
  89:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** /* prevent compiler error by supplying a default */
  90:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** # define F_CPU 1000000UL
  92:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #endif
  93:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  94:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #ifndef __OPTIMIZE__
  95:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #endif
  97:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  98:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   __STDC_HOSTED__
 101:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #  include <math.h>
 102:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #endif
 103:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 104:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** /**
 105:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    \ingroup util_delay
 106:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 107:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 109:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    The macro F_CPU is supposed to be defined to a
 110:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 112:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 114:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    When the user request delay which exceed the maximum possible one,
 115:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    user will not be informed about decreased resolution.
 119:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 120:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    values greater than the maximal possible delay, overflows results in
 123:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    no delay i.e., 0ms.
 124:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 125:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    the user gets atleast __us microseconds of delay.
 128:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 129:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    to round down and round to closest integer.
 131:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 132:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Also, the backward compatible
 136:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    required for rounding are not available to the compiler then.
 139:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 140:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****  */
 141:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** void
 142:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** _delay_ms(double __ms)
 143:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** {
 144:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	uint16_t __ticks;
 145:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	double __tmp ; 
 146:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   __STDC_HOSTED__
 149:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	uint32_t __ticks_dc;
 150:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 153:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 156:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 159:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	#else
 160:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 		//round up by default
 161:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	#endif
 163:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 164:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1474               		.loc 2 164 0
 1475 0038 2FEF      		ldi r18,lo8(159999)
 1476 003a 80E7      		ldi r24,hi8(159999)
 1477 003c 92E0      		ldi r25,hlo8(159999)
 1478 003e 2150      		1: subi r18,1
 1479 0040 8040      		sbci r24,0
 1480 0042 9040      		sbci r25,0
 1481 0044 01F4      		brne 1b
 1482 0046 00C0      		rjmp .
 1483 0048 0000      		nop
 1484               	.LBE10:
 1485               	.LBE9:
 225:rgblight.c    **** 		rgblight_set();
 1486               		.loc 1 225 0
 1487 004a 0C94 0000 		jmp rgblight_set
 1488               	.LVL111:
 1489               		.cfi_endproc
 1490               	.LFE19:
 1492               		.section	.text.rgblight_timer_toggle,"ax",@progbits
 1493               	.global	rgblight_timer_toggle
 1495               	rgblight_timer_toggle:
 1496               	.LFB33:
 363:rgblight.c    **** 	dprintf("TIMER3 disabled.\n");
 364:rgblight.c    **** }
 365:rgblight.c    **** void rgblight_timer_toggle(void) {
 1497               		.loc 1 365 0
 1498               		.cfi_startproc
 1499               	/* prologue: function */
 1500               	/* frame size = 0 */
 1501               	/* stack size = 0 */
 1502               	.L__stack_usage = 0
 366:rgblight.c    **** 	TIMSK3 ^= _BV(OCIE3A);
 1503               		.loc 1 366 0
 1504 0000 E1E7      		ldi r30,lo8(113)
 1505 0002 F0E0      		ldi r31,0
 1506 0004 8081      		ld r24,Z
 1507 0006 92E0      		ldi r25,lo8(2)
 1508 0008 8927      		eor r24,r25
 1509 000a 8083      		st Z,r24
 1510 000c 0895      		ret
 1511               		.cfi_endproc
 1512               	.LFE33:
 1514               		.section	.text.rgblight_effect_breathing,"ax",@progbits
 1515               	.global	rgblight_effect_breathing
 1517               	rgblight_effect_breathing:
 1518               	.LFB35:
 367:rgblight.c    **** 	dprintf("TIMER3 toggled.\n");
 368:rgblight.c    **** }
 369:rgblight.c    **** 
 370:rgblight.c    **** ISR(TIMER3_COMPA_vect) {
 371:rgblight.c    **** 	// Mode = 1, static light, do nothing here
 372:rgblight.c    **** 	if (rgblight_config.mode>=2 && rgblight_config.mode<=5) {
 373:rgblight.c    **** 		// mode = 2 to 5, breathing mode
 374:rgblight.c    **** 		rgblight_effect_breathing(rgblight_config.mode-2);
 375:rgblight.c    **** 
 376:rgblight.c    **** 	} else if (rgblight_config.mode>=6 && rgblight_config.mode<=8) {
 377:rgblight.c    **** 		rgblight_effect_rainbow_mood(rgblight_config.mode-6);
 378:rgblight.c    **** 	} else if (rgblight_config.mode>=9 && rgblight_config.mode<=14) {
 379:rgblight.c    **** 		rgblight_effect_rainbow_swirl(rgblight_config.mode-9);
 380:rgblight.c    **** 	} else if (rgblight_config.mode>=15 && rgblight_config.mode<=20) {
 381:rgblight.c    **** 		rgblight_effect_snake(rgblight_config.mode-15);
 382:rgblight.c    **** 	} else if (rgblight_config.mode>=21 && rgblight_config.mode<=23) {
 383:rgblight.c    **** 		rgblight_effect_knight(rgblight_config.mode-21);
 384:rgblight.c    **** 	}
 385:rgblight.c    **** }
 386:rgblight.c    **** 
 387:rgblight.c    **** // effects
 388:rgblight.c    **** void rgblight_effect_breathing(uint8_t interval) {
 1519               		.loc 1 388 0
 1520               		.cfi_startproc
 1521               	.LVL112:
 1522 0000 CF93      		push r28
 1523               	.LCFI27:
 1524               		.cfi_def_cfa_offset 3
 1525               		.cfi_offset 28, -2
 1526               	/* prologue: function */
 1527               	/* frame size = 0 */
 1528               	/* stack size = 1 */
 1529               	.L__stack_usage = 1
 1530 0002 C82F      		mov r28,r24
 389:rgblight.c    **** 	static uint8_t pos = 0;
 390:rgblight.c    **** 	static uint16_t last_timer = 0;
 391:rgblight.c    **** 
 392:rgblight.c    **** 	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_BREATHING_INTERVALS[interval])) return;
 1531               		.loc 1 392 0
 1532 0004 8091 0000 		lds r24,last_timer.2016
 1533 0008 9091 0000 		lds r25,last_timer.2016+1
 1534               	.LVL113:
 1535 000c 0E94 0000 		call timer_elapsed
 1536               	.LVL114:
 1537               	.LBB11:
 1538 0010 EC2F      		mov r30,r28
 1539 0012 F0E0      		ldi r31,0
 1540 0014 E050      		subi r30,lo8(-(RGBLED_BREATHING_INTERVALS))
 1541 0016 F040      		sbci r31,hi8(-(RGBLED_BREATHING_INTERVALS))
 1542               	/* #APP */
 1543               	 ;  392 "rgblight.c" 1
 1544 0018 E491      		lpm r30, Z
 1545               		
 1546               	 ;  0 "" 2
 1547               	.LVL115:
 1548               	/* #NOAPP */
 1549               	.LBE11:
 1550 001a F0E0      		ldi r31,0
 1551 001c 8E17      		cp r24,r30
 1552 001e 9F07      		cpc r25,r31
 1553 0020 00F0      		brlo .L80
 393:rgblight.c    **** 	last_timer = timer_read();
 1554               		.loc 1 393 0
 1555 0022 0E94 0000 		call timer_read
 1556               	.LVL116:
 1557 0026 9093 0000 		sts last_timer.2016+1,r25
 1558 002a 8093 0000 		sts last_timer.2016,r24
 1559               	.LVL117:
 1560               	.LBB12:
 394:rgblight.c    **** 
 395:rgblight.c    **** 	rgblight_sethsv_noeeprom(rgblight_config.hue, rgblight_config.sat, pgm_read_byte(&RGBLED_BREATHING
 1561               		.loc 1 395 0
 1562 002e E091 0000 		lds r30,pos.2015
 1563 0032 F0E0      		ldi r31,0
 1564 0034 E050      		subi r30,lo8(-(RGBLED_BREATHING_TABLE))
 1565 0036 F040      		sbci r31,hi8(-(RGBLED_BREATHING_TABLE))
 1566               	/* #APP */
 1567               	 ;  395 "rgblight.c" 1
 1568 0038 4491      		lpm r20, Z
 1569               		
 1570               	 ;  0 "" 2
 1571               	.LVL118:
 1572               	/* #NOAPP */
 1573               	.LBE12:
 1574 003a 8091 0000 		lds r24,rgblight_config
 1575 003e 881F      		rol r24
 1576 0040 8827      		clr r24
 1577 0042 881F      		rol r24
 1578 0044 9091 0000 		lds r25,rgblight_config+1
 1579 0048 292F      		mov r18,r25
 1580 004a 220F      		lsl r18
 1581 004c 97FB      		bst r25,7
 1582 004e 9927      		clr r25
 1583 0050 90F9      		bld r25,0
 1584 0052 6091 0000 		lds r22,rgblight_config+2
 1585 0056 822B      		or r24,r18
 1586 0058 0E94 0000 		call rgblight_sethsv_noeeprom
 1587               	.LVL119:
 396:rgblight.c    **** 	pos = (pos+1) % 256;
 1588               		.loc 1 396 0
 1589 005c 8091 0000 		lds r24,pos.2015
 1590 0060 8F5F      		subi r24,lo8(-(1))
 1591 0062 8093 0000 		sts pos.2015,r24
 1592               	.L80:
 1593               	/* epilogue start */
 397:rgblight.c    **** }
 1594               		.loc 1 397 0
 1595 0066 CF91      		pop r28
 1596               	.LVL120:
 1597 0068 0895      		ret
 1598               		.cfi_endproc
 1599               	.LFE35:
 1601               		.section	.text.rgblight_effect_rainbow_mood,"ax",@progbits
 1602               	.global	rgblight_effect_rainbow_mood
 1604               	rgblight_effect_rainbow_mood:
 1605               	.LFB36:
 398:rgblight.c    **** 
 399:rgblight.c    **** void rgblight_effect_rainbow_mood(uint8_t interval) {
 1606               		.loc 1 399 0
 1607               		.cfi_startproc
 1608               	.LVL121:
 1609 0000 CF93      		push r28
 1610               	.LCFI28:
 1611               		.cfi_def_cfa_offset 3
 1612               		.cfi_offset 28, -2
 1613               	/* prologue: function */
 1614               	/* frame size = 0 */
 1615               	/* stack size = 1 */
 1616               	.L__stack_usage = 1
 1617 0002 C82F      		mov r28,r24
 400:rgblight.c    **** 	static uint16_t current_hue=0;
 401:rgblight.c    **** 	static uint16_t last_timer = 0;
 402:rgblight.c    **** 
 403:rgblight.c    **** 	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_RAINBOW_MOOD_INTERVALS[interval])) return;
 1618               		.loc 1 403 0
 1619 0004 8091 0000 		lds r24,last_timer.2027
 1620 0008 9091 0000 		lds r25,last_timer.2027+1
 1621               	.LVL122:
 1622 000c 0E94 0000 		call timer_elapsed
 1623               	.LVL123:
 1624               	.LBB13:
 1625 0010 EC2F      		mov r30,r28
 1626 0012 F0E0      		ldi r31,0
 1627 0014 E050      		subi r30,lo8(-(RGBLED_RAINBOW_MOOD_INTERVALS))
 1628 0016 F040      		sbci r31,hi8(-(RGBLED_RAINBOW_MOOD_INTERVALS))
 1629               	/* #APP */
 1630               	 ;  403 "rgblight.c" 1
 1631 0018 E491      		lpm r30, Z
 1632               		
 1633               	 ;  0 "" 2
 1634               	.LVL124:
 1635               	/* #NOAPP */
 1636               	.LBE13:
 1637 001a F0E0      		ldi r31,0
 1638 001c 8E17      		cp r24,r30
 1639 001e 9F07      		cpc r25,r31
 1640 0020 00F0      		brlo .L82
 404:rgblight.c    **** 	last_timer = timer_read();
 1641               		.loc 1 404 0
 1642 0022 0E94 0000 		call timer_read
 1643               	.LVL125:
 1644 0026 9093 0000 		sts last_timer.2027+1,r25
 1645 002a 8093 0000 		sts last_timer.2027,r24
 405:rgblight.c    **** 	rgblight_sethsv_noeeprom(current_hue, rgblight_config.sat, rgblight_config.val);
 1646               		.loc 1 405 0
 1647 002e 4091 0000 		lds r20,rgblight_config+3
 1648 0032 6091 0000 		lds r22,rgblight_config+2
 1649 0036 8091 0000 		lds r24,current_hue.2026
 1650 003a 9091 0000 		lds r25,current_hue.2026+1
 1651 003e 0E94 0000 		call rgblight_sethsv_noeeprom
 1652               	.LVL126:
 406:rgblight.c    **** 	current_hue = (current_hue+1) % 360;
 1653               		.loc 1 406 0
 1654 0042 8091 0000 		lds r24,current_hue.2026
 1655 0046 9091 0000 		lds r25,current_hue.2026+1
 1656 004a 0196      		adiw r24,1
 1657 004c 68E6      		ldi r22,lo8(104)
 1658 004e 71E0      		ldi r23,lo8(1)
 1659 0050 0E94 0000 		call __udivmodhi4
 1660 0054 9093 0000 		sts current_hue.2026+1,r25
 1661 0058 8093 0000 		sts current_hue.2026,r24
 1662               	.L82:
 1663               	/* epilogue start */
 407:rgblight.c    **** }
 1664               		.loc 1 407 0
 1665 005c CF91      		pop r28
 1666               	.LVL127:
 1667 005e 0895      		ret
 1668               		.cfi_endproc
 1669               	.LFE36:
 1671               		.section	.text.rgblight_effect_rainbow_swirl,"ax",@progbits
 1672               	.global	rgblight_effect_rainbow_swirl
 1674               	rgblight_effect_rainbow_swirl:
 1675               	.LFB37:
 408:rgblight.c    **** 
 409:rgblight.c    **** void rgblight_effect_rainbow_swirl(uint8_t interval) {
 1676               		.loc 1 409 0
 1677               		.cfi_startproc
 1678               	.LVL128:
 1679 0000 DF92      		push r13
 1680               	.LCFI29:
 1681               		.cfi_def_cfa_offset 3
 1682               		.cfi_offset 13, -2
 1683 0002 EF92      		push r14
 1684               	.LCFI30:
 1685               		.cfi_def_cfa_offset 4
 1686               		.cfi_offset 14, -3
 1687 0004 FF92      		push r15
 1688               	.LCFI31:
 1689               		.cfi_def_cfa_offset 5
 1690               		.cfi_offset 15, -4
 1691 0006 0F93      		push r16
 1692               	.LCFI32:
 1693               		.cfi_def_cfa_offset 6
 1694               		.cfi_offset 16, -5
 1695 0008 1F93      		push r17
 1696               	.LCFI33:
 1697               		.cfi_def_cfa_offset 7
 1698               		.cfi_offset 17, -6
 1699 000a CF93      		push r28
 1700               	.LCFI34:
 1701               		.cfi_def_cfa_offset 8
 1702               		.cfi_offset 28, -7
 1703 000c DF93      		push r29
 1704               	.LCFI35:
 1705               		.cfi_def_cfa_offset 9
 1706               		.cfi_offset 29, -8
 1707               	/* prologue: function */
 1708               	/* frame size = 0 */
 1709               	/* stack size = 7 */
 1710               	.L__stack_usage = 7
 1711 000e D82E      		mov r13,r24
 410:rgblight.c    **** 	static uint16_t current_hue=0;
 411:rgblight.c    **** 	static uint16_t last_timer = 0;
 412:rgblight.c    **** 	uint16_t hue;
 413:rgblight.c    **** 	uint8_t i;
 414:rgblight.c    **** 	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_RAINBOW_MOOD_INTERVALS[interval/2])) return;
 1712               		.loc 1 414 0
 1713 0010 8091 0000 		lds r24,last_timer.2035
 1714 0014 9091 0000 		lds r25,last_timer.2035+1
 1715               	.LVL129:
 1716 0018 0E94 0000 		call timer_elapsed
 1717               	.LVL130:
 1718               	.LBB14:
 1719 001c ED2D      		mov r30,r13
 1720 001e E695      		lsr r30
 1721 0020 F0E0      		ldi r31,0
 1722 0022 E050      		subi r30,lo8(-(RGBLED_RAINBOW_MOOD_INTERVALS))
 1723 0024 F040      		sbci r31,hi8(-(RGBLED_RAINBOW_MOOD_INTERVALS))
 1724               	/* #APP */
 1725               	 ;  414 "rgblight.c" 1
 1726 0026 E491      		lpm r30, Z
 1727               		
 1728               	 ;  0 "" 2
 1729               	.LVL131:
 1730               	/* #NOAPP */
 1731               	.LBE14:
 1732 0028 F0E0      		ldi r31,0
 1733 002a 8E17      		cp r24,r30
 1734 002c 9F07      		cpc r25,r31
 1735 002e 00F4      		brsh .+2
 1736 0030 00C0      		rjmp .L84
 415:rgblight.c    **** 	last_timer = timer_read();
 1737               		.loc 1 415 0
 1738 0032 0E94 0000 		call timer_read
 1739               	.LVL132:
 1740 0036 9093 0000 		sts last_timer.2035+1,r25
 1741 003a 8093 0000 		sts last_timer.2035,r24
 1742               	.LVL133:
 1743 003e 00E0      		ldi r16,0
 1744 0040 10E0      		ldi r17,0
 1745 0042 C0E0      		ldi r28,0
 1746 0044 D0E0      		ldi r29,0
 416:rgblight.c    **** 	for (i=0; i<RGBLED_NUM; i++) {
 417:rgblight.c    **** 		hue = (360/RGBLED_NUM*i+current_hue)%360;
 1747               		.loc 1 417 0
 1748 0046 28E6      		ldi r18,lo8(104)
 1749 0048 E22E      		mov r14,r18
 1750 004a FF24      		clr r15
 1751 004c F394      		inc r15
 1752               	.LVL134:
 1753               	.L86:
 418:rgblight.c    **** 		sethsv(hue, rgblight_config.sat, rgblight_config.val, &led[i]);
 1754               		.loc 1 418 0 discriminator 2
 1755 004e 9E01      		movw r18,r28
 1756 0050 220F      		lsl r18
 1757 0052 331F      		rol r19
 1758 0054 2C0F      		add r18,r28
 1759 0056 3D1F      		adc r19,r29
 1760 0058 2050      		subi r18,lo8(-(led))
 1761 005a 3040      		sbci r19,hi8(-(led))
 417:rgblight.c    **** 		hue = (360/RGBLED_NUM*i+current_hue)%360;
 1762               		.loc 1 417 0 discriminator 2
 1763 005c 8091 0000 		lds r24,current_hue.2034
 1764 0060 9091 0000 		lds r25,current_hue.2034+1
 1765 0064 800F      		add r24,r16
 1766 0066 911F      		adc r25,r17
 1767 0068 B701      		movw r22,r14
 1768 006a 0E94 0000 		call __udivmodhi4
 1769               		.loc 1 418 0 discriminator 2
 1770 006e 4091 0000 		lds r20,rgblight_config+3
 1771 0072 6091 0000 		lds r22,rgblight_config+2
 1772 0076 0E94 0000 		call sethsv
 1773               	.LVL135:
 1774 007a 2196      		adiw r28,1
 1775 007c 035D      		subi r16,-45
 1776 007e 1F4F      		sbci r17,-1
 416:rgblight.c    **** 	for (i=0; i<RGBLED_NUM; i++) {
 1777               		.loc 1 416 0 discriminator 2
 1778 0080 C830      		cpi r28,8
 1779 0082 D105      		cpc r29,__zero_reg__
 1780 0084 01F4      		brne .L86
 419:rgblight.c    **** 	}
 420:rgblight.c    **** 	rgblight_set();
 1781               		.loc 1 420 0
 1782 0086 0E94 0000 		call rgblight_set
 1783               	.LVL136:
 1784 008a 2091 0000 		lds r18,current_hue.2034
 1785 008e 3091 0000 		lds r19,current_hue.2034+1
 421:rgblight.c    **** 
 422:rgblight.c    **** 	if (interval % 2) {
 1786               		.loc 1 422 0
 1787 0092 D0FE      		sbrs r13,0
 1788 0094 00C0      		rjmp .L87
 423:rgblight.c    **** 		current_hue = (current_hue+1) % 360;
 1789               		.loc 1 423 0
 1790 0096 C901      		movw r24,r18
 1791 0098 0196      		adiw r24,1
 1792 009a 68E6      		ldi r22,lo8(104)
 1793 009c 71E0      		ldi r23,lo8(1)
 1794 009e 0E94 0000 		call __udivmodhi4
 1795 00a2 9093 0000 		sts current_hue.2034+1,r25
 1796 00a6 8093 0000 		sts current_hue.2034,r24
 1797 00aa 00C0      		rjmp .L84
 1798               	.L87:
 424:rgblight.c    **** 	} else {
 425:rgblight.c    **** 		if (current_hue -1 < 0) {
 426:rgblight.c    **** 			current_hue = 359;
 427:rgblight.c    **** 		} else {
 428:rgblight.c    **** 			current_hue = current_hue - 1;
 1799               		.loc 1 428 0
 1800 00ac 2150      		subi r18,1
 1801 00ae 3109      		sbc r19,__zero_reg__
 1802 00b0 3093 0000 		sts current_hue.2034+1,r19
 1803 00b4 2093 0000 		sts current_hue.2034,r18
 1804               	.L84:
 1805               	/* epilogue start */
 429:rgblight.c    **** 		}
 430:rgblight.c    **** 
 431:rgblight.c    **** 	}
 432:rgblight.c    **** }
 1806               		.loc 1 432 0
 1807 00b8 DF91      		pop r29
 1808 00ba CF91      		pop r28
 1809 00bc 1F91      		pop r17
 1810 00be 0F91      		pop r16
 1811 00c0 FF90      		pop r15
 1812 00c2 EF90      		pop r14
 1813 00c4 DF90      		pop r13
 1814               	.LVL137:
 1815 00c6 0895      		ret
 1816               		.cfi_endproc
 1817               	.LFE37:
 1819               		.section	.text.rgblight_effect_snake,"ax",@progbits
 1820               	.global	rgblight_effect_snake
 1822               	rgblight_effect_snake:
 1823               	.LFB38:
 433:rgblight.c    **** void rgblight_effect_snake(uint8_t interval) {
 1824               		.loc 1 433 0
 1825               		.cfi_startproc
 1826               	.LVL138:
 1827 0000 8F92      		push r8
 1828               	.LCFI36:
 1829               		.cfi_def_cfa_offset 3
 1830               		.cfi_offset 8, -2
 1831 0002 9F92      		push r9
 1832               	.LCFI37:
 1833               		.cfi_def_cfa_offset 4
 1834               		.cfi_offset 9, -3
 1835 0004 AF92      		push r10
 1836               	.LCFI38:
 1837               		.cfi_def_cfa_offset 5
 1838               		.cfi_offset 10, -4
 1839 0006 BF92      		push r11
 1840               	.LCFI39:
 1841               		.cfi_def_cfa_offset 6
 1842               		.cfi_offset 11, -5
 1843 0008 CF92      		push r12
 1844               	.LCFI40:
 1845               		.cfi_def_cfa_offset 7
 1846               		.cfi_offset 12, -6
 1847 000a DF92      		push r13
 1848               	.LCFI41:
 1849               		.cfi_def_cfa_offset 8
 1850               		.cfi_offset 13, -7
 1851 000c EF92      		push r14
 1852               	.LCFI42:
 1853               		.cfi_def_cfa_offset 9
 1854               		.cfi_offset 14, -8
 1855 000e FF92      		push r15
 1856               	.LCFI43:
 1857               		.cfi_def_cfa_offset 10
 1858               		.cfi_offset 15, -9
 1859 0010 0F93      		push r16
 1860               	.LCFI44:
 1861               		.cfi_def_cfa_offset 11
 1862               		.cfi_offset 16, -10
 1863 0012 1F93      		push r17
 1864               	.LCFI45:
 1865               		.cfi_def_cfa_offset 12
 1866               		.cfi_offset 17, -11
 1867 0014 CF93      		push r28
 1868               	.LCFI46:
 1869               		.cfi_def_cfa_offset 13
 1870               		.cfi_offset 28, -12
 1871 0016 DF93      		push r29
 1872               	.LCFI47:
 1873               		.cfi_def_cfa_offset 14
 1874               		.cfi_offset 29, -13
 1875               	/* prologue: function */
 1876               	/* frame size = 0 */
 1877               	/* stack size = 12 */
 1878               	.L__stack_usage = 12
 1879 0018 C82F      		mov r28,r24
 1880               	.LVL139:
 434:rgblight.c    **** 	static uint8_t pos=0;
 435:rgblight.c    **** 	static uint16_t last_timer = 0;
 436:rgblight.c    **** 	uint8_t i,j;
 437:rgblight.c    **** 	int8_t k;
 438:rgblight.c    **** 	int8_t increament = 1;
 439:rgblight.c    **** 	if (interval%2) increament = -1;
 1881               		.loc 1 439 0
 1882 001a 80FF      		sbrs r24,0
 1883 001c 00C0      		rjmp .L98
 1884 001e 9924      		clr r9
 1885 0020 9A94      		dec r9
 1886 0022 00C0      		rjmp .L90
 1887               	.L98:
 438:rgblight.c    **** 	int8_t increament = 1;
 1888               		.loc 1 438 0
 1889 0024 9924      		clr r9
 1890 0026 9394      		inc r9
 1891               	.L90:
 1892               	.LVL140:
 440:rgblight.c    **** 	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_SNAKE_INTERVALS[interval/2])) return;
 1893               		.loc 1 440 0
 1894 0028 8091 0000 		lds r24,last_timer.2048
 1895 002c 9091 0000 		lds r25,last_timer.2048+1
 1896               	.LVL141:
 1897 0030 0E94 0000 		call timer_elapsed
 1898               	.LVL142:
 1899               	.LBB15:
 1900 0034 C695      		lsr r28
 1901               	.LVL143:
 1902 0036 EC2F      		mov r30,r28
 1903 0038 F0E0      		ldi r31,0
 1904 003a E050      		subi r30,lo8(-(RGBLED_SNAKE_INTERVALS))
 1905 003c F040      		sbci r31,hi8(-(RGBLED_SNAKE_INTERVALS))
 1906               	/* #APP */
 1907               	 ;  440 "rgblight.c" 1
 1908 003e E491      		lpm r30, Z
 1909               		
 1910               	 ;  0 "" 2
 1911               	.LVL144:
 1912               	/* #NOAPP */
 1913               	.LBE15:
 1914 0040 F0E0      		ldi r31,0
 1915 0042 8E17      		cp r24,r30
 1916 0044 9F07      		cpc r25,r31
 1917 0046 00F4      		brsh .+2
 1918 0048 00C0      		rjmp .L89
 441:rgblight.c    **** 	last_timer = timer_read();
 1919               		.loc 1 441 0
 1920 004a 0E94 0000 		call timer_read
 1921               	.LVL145:
 1922 004e 9093 0000 		sts last_timer.2048+1,r25
 1923 0052 8093 0000 		sts last_timer.2048,r24
 1924               	.LVL146:
 1925 0056 00E0      		ldi r16,lo8(led+2)
 1926 0058 10E0      		ldi r17,hi8(led+2)
 1927 005a C0E0      		ldi r28,0
 1928 005c D0E0      		ldi r29,0
 433:rgblight.c    **** void rgblight_effect_snake(uint8_t interval) {
 1929               		.loc 1 433 0
 1930 005e 57E0      		ldi r21,lo8(7)
 1931 0060 A52E      		mov r10,r21
 1932 0062 B12C      		mov r11,__zero_reg__
 1933               	.LVL147:
 1934               	.L95:
 1935 0064 F801      		movw r30,r16
 1936 0066 3197      		sbiw r30,1
 442:rgblight.c    **** 	for (i=0;i<RGBLED_NUM;i++) {
 443:rgblight.c    **** 		led[i].r=0;
 1937               		.loc 1 443 0
 1938 0068 1082      		st Z,__zero_reg__
 433:rgblight.c    **** void rgblight_effect_snake(uint8_t interval) {
 1939               		.loc 1 433 0
 1940 006a F801      		movw r30,r16
 1941 006c 3297      		sbiw r30,2
 444:rgblight.c    **** 		led[i].g=0;
 1942               		.loc 1 444 0
 1943 006e 1082      		st Z,__zero_reg__
 445:rgblight.c    **** 		led[i].b=0;
 1944               		.loc 1 445 0
 1945 0070 F801      		movw r30,r16
 1946 0072 1082      		st Z,__zero_reg__
 1947               	.LVL148:
 433:rgblight.c    **** void rgblight_effect_snake(uint8_t interval) {
 1948               		.loc 1 433 0
 1949 0074 37E0      		ldi r19,lo8(7)
 1950 0076 C32E      		mov r12,r19
 1951 0078 D12C      		mov r13,__zero_reg__
 1952 007a 812C      		mov r8,__zero_reg__
 446:rgblight.c    **** 		for (j=0;j<RGBLIGHT_EFFECT_SNAKE_LENGTH;j++) {
 447:rgblight.c    **** 			k = pos+j*increament;
 448:rgblight.c    **** 			if (k<0) k = k+RGBLED_NUM;
 449:rgblight.c    **** 			if (i==k) {
 450:rgblight.c    **** 				sethsv(rgblight_config.hue, rgblight_config.sat, (uint8_t)(rgblight_config.val*(RGBLIGHT_EFFECT
 1953               		.loc 1 450 0
 1954 007c 7E01      		movw r14,r28
 1955 007e EE0C      		lsl r14
 1956 0080 FF1C      		rol r15
 1957 0082 EC0E      		add r14,r28
 1958 0084 FD1E      		adc r15,r29
 1959 0086 80E0      		ldi r24,lo8(led)
 1960 0088 90E0      		ldi r25,hi8(led)
 1961 008a E80E      		add r14,r24
 1962 008c F91E      		adc r15,r25
 1963               	.LVL149:
 1964               	.L94:
 447:rgblight.c    **** 			k = pos+j*increament;
 1965               		.loc 1 447 0
 1966 008e 8091 0000 		lds r24,pos.2047
 1967 0092 880D      		add r24,r8
 1968               	.LVL150:
 448:rgblight.c    **** 			if (k<0) k = k+RGBLED_NUM;
 1969               		.loc 1 448 0
 1970 0094 87FD      		sbrc r24,7
 448:rgblight.c    **** 			if (k<0) k = k+RGBLED_NUM;
 1971               		.loc 1 448 0 is_stmt 0 discriminator 1
 1972 0096 885F      		subi r24,lo8(-(8))
 1973               	.LVL151:
 1974               	.L92:
 449:rgblight.c    **** 			if (i==k) {
 1975               		.loc 1 449 0 is_stmt 1
 1976 0098 9927      		clr r25
 1977 009a 87FD      		sbrc r24,7
 1978 009c 9095      		com r25
 1979 009e C817      		cp r28,r24
 1980 00a0 D907      		cpc r29,r25
 1981 00a2 01F4      		brne .L93
 1982               		.loc 1 450 0
 1983 00a4 2091 0000 		lds r18,rgblight_config+3
 1984 00a8 2C9D      		mul r18,r12
 1985 00aa C001      		movw r24,r0
 1986 00ac 2D9D      		mul r18,r13
 1987 00ae 900D      		add r25,r0
 1988 00b0 1124      		clr __zero_reg__
 1989               	.LVL152:
 1990 00b2 B501      		movw r22,r10
 1991 00b4 0E94 0000 		call __divmodhi4
 1992 00b8 462F      		mov r20,r22
 1993 00ba 8091 0000 		lds r24,rgblight_config
 1994 00be 881F      		rol r24
 1995 00c0 8827      		clr r24
 1996 00c2 881F      		rol r24
 1997 00c4 9091 0000 		lds r25,rgblight_config+1
 1998 00c8 592F      		mov r21,r25
 1999 00ca 550F      		lsl r21
 2000 00cc 97FB      		bst r25,7
 2001 00ce 9927      		clr r25
 2002 00d0 90F9      		bld r25,0
 2003 00d2 9701      		movw r18,r14
 2004 00d4 6091 0000 		lds r22,rgblight_config+2
 2005 00d8 852B      		or r24,r21
 2006 00da 0E94 0000 		call sethsv
 2007               	.LVL153:
 2008               	.L93:
 2009 00de 890C      		add r8,r9
 2010 00e0 91E0      		ldi r25,1
 2011 00e2 C91A      		sub r12,r25
 2012 00e4 D108      		sbc r13,__zero_reg__
 446:rgblight.c    **** 		for (j=0;j<RGBLIGHT_EFFECT_SNAKE_LENGTH;j++) {
 2013               		.loc 1 446 0
 2014 00e6 01F4      		brne .L94
 2015 00e8 2196      		adiw r28,1
 2016 00ea 0D5F      		subi r16,-3
 2017 00ec 1F4F      		sbci r17,-1
 442:rgblight.c    **** 	for (i=0;i<RGBLED_NUM;i++) {
 2018               		.loc 1 442 0
 2019 00ee C830      		cpi r28,8
 2020 00f0 D105      		cpc r29,__zero_reg__
 2021 00f2 01F0      		breq .+2
 2022 00f4 00C0      		rjmp .L95
 451:rgblight.c    **** 			}
 452:rgblight.c    **** 		}
 453:rgblight.c    **** 	}
 454:rgblight.c    **** 	rgblight_set();
 2023               		.loc 1 454 0
 2024 00f6 0E94 0000 		call rgblight_set
 2025               	.LVL154:
 2026 00fa 8091 0000 		lds r24,pos.2047
 455:rgblight.c    **** 	if (increament == 1) {
 2027               		.loc 1 455 0
 2028 00fe E1E0      		ldi r30,lo8(1)
 2029 0100 9E12      		cpse r9,r30
 2030 0102 00C0      		rjmp .L96
 456:rgblight.c    **** 		if (pos - 1 < 0) {
 2031               		.loc 1 456 0
 2032 0104 8111      		cpse r24,__zero_reg__
 2033 0106 00C0      		rjmp .L97
 457:rgblight.c    **** 			pos = 13;
 2034               		.loc 1 457 0
 2035 0108 8DE0      		ldi r24,lo8(13)
 2036 010a 00C0      		rjmp .L101
 2037               	.L97:
 458:rgblight.c    **** 		} else {
 459:rgblight.c    **** 			pos -= 1;
 2038               		.loc 1 459 0
 2039 010c 8150      		subi r24,lo8(-(-1))
 2040 010e 00C0      		rjmp .L101
 2041               	.L96:
 460:rgblight.c    **** 		}
 461:rgblight.c    **** 	} else {
 462:rgblight.c    **** 		pos = (pos+1)%RGBLED_NUM;
 2042               		.loc 1 462 0
 2043 0110 90E0      		ldi r25,0
 2044 0112 0196      		adiw r24,1
 2045 0114 8770      		andi r24,7
 2046 0116 9927      		clr r25
 2047               	.L101:
 2048 0118 8093 0000 		sts pos.2047,r24
 2049               	.L89:
 2050               	/* epilogue start */
 463:rgblight.c    **** 	}
 464:rgblight.c    **** 
 465:rgblight.c    **** }
 2051               		.loc 1 465 0
 2052 011c DF91      		pop r29
 2053 011e CF91      		pop r28
 2054 0120 1F91      		pop r17
 2055 0122 0F91      		pop r16
 2056 0124 FF90      		pop r15
 2057 0126 EF90      		pop r14
 2058 0128 DF90      		pop r13
 2059 012a CF90      		pop r12
 2060 012c BF90      		pop r11
 2061 012e AF90      		pop r10
 2062 0130 9F90      		pop r9
 2063               	.LVL155:
 2064 0132 8F90      		pop r8
 2065 0134 0895      		ret
 2066               		.cfi_endproc
 2067               	.LFE38:
 2069               		.section	.text.rgblight_effect_knight,"ax",@progbits
 2070               	.global	rgblight_effect_knight
 2072               	rgblight_effect_knight:
 2073               	.LFB39:
 466:rgblight.c    **** 
 467:rgblight.c    **** void rgblight_effect_knight(uint8_t interval) {
 2074               		.loc 1 467 0
 2075               		.cfi_startproc
 2076               	.LVL156:
 2077 0000 BF92      		push r11
 2078               	.LCFI48:
 2079               		.cfi_def_cfa_offset 3
 2080               		.cfi_offset 11, -2
 2081 0002 CF92      		push r12
 2082               	.LCFI49:
 2083               		.cfi_def_cfa_offset 4
 2084               		.cfi_offset 12, -3
 2085 0004 DF92      		push r13
 2086               	.LCFI50:
 2087               		.cfi_def_cfa_offset 5
 2088               		.cfi_offset 13, -4
 2089 0006 EF92      		push r14
 2090               	.LCFI51:
 2091               		.cfi_def_cfa_offset 6
 2092               		.cfi_offset 14, -5
 2093 0008 FF92      		push r15
 2094               	.LCFI52:
 2095               		.cfi_def_cfa_offset 7
 2096               		.cfi_offset 15, -6
 2097 000a 0F93      		push r16
 2098               	.LCFI53:
 2099               		.cfi_def_cfa_offset 8
 2100               		.cfi_offset 16, -7
 2101 000c 1F93      		push r17
 2102               	.LCFI54:
 2103               		.cfi_def_cfa_offset 9
 2104               		.cfi_offset 17, -8
 2105 000e CF93      		push r28
 2106               	.LCFI55:
 2107               		.cfi_def_cfa_offset 10
 2108               		.cfi_offset 28, -9
 2109 0010 DF93      		push r29
 2110               	.LCFI56:
 2111               		.cfi_def_cfa_offset 11
 2112               		.cfi_offset 29, -10
 2113 0012 CDB7      		in r28,__SP_L__
 2114 0014 DEB7      		in r29,__SP_H__
 2115               	.LCFI57:
 2116               		.cfi_def_cfa_register 28
 2117 0016 6897      		sbiw r28,24
 2118               	.LCFI58:
 2119               		.cfi_def_cfa_offset 35
 2120 0018 0FB6      		in __tmp_reg__,__SREG__
 2121 001a F894      		cli
 2122 001c DEBF      		out __SP_H__,r29
 2123 001e 0FBE      		out __SREG__,__tmp_reg__
 2124 0020 CDBF      		out __SP_L__,r28
 2125               	/* prologue: function */
 2126               	/* frame size = 24 */
 2127               	/* stack size = 33 */
 2128               	.L__stack_usage = 33
 2129 0022 182F      		mov r17,r24
 468:rgblight.c    **** 	static int8_t pos=0;
 469:rgblight.c    **** 	static uint16_t last_timer = 0;
 470:rgblight.c    **** 	uint8_t i,j,cur;
 471:rgblight.c    **** 	int8_t k;
 472:rgblight.c    **** 	struct cRGB preled[RGBLED_NUM];
 473:rgblight.c    **** 	static int8_t increament = -1;
 474:rgblight.c    **** 	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_KNIGHT_INTERVALS[interval])) return;
 2130               		.loc 1 474 0
 2131 0024 8091 0000 		lds r24,last_timer.2066
 2132 0028 9091 0000 		lds r25,last_timer.2066+1
 2133               	.LVL157:
 2134 002c 0E94 0000 		call timer_elapsed
 2135               	.LVL158:
 2136               	.LBB16:
 2137 0030 E12F      		mov r30,r17
 2138 0032 F0E0      		ldi r31,0
 2139 0034 E050      		subi r30,lo8(-(RGBLED_KNIGHT_INTERVALS))
 2140 0036 F040      		sbci r31,hi8(-(RGBLED_KNIGHT_INTERVALS))
 2141               	/* #APP */
 2142               	 ;  474 "rgblight.c" 1
 2143 0038 E491      		lpm r30, Z
 2144               		
 2145               	 ;  0 "" 2
 2146               	.LVL159:
 2147               	/* #NOAPP */
 2148               	.LBE16:
 2149 003a F0E0      		ldi r31,0
 2150 003c 8E17      		cp r24,r30
 2151 003e 9F07      		cpc r25,r31
 2152 0040 00F4      		brsh .+2
 2153 0042 00C0      		rjmp .L102
 475:rgblight.c    **** 	last_timer = timer_read();
 2154               		.loc 1 475 0
 2155 0044 0E94 0000 		call timer_read
 2156               	.LVL160:
 2157 0048 9093 0000 		sts last_timer.2066+1,r25
 2158 004c 8093 0000 		sts last_timer.2066,r24
 2159               	.LVL161:
 2160 0050 7E01      		movw r14,r28
 2161 0052 23E0      		ldi r18,3
 2162 0054 E20E      		add r14,r18
 2163 0056 F11C      		adc r15,__zero_reg__
 2164 0058 00E0      		ldi r16,0
 2165 005a 10E0      		ldi r17,0
 2166               	.LVL162:
 2167               	.L108:
 467:rgblight.c    **** void rgblight_effect_knight(uint8_t interval) {
 2168               		.loc 1 467 0
 2169 005c F701      		movw r30,r14
 2170 005e 3197      		sbiw r30,1
 476:rgblight.c    **** 	for (i=0;i<RGBLED_NUM;i++) {
 477:rgblight.c    **** 		preled[i].r=0;
 2171               		.loc 1 477 0
 2172 0060 1082      		st Z,__zero_reg__
 467:rgblight.c    **** void rgblight_effect_knight(uint8_t interval) {
 2173               		.loc 1 467 0
 2174 0062 F701      		movw r30,r14
 2175 0064 3297      		sbiw r30,2
 478:rgblight.c    **** 		preled[i].g=0;
 2176               		.loc 1 478 0
 2177 0066 1082      		st Z,__zero_reg__
 479:rgblight.c    **** 		preled[i].b=0;
 2178               		.loc 1 479 0
 2179 0068 D701      		movw r26,r14
 2180 006a 1C92      		st X,__zero_reg__
 2181               	.LVL163:
 480:rgblight.c    **** 		for (j=0;j<RGBLIGHT_EFFECT_KNIGHT_LENGTH;j++) {
 2182               		.loc 1 480 0
 2183 006c B12C      		mov r11,__zero_reg__
 481:rgblight.c    **** 			k = pos+j*increament;
 482:rgblight.c    **** 			if (k<0) k = 0;
 483:rgblight.c    **** 			if (k>=RGBLED_NUM) k=RGBLED_NUM-1;
 484:rgblight.c    **** 			if (i==k) {
 485:rgblight.c    **** 				sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val, &preled[i]);
 2184               		.loc 1 485 0
 2185 006e 6801      		movw r12,r16
 2186 0070 CC0C      		lsl r12
 2187 0072 DD1C      		rol r13
 2188 0074 C00E      		add r12,r16
 2189 0076 D11E      		adc r13,r17
 2190 0078 E1E0      		ldi r30,lo8(1)
 2191 007a F0E0      		ldi r31,0
 2192 007c EC0F      		add r30,r28
 2193 007e FD1F      		adc r31,r29
 2194 0080 CE0E      		add r12,r30
 2195 0082 DF1E      		adc r13,r31
 2196               	.LVL164:
 2197               	.L107:
 481:rgblight.c    **** 			k = pos+j*increament;
 2198               		.loc 1 481 0
 2199 0084 9091 0000 		lds r25,increament.2072
 2200 0088 8091 0000 		lds r24,pos.2065
 2201 008c B99E      		mul r11,r25
 2202 008e 800D      		add r24,r0
 2203 0090 1124      		clr __zero_reg__
 2204               	.LVL165:
 482:rgblight.c    **** 			if (k<0) k = 0;
 2205               		.loc 1 482 0
 2206 0092 87FD      		sbrc r24,7
 2207 0094 00C0      		rjmp .L115
 483:rgblight.c    **** 			if (k>=RGBLED_NUM) k=RGBLED_NUM-1;
 2208               		.loc 1 483 0
 2209 0096 8830      		cpi r24,lo8(8)
 2210 0098 04F4      		brge .L116
 2211 009a 00C0      		rjmp .L105
 2212               	.L115:
 482:rgblight.c    **** 			if (k<0) k = 0;
 2213               		.loc 1 482 0
 2214 009c 80E0      		ldi r24,0
 2215               	.LVL166:
 2216 009e 00C0      		rjmp .L105
 2217               	.LVL167:
 2218               	.L116:
 483:rgblight.c    **** 			if (k>=RGBLED_NUM) k=RGBLED_NUM-1;
 2219               		.loc 1 483 0
 2220 00a0 87E0      		ldi r24,lo8(7)
 2221               	.LVL168:
 2222               	.L105:
 484:rgblight.c    **** 			if (i==k) {
 2223               		.loc 1 484 0
 2224 00a2 9927      		clr r25
 2225 00a4 87FD      		sbrc r24,7
 2226 00a6 9095      		com r25
 2227 00a8 0817      		cp r16,r24
 2228 00aa 1907      		cpc r17,r25
 2229 00ac 01F4      		brne .L106
 2230               		.loc 1 485 0
 2231 00ae 8091 0000 		lds r24,rgblight_config
 2232               	.LVL169:
 2233 00b2 881F      		rol r24
 2234 00b4 8827      		clr r24
 2235 00b6 881F      		rol r24
 2236 00b8 9091 0000 		lds r25,rgblight_config+1
 2237 00bc 592F      		mov r21,r25
 2238 00be 550F      		lsl r21
 2239 00c0 97FB      		bst r25,7
 2240 00c2 9927      		clr r25
 2241 00c4 90F9      		bld r25,0
 2242 00c6 9601      		movw r18,r12
 2243 00c8 4091 0000 		lds r20,rgblight_config+3
 2244 00cc 6091 0000 		lds r22,rgblight_config+2
 2245 00d0 852B      		or r24,r21
 2246 00d2 0E94 0000 		call sethsv
 2247               	.LVL170:
 2248               	.L106:
 480:rgblight.c    **** 		for (j=0;j<RGBLIGHT_EFFECT_KNIGHT_LENGTH;j++) {
 2249               		.loc 1 480 0
 2250 00d6 B394      		inc r11
 2251               	.LVL171:
 2252 00d8 F7E0      		ldi r31,lo8(7)
 2253 00da BF12      		cpse r11,r31
 2254 00dc 00C0      		rjmp .L107
 2255 00de 0F5F      		subi r16,-1
 2256 00e0 1F4F      		sbci r17,-1
 2257 00e2 23E0      		ldi r18,3
 2258 00e4 E20E      		add r14,r18
 2259 00e6 F11C      		adc r15,__zero_reg__
 476:rgblight.c    **** 	for (i=0;i<RGBLED_NUM;i++) {
 2260               		.loc 1 476 0
 2261 00e8 0830      		cpi r16,8
 2262 00ea 1105      		cpc r17,__zero_reg__
 2263 00ec 01F0      		breq .+2
 2264 00ee 00C0      		rjmp .L108
 2265 00f0 60E0      		ldi r22,lo8(led+2)
 2266 00f2 70E0      		ldi r23,hi8(led+2)
 2267 00f4 8BE0      		ldi r24,lo8(11)
 2268 00f6 90E0      		ldi r25,0
 2269               	.L109:
 486:rgblight.c    **** 			}
 487:rgblight.c    **** 		}
 488:rgblight.c    **** 	}
 489:rgblight.c    **** 	if (RGBLIGHT_EFFECT_KNIGHT_OFFSET) {
 490:rgblight.c    **** 		for (i=0;i<RGBLED_NUM;i++) {
 491:rgblight.c    **** 			cur = (i+RGBLIGHT_EFFECT_KNIGHT_OFFSET) % RGBLED_NUM;
 2270               		.loc 1 491 0 discriminator 2
 2271 00f8 9C01      		movw r18,r24
 2272 00fa 2770      		andi r18,7
 2273 00fc 3327      		clr r19
 2274               	.LVL172:
 467:rgblight.c    **** void rgblight_effect_knight(uint8_t interval) {
 2275               		.loc 1 467 0 discriminator 2
 2276 00fe AB01      		movw r20,r22
 2277 0100 4150      		subi r20,1
 2278 0102 5109      		sbc r21,__zero_reg__
 492:rgblight.c    **** 			led[i].r = preled[cur].r;
 2279               		.loc 1 492 0 discriminator 2
 2280 0104 F901      		movw r30,r18
 2281 0106 EE0F      		lsl r30
 2282 0108 FF1F      		rol r31
 2283 010a E20F      		add r30,r18
 2284 010c F31F      		adc r31,r19
 2285 010e A1E0      		ldi r26,lo8(1)
 2286 0110 B0E0      		ldi r27,0
 2287 0112 AC0F      		add r26,r28
 2288 0114 BD1F      		adc r27,r29
 2289 0116 EA0F      		add r30,r26
 2290 0118 FB1F      		adc r31,r27
 2291 011a 2181      		ldd r18,Z+1
 2292               	.LVL173:
 2293 011c DA01      		movw r26,r20
 2294 011e 2C93      		st X,r18
 467:rgblight.c    **** void rgblight_effect_knight(uint8_t interval) {
 2295               		.loc 1 467 0 discriminator 2
 2296 0120 9B01      		movw r18,r22
 2297 0122 2250      		subi r18,2
 2298 0124 3109      		sbc r19,__zero_reg__
 493:rgblight.c    **** 			led[i].g = preled[cur].g;
 2299               		.loc 1 493 0 discriminator 2
 2300 0126 4081      		ld r20,Z
 2301 0128 D901      		movw r26,r18
 2302 012a 4C93      		st X,r20
 494:rgblight.c    **** 			led[i].b = preled[cur].b;
 2303               		.loc 1 494 0 discriminator 2
 2304 012c 2281      		ldd r18,Z+2
 2305 012e FB01      		movw r30,r22
 2306 0130 2083      		st Z,r18
 2307 0132 0196      		adiw r24,1
 2308               	.LVL174:
 2309 0134 6D5F      		subi r22,-3
 2310 0136 7F4F      		sbci r23,-1
 490:rgblight.c    **** 		for (i=0;i<RGBLED_NUM;i++) {
 2311               		.loc 1 490 0 discriminator 2
 2312 0138 8331      		cpi r24,19
 2313 013a 9105      		cpc r25,__zero_reg__
 2314 013c 01F4      		brne .L109
 495:rgblight.c    **** 		}
 496:rgblight.c    **** 	}
 497:rgblight.c    **** 	rgblight_set();
 2315               		.loc 1 497 0
 2316 013e 0E94 0000 		call rgblight_set
 2317               	.LVL175:
 498:rgblight.c    **** 	if (increament == 1) {
 2318               		.loc 1 498 0
 2319 0142 9091 0000 		lds r25,increament.2072
 2320 0146 8091 0000 		lds r24,pos.2065
 2321 014a 9130      		cpi r25,lo8(1)
 2322 014c 01F4      		brne .L110
 499:rgblight.c    **** 		if (pos - 1 < 0 - RGBLIGHT_EFFECT_KNIGHT_LENGTH) {
 2323               		.loc 1 499 0
 2324 014e 8A3F      		cpi r24,lo8(-6)
 2325 0150 04F4      		brge .L111
 500:rgblight.c    **** 			pos = 0- RGBLIGHT_EFFECT_KNIGHT_LENGTH;
 2326               		.loc 1 500 0
 2327 0152 89EF      		ldi r24,lo8(-7)
 2328 0154 8093 0000 		sts pos.2065,r24
 501:rgblight.c    **** 			increament = -1;
 2329               		.loc 1 501 0
 2330 0158 8FEF      		ldi r24,lo8(-1)
 2331 015a 00C0      		rjmp .L121
 2332               	.L111:
 502:rgblight.c    **** 		} else {
 503:rgblight.c    **** 			pos -= 1;
 2333               		.loc 1 503 0
 2334 015c 8150      		subi r24,lo8(-(-1))
 2335 015e 00C0      		rjmp .L120
 2336               	.L110:
 504:rgblight.c    **** 		}
 505:rgblight.c    **** 	} else {
 506:rgblight.c    **** 		if (pos+1>RGBLED_NUM+RGBLIGHT_EFFECT_KNIGHT_LENGTH) {
 2337               		.loc 1 506 0
 2338 0160 8F30      		cpi r24,lo8(15)
 2339 0162 04F0      		brlt .L113
 507:rgblight.c    **** 			pos = RGBLED_NUM+RGBLIGHT_EFFECT_KNIGHT_LENGTH-1;
 2340               		.loc 1 507 0
 2341 0164 8EE0      		ldi r24,lo8(14)
 2342 0166 8093 0000 		sts pos.2065,r24
 508:rgblight.c    **** 			increament = 1;
 2343               		.loc 1 508 0
 2344 016a 81E0      		ldi r24,lo8(1)
 2345               	.L121:
 2346 016c 8093 0000 		sts increament.2072,r24
 2347 0170 00C0      		rjmp .L102
 2348               	.L113:
 509:rgblight.c    **** 		} else {
 510:rgblight.c    **** 			pos += 1;
 2349               		.loc 1 510 0
 2350 0172 8F5F      		subi r24,lo8(-(1))
 2351               	.L120:
 2352 0174 8093 0000 		sts pos.2065,r24
 2353               	.LVL176:
 2354               	.L102:
 2355               	/* epilogue start */
 511:rgblight.c    **** 		}
 512:rgblight.c    **** 	}
 513:rgblight.c    **** 
 514:rgblight.c    **** }
 2356               		.loc 1 514 0
 2357 0178 6896      		adiw r28,24
 2358 017a 0FB6      		in __tmp_reg__,__SREG__
 2359 017c F894      		cli
 2360 017e DEBF      		out __SP_H__,r29
 2361 0180 0FBE      		out __SREG__,__tmp_reg__
 2362 0182 CDBF      		out __SP_L__,r28
 2363 0184 DF91      		pop r29
 2364 0186 CF91      		pop r28
 2365 0188 1F91      		pop r17
 2366               	.LVL177:
 2367 018a 0F91      		pop r16
 2368 018c FF90      		pop r15
 2369 018e EF90      		pop r14
 2370 0190 DF90      		pop r13
 2371 0192 CF90      		pop r12
 2372 0194 BF90      		pop r11
 2373 0196 0895      		ret
 2374               		.cfi_endproc
 2375               	.LFE39:
 2377               		.section	.text.__vector_32,"ax",@progbits
 2378               	.global	__vector_32
 2380               	__vector_32:
 2381               	.LFB34:
 370:rgblight.c    **** ISR(TIMER3_COMPA_vect) {
 2382               		.loc 1 370 0
 2383               		.cfi_startproc
 2384 0000 1F92      		push r1
 2385               	.LCFI59:
 2386               		.cfi_def_cfa_offset 3
 2387               		.cfi_offset 1, -2
 2388 0002 0F92      		push r0
 2389               	.LCFI60:
 2390               		.cfi_def_cfa_offset 4
 2391               		.cfi_offset 0, -3
 2392 0004 0FB6      		in r0,__SREG__
 2393 0006 0F92      		push r0
 2394 0008 1124      		clr __zero_reg__
 2395 000a 2F93      		push r18
 2396               	.LCFI61:
 2397               		.cfi_def_cfa_offset 5
 2398               		.cfi_offset 18, -4
 2399 000c 3F93      		push r19
 2400               	.LCFI62:
 2401               		.cfi_def_cfa_offset 6
 2402               		.cfi_offset 19, -5
 2403 000e 4F93      		push r20
 2404               	.LCFI63:
 2405               		.cfi_def_cfa_offset 7
 2406               		.cfi_offset 20, -6
 2407 0010 5F93      		push r21
 2408               	.LCFI64:
 2409               		.cfi_def_cfa_offset 8
 2410               		.cfi_offset 21, -7
 2411 0012 6F93      		push r22
 2412               	.LCFI65:
 2413               		.cfi_def_cfa_offset 9
 2414               		.cfi_offset 22, -8
 2415 0014 7F93      		push r23
 2416               	.LCFI66:
 2417               		.cfi_def_cfa_offset 10
 2418               		.cfi_offset 23, -9
 2419 0016 8F93      		push r24
 2420               	.LCFI67:
 2421               		.cfi_def_cfa_offset 11
 2422               		.cfi_offset 24, -10
 2423 0018 9F93      		push r25
 2424               	.LCFI68:
 2425               		.cfi_def_cfa_offset 12
 2426               		.cfi_offset 25, -11
 2427 001a AF93      		push r26
 2428               	.LCFI69:
 2429               		.cfi_def_cfa_offset 13
 2430               		.cfi_offset 26, -12
 2431 001c BF93      		push r27
 2432               	.LCFI70:
 2433               		.cfi_def_cfa_offset 14
 2434               		.cfi_offset 27, -13
 2435 001e EF93      		push r30
 2436               	.LCFI71:
 2437               		.cfi_def_cfa_offset 15
 2438               		.cfi_offset 30, -14
 2439 0020 FF93      		push r31
 2440               	.LCFI72:
 2441               		.cfi_def_cfa_offset 16
 2442               		.cfi_offset 31, -15
 2443               	/* prologue: Signal */
 2444               	/* frame size = 0 */
 2445               	/* stack size = 15 */
 2446               	.L__stack_usage = 15
 372:rgblight.c    **** 	if (rgblight_config.mode>=2 && rgblight_config.mode<=5) {
 2447               		.loc 1 372 0
 2448 0022 8091 0000 		lds r24,rgblight_config
 2449 0026 8695      		lsr r24
 2450 0028 8F73      		andi r24,lo8(63)
 2451 002a 982F      		mov r25,r24
 2452 002c 925C      		subi r25,lo8(-(62))
 2453 002e 9F73      		andi r25,lo8(63)
 2454 0030 9430      		cpi r25,lo8(4)
 2455 0032 00F4      		brsh .L123
 374:rgblight.c    **** 		rgblight_effect_breathing(rgblight_config.mode-2);
 2456               		.loc 1 374 0
 2457 0034 8250      		subi r24,lo8(-(-2))
 2458 0036 0E94 0000 		call rgblight_effect_breathing
 2459               	.LVL178:
 2460 003a 00C0      		rjmp .L122
 2461               	.L123:
 376:rgblight.c    **** 	} else if (rgblight_config.mode>=6 && rgblight_config.mode<=8) {
 2462               		.loc 1 376 0
 2463 003c 982F      		mov r25,r24
 2464 003e 965C      		subi r25,lo8(-(58))
 2465 0040 9F73      		andi r25,lo8(63)
 2466 0042 9330      		cpi r25,lo8(3)
 2467 0044 00F4      		brsh .L125
 377:rgblight.c    **** 		rgblight_effect_rainbow_mood(rgblight_config.mode-6);
 2468               		.loc 1 377 0
 2469 0046 8650      		subi r24,lo8(-(-6))
 2470 0048 0E94 0000 		call rgblight_effect_rainbow_mood
 2471               	.LVL179:
 2472 004c 00C0      		rjmp .L122
 2473               	.L125:
 378:rgblight.c    **** 	} else if (rgblight_config.mode>=9 && rgblight_config.mode<=14) {
 2474               		.loc 1 378 0
 2475 004e 982F      		mov r25,r24
 2476 0050 995C      		subi r25,lo8(-(55))
 2477 0052 9F73      		andi r25,lo8(63)
 2478 0054 9630      		cpi r25,lo8(6)
 2479 0056 00F4      		brsh .L126
 379:rgblight.c    **** 		rgblight_effect_rainbow_swirl(rgblight_config.mode-9);
 2480               		.loc 1 379 0
 2481 0058 8950      		subi r24,lo8(-(-9))
 2482 005a 0E94 0000 		call rgblight_effect_rainbow_swirl
 2483               	.LVL180:
 2484 005e 00C0      		rjmp .L122
 2485               	.L126:
 380:rgblight.c    **** 	} else if (rgblight_config.mode>=15 && rgblight_config.mode<=20) {
 2486               		.loc 1 380 0
 2487 0060 982F      		mov r25,r24
 2488 0062 9F5C      		subi r25,lo8(-(49))
 2489 0064 9F73      		andi r25,lo8(63)
 2490 0066 9630      		cpi r25,lo8(6)
 2491 0068 00F4      		brsh .L127
 381:rgblight.c    **** 		rgblight_effect_snake(rgblight_config.mode-15);
 2492               		.loc 1 381 0
 2493 006a 8F50      		subi r24,lo8(-(-15))
 2494 006c 0E94 0000 		call rgblight_effect_snake
 2495               	.LVL181:
 2496 0070 00C0      		rjmp .L122
 2497               	.L127:
 382:rgblight.c    **** 	} else if (rgblight_config.mode>=21 && rgblight_config.mode<=23) {
 2498               		.loc 1 382 0
 2499 0072 982F      		mov r25,r24
 2500 0074 955D      		subi r25,lo8(-(43))
 2501 0076 9F73      		andi r25,lo8(63)
 2502 0078 9330      		cpi r25,lo8(3)
 2503 007a 00F4      		brsh .L122
 383:rgblight.c    **** 		rgblight_effect_knight(rgblight_config.mode-21);
 2504               		.loc 1 383 0
 2505 007c 8551      		subi r24,lo8(-(-21))
 2506 007e 0E94 0000 		call rgblight_effect_knight
 2507               	.LVL182:
 2508               	.L122:
 2509               	/* epilogue start */
 385:rgblight.c    **** }
 2510               		.loc 1 385 0
 2511 0082 FF91      		pop r31
 2512 0084 EF91      		pop r30
 2513 0086 BF91      		pop r27
 2514 0088 AF91      		pop r26
 2515 008a 9F91      		pop r25
 2516 008c 8F91      		pop r24
 2517 008e 7F91      		pop r23
 2518 0090 6F91      		pop r22
 2519 0092 5F91      		pop r21
 2520 0094 4F91      		pop r20
 2521 0096 3F91      		pop r19
 2522 0098 2F91      		pop r18
 2523 009a 0F90      		pop r0
 2524 009c 0FBE      		out __SREG__,r0
 2525 009e 0F90      		pop r0
 2526 00a0 1F90      		pop r1
 2527 00a2 1895      		reti
 2528               		.cfi_endproc
 2529               	.LFE34:
 2531               	.global	rgblight_inited
 2532               		.section	.bss.rgblight_inited,"aw",@nobits
 2535               	rgblight_inited:
 2536 0000 00        		.zero	1
 2537               		.comm	led,24,1
 2538               		.comm	inmem_config,4,1
 2539               		.comm	rgblight_config,4,1
 2540               	.global	RGBLED_KNIGHT_INTERVALS
 2541               		.section	.progmem.data.RGBLED_KNIGHT_INTERVALS,"a",@progbits
 2544               	RGBLED_KNIGHT_INTERVALS:
 2545 0000 64        		.byte	100
 2546 0001 32        		.byte	50
 2547 0002 14        		.byte	20
 2548               	.global	RGBLED_SNAKE_INTERVALS
 2549               		.section	.progmem.data.RGBLED_SNAKE_INTERVALS,"a",@progbits
 2552               	RGBLED_SNAKE_INTERVALS:
 2553 0000 64        		.byte	100
 2554 0001 32        		.byte	50
 2555 0002 14        		.byte	20
 2556               	.global	RGBLED_RAINBOW_SWIRL_INTERVALS
 2557               		.section	.progmem.data.RGBLED_RAINBOW_SWIRL_INTERVALS,"a",@progbits
 2560               	RGBLED_RAINBOW_SWIRL_INTERVALS:
 2561 0000 64        		.byte	100
 2562 0001 32        		.byte	50
 2563 0002 14        		.byte	20
 2564               	.global	RGBLED_RAINBOW_MOOD_INTERVALS
 2565               		.section	.progmem.data.RGBLED_RAINBOW_MOOD_INTERVALS,"a",@progbits
 2568               	RGBLED_RAINBOW_MOOD_INTERVALS:
 2569 0000 78        		.byte	120
 2570 0001 3C        		.byte	60
 2571 0002 1E        		.byte	30
 2572               	.global	RGBLED_BREATHING_INTERVALS
 2573               		.section	.progmem.data.RGBLED_BREATHING_INTERVALS,"a",@progbits
 2576               	RGBLED_BREATHING_INTERVALS:
 2577 0000 1E        		.byte	30
 2578 0001 14        		.byte	20
 2579 0002 0A        		.byte	10
 2580 0003 05        		.byte	5
 2581               	.global	RGBLED_BREATHING_TABLE
 2582               		.section	.progmem.data.RGBLED_BREATHING_TABLE,"a",@progbits
 2585               	RGBLED_BREATHING_TABLE:
 2586 0000 00        		.byte	0
 2587 0001 00        		.byte	0
 2588 0002 00        		.byte	0
 2589 0003 00        		.byte	0
 2590 0004 01        		.byte	1
 2591 0005 01        		.byte	1
 2592 0006 01        		.byte	1
 2593 0007 02        		.byte	2
 2594 0008 02        		.byte	2
 2595 0009 03        		.byte	3
 2596 000a 04        		.byte	4
 2597 000b 05        		.byte	5
 2598 000c 05        		.byte	5
 2599 000d 06        		.byte	6
 2600 000e 07        		.byte	7
 2601 000f 09        		.byte	9
 2602 0010 0A        		.byte	10
 2603 0011 0B        		.byte	11
 2604 0012 0C        		.byte	12
 2605 0013 0E        		.byte	14
 2606 0014 0F        		.byte	15
 2607 0015 11        		.byte	17
 2608 0016 12        		.byte	18
 2609 0017 14        		.byte	20
 2610 0018 15        		.byte	21
 2611 0019 17        		.byte	23
 2612 001a 19        		.byte	25
 2613 001b 1B        		.byte	27
 2614 001c 1D        		.byte	29
 2615 001d 1F        		.byte	31
 2616 001e 21        		.byte	33
 2617 001f 23        		.byte	35
 2618 0020 25        		.byte	37
 2619 0021 28        		.byte	40
 2620 0022 2A        		.byte	42
 2621 0023 2C        		.byte	44
 2622 0024 2F        		.byte	47
 2623 0025 31        		.byte	49
 2624 0026 34        		.byte	52
 2625 0027 36        		.byte	54
 2626 0028 39        		.byte	57
 2627 0029 3B        		.byte	59
 2628 002a 3E        		.byte	62
 2629 002b 41        		.byte	65
 2630 002c 43        		.byte	67
 2631 002d 46        		.byte	70
 2632 002e 49        		.byte	73
 2633 002f 4C        		.byte	76
 2634 0030 4F        		.byte	79
 2635 0031 52        		.byte	82
 2636 0032 55        		.byte	85
 2637 0033 58        		.byte	88
 2638 0034 5A        		.byte	90
 2639 0035 5D        		.byte	93
 2640 0036 61        		.byte	97
 2641 0037 64        		.byte	100
 2642 0038 67        		.byte	103
 2643 0039 6A        		.byte	106
 2644 003a 6D        		.byte	109
 2645 003b 70        		.byte	112
 2646 003c 73        		.byte	115
 2647 003d 76        		.byte	118
 2648 003e 79        		.byte	121
 2649 003f 7C        		.byte	124
 2650 0040 7F        		.byte	127
 2651 0041 83        		.byte	-125
 2652 0042 86        		.byte	-122
 2653 0043 89        		.byte	-119
 2654 0044 8C        		.byte	-116
 2655 0045 8F        		.byte	-113
 2656 0046 92        		.byte	-110
 2657 0047 95        		.byte	-107
 2658 0048 98        		.byte	-104
 2659 0049 9B        		.byte	-101
 2660 004a 9E        		.byte	-98
 2661 004b A2        		.byte	-94
 2662 004c A5        		.byte	-91
 2663 004d A7        		.byte	-89
 2664 004e AA        		.byte	-86
 2665 004f AD        		.byte	-83
 2666 0050 B0        		.byte	-80
 2667 0051 B3        		.byte	-77
 2668 0052 B6        		.byte	-74
 2669 0053 B9        		.byte	-71
 2670 0054 BC        		.byte	-68
 2671 0055 BE        		.byte	-66
 2672 0056 C1        		.byte	-63
 2673 0057 C4        		.byte	-60
 2674 0058 C6        		.byte	-58
 2675 0059 C9        		.byte	-55
 2676 005a CB        		.byte	-53
 2677 005b CE        		.byte	-50
 2678 005c D0        		.byte	-48
 2679 005d D3        		.byte	-45
 2680 005e D5        		.byte	-43
 2681 005f D7        		.byte	-41
 2682 0060 DA        		.byte	-38
 2683 0061 DC        		.byte	-36
 2684 0062 DE        		.byte	-34
 2685 0063 E0        		.byte	-32
 2686 0064 E2        		.byte	-30
 2687 0065 E4        		.byte	-28
 2688 0066 E6        		.byte	-26
 2689 0067 E8        		.byte	-24
 2690 0068 EA        		.byte	-22
 2691 0069 EB        		.byte	-21
 2692 006a ED        		.byte	-19
 2693 006b EE        		.byte	-18
 2694 006c F0        		.byte	-16
 2695 006d F1        		.byte	-15
 2696 006e F3        		.byte	-13
 2697 006f F4        		.byte	-12
 2698 0070 F5        		.byte	-11
 2699 0071 F6        		.byte	-10
 2700 0072 F8        		.byte	-8
 2701 0073 F9        		.byte	-7
 2702 0074 FA        		.byte	-6
 2703 0075 FA        		.byte	-6
 2704 0076 FB        		.byte	-5
 2705 0077 FC        		.byte	-4
 2706 0078 FD        		.byte	-3
 2707 0079 FD        		.byte	-3
 2708 007a FE        		.byte	-2
 2709 007b FE        		.byte	-2
 2710 007c FE        		.byte	-2
 2711 007d FF        		.byte	-1
 2712 007e FF        		.byte	-1
 2713 007f FF        		.byte	-1
 2714 0080 FF        		.byte	-1
 2715 0081 FF        		.byte	-1
 2716 0082 FF        		.byte	-1
 2717 0083 FF        		.byte	-1
 2718 0084 FE        		.byte	-2
 2719 0085 FE        		.byte	-2
 2720 0086 FE        		.byte	-2
 2721 0087 FD        		.byte	-3
 2722 0088 FD        		.byte	-3
 2723 0089 FC        		.byte	-4
 2724 008a FB        		.byte	-5
 2725 008b FA        		.byte	-6
 2726 008c FA        		.byte	-6
 2727 008d F9        		.byte	-7
 2728 008e F8        		.byte	-8
 2729 008f F6        		.byte	-10
 2730 0090 F5        		.byte	-11
 2731 0091 F4        		.byte	-12
 2732 0092 F3        		.byte	-13
 2733 0093 F1        		.byte	-15
 2734 0094 F0        		.byte	-16
 2735 0095 EE        		.byte	-18
 2736 0096 ED        		.byte	-19
 2737 0097 EB        		.byte	-21
 2738 0098 EA        		.byte	-22
 2739 0099 E8        		.byte	-24
 2740 009a E6        		.byte	-26
 2741 009b E4        		.byte	-28
 2742 009c E2        		.byte	-30
 2743 009d E0        		.byte	-32
 2744 009e DE        		.byte	-34
 2745 009f DC        		.byte	-36
 2746 00a0 DA        		.byte	-38
 2747 00a1 D7        		.byte	-41
 2748 00a2 D5        		.byte	-43
 2749 00a3 D3        		.byte	-45
 2750 00a4 D0        		.byte	-48
 2751 00a5 CE        		.byte	-50
 2752 00a6 CB        		.byte	-53
 2753 00a7 C9        		.byte	-55
 2754 00a8 C6        		.byte	-58
 2755 00a9 C4        		.byte	-60
 2756 00aa C1        		.byte	-63
 2757 00ab BE        		.byte	-66
 2758 00ac BC        		.byte	-68
 2759 00ad B9        		.byte	-71
 2760 00ae B6        		.byte	-74
 2761 00af B3        		.byte	-77
 2762 00b0 B0        		.byte	-80
 2763 00b1 AD        		.byte	-83
 2764 00b2 AA        		.byte	-86
 2765 00b3 A7        		.byte	-89
 2766 00b4 A5        		.byte	-91
 2767 00b5 A2        		.byte	-94
 2768 00b6 9E        		.byte	-98
 2769 00b7 9B        		.byte	-101
 2770 00b8 98        		.byte	-104
 2771 00b9 95        		.byte	-107
 2772 00ba 92        		.byte	-110
 2773 00bb 8F        		.byte	-113
 2774 00bc 8C        		.byte	-116
 2775 00bd 89        		.byte	-119
 2776 00be 86        		.byte	-122
 2777 00bf 83        		.byte	-125
 2778 00c0 80        		.byte	-128
 2779 00c1 7C        		.byte	124
 2780 00c2 79        		.byte	121
 2781 00c3 76        		.byte	118
 2782 00c4 73        		.byte	115
 2783 00c5 70        		.byte	112
 2784 00c6 6D        		.byte	109
 2785 00c7 6A        		.byte	106
 2786 00c8 67        		.byte	103
 2787 00c9 64        		.byte	100
 2788 00ca 61        		.byte	97
 2789 00cb 5D        		.byte	93
 2790 00cc 5A        		.byte	90
 2791 00cd 58        		.byte	88
 2792 00ce 55        		.byte	85
 2793 00cf 52        		.byte	82
 2794 00d0 4F        		.byte	79
 2795 00d1 4C        		.byte	76
 2796 00d2 49        		.byte	73
 2797 00d3 46        		.byte	70
 2798 00d4 43        		.byte	67
 2799 00d5 41        		.byte	65
 2800 00d6 3E        		.byte	62
 2801 00d7 3B        		.byte	59
 2802 00d8 39        		.byte	57
 2803 00d9 36        		.byte	54
 2804 00da 34        		.byte	52
 2805 00db 31        		.byte	49
 2806 00dc 2F        		.byte	47
 2807 00dd 2C        		.byte	44
 2808 00de 2A        		.byte	42
 2809 00df 28        		.byte	40
 2810 00e0 25        		.byte	37
 2811 00e1 23        		.byte	35
 2812 00e2 21        		.byte	33
 2813 00e3 1F        		.byte	31
 2814 00e4 1D        		.byte	29
 2815 00e5 1B        		.byte	27
 2816 00e6 19        		.byte	25
 2817 00e7 17        		.byte	23
 2818 00e8 15        		.byte	21
 2819 00e9 14        		.byte	20
 2820 00ea 12        		.byte	18
 2821 00eb 11        		.byte	17
 2822 00ec 0F        		.byte	15
 2823 00ed 0E        		.byte	14
 2824 00ee 0C        		.byte	12
 2825 00ef 0B        		.byte	11
 2826 00f0 0A        		.byte	10
 2827 00f1 09        		.byte	9
 2828 00f2 07        		.byte	7
 2829 00f3 06        		.byte	6
 2830 00f4 05        		.byte	5
 2831 00f5 05        		.byte	5
 2832 00f6 04        		.byte	4
 2833 00f7 03        		.byte	3
 2834 00f8 02        		.byte	2
 2835 00f9 02        		.byte	2
 2836 00fa 01        		.byte	1
 2837 00fb 01        		.byte	1
 2838 00fc 01        		.byte	1
 2839 00fd 00        		.byte	0
 2840 00fe 00        		.byte	0
 2841 00ff 00        		.byte	0
 2842               	.global	DIM_CURVE
 2843               		.section	.progmem.data.DIM_CURVE,"a",@progbits
 2846               	DIM_CURVE:
 2847 0000 00        		.byte	0
 2848 0001 01        		.byte	1
 2849 0002 01        		.byte	1
 2850 0003 02        		.byte	2
 2851 0004 02        		.byte	2
 2852 0005 02        		.byte	2
 2853 0006 02        		.byte	2
 2854 0007 02        		.byte	2
 2855 0008 02        		.byte	2
 2856 0009 03        		.byte	3
 2857 000a 03        		.byte	3
 2858 000b 03        		.byte	3
 2859 000c 03        		.byte	3
 2860 000d 03        		.byte	3
 2861 000e 03        		.byte	3
 2862 000f 03        		.byte	3
 2863 0010 03        		.byte	3
 2864 0011 03        		.byte	3
 2865 0012 03        		.byte	3
 2866 0013 03        		.byte	3
 2867 0014 03        		.byte	3
 2868 0015 03        		.byte	3
 2869 0016 03        		.byte	3
 2870 0017 04        		.byte	4
 2871 0018 04        		.byte	4
 2872 0019 04        		.byte	4
 2873 001a 04        		.byte	4
 2874 001b 04        		.byte	4
 2875 001c 04        		.byte	4
 2876 001d 04        		.byte	4
 2877 001e 04        		.byte	4
 2878 001f 04        		.byte	4
 2879 0020 04        		.byte	4
 2880 0021 04        		.byte	4
 2881 0022 04        		.byte	4
 2882 0023 05        		.byte	5
 2883 0024 05        		.byte	5
 2884 0025 05        		.byte	5
 2885 0026 05        		.byte	5
 2886 0027 05        		.byte	5
 2887 0028 05        		.byte	5
 2888 0029 05        		.byte	5
 2889 002a 05        		.byte	5
 2890 002b 05        		.byte	5
 2891 002c 05        		.byte	5
 2892 002d 06        		.byte	6
 2893 002e 06        		.byte	6
 2894 002f 06        		.byte	6
 2895 0030 06        		.byte	6
 2896 0031 06        		.byte	6
 2897 0032 06        		.byte	6
 2898 0033 06        		.byte	6
 2899 0034 06        		.byte	6
 2900 0035 07        		.byte	7
 2901 0036 07        		.byte	7
 2902 0037 07        		.byte	7
 2903 0038 07        		.byte	7
 2904 0039 07        		.byte	7
 2905 003a 07        		.byte	7
 2906 003b 07        		.byte	7
 2907 003c 08        		.byte	8
 2908 003d 08        		.byte	8
 2909 003e 08        		.byte	8
 2910 003f 08        		.byte	8
 2911 0040 08        		.byte	8
 2912 0041 08        		.byte	8
 2913 0042 09        		.byte	9
 2914 0043 09        		.byte	9
 2915 0044 09        		.byte	9
 2916 0045 09        		.byte	9
 2917 0046 09        		.byte	9
 2918 0047 09        		.byte	9
 2919 0048 0A        		.byte	10
 2920 0049 0A        		.byte	10
 2921 004a 0A        		.byte	10
 2922 004b 0A        		.byte	10
 2923 004c 0A        		.byte	10
 2924 004d 0B        		.byte	11
 2925 004e 0B        		.byte	11
 2926 004f 0B        		.byte	11
 2927 0050 0B        		.byte	11
 2928 0051 0B        		.byte	11
 2929 0052 0C        		.byte	12
 2930 0053 0C        		.byte	12
 2931 0054 0C        		.byte	12
 2932 0055 0C        		.byte	12
 2933 0056 0C        		.byte	12
 2934 0057 0D        		.byte	13
 2935 0058 0D        		.byte	13
 2936 0059 0D        		.byte	13
 2937 005a 0D        		.byte	13
 2938 005b 0E        		.byte	14
 2939 005c 0E        		.byte	14
 2940 005d 0E        		.byte	14
 2941 005e 0E        		.byte	14
 2942 005f 0F        		.byte	15
 2943 0060 0F        		.byte	15
 2944 0061 0F        		.byte	15
 2945 0062 10        		.byte	16
 2946 0063 10        		.byte	16
 2947 0064 10        		.byte	16
 2948 0065 10        		.byte	16
 2949 0066 11        		.byte	17
 2950 0067 11        		.byte	17
 2951 0068 11        		.byte	17
 2952 0069 12        		.byte	18
 2953 006a 12        		.byte	18
 2954 006b 12        		.byte	18
 2955 006c 13        		.byte	19
 2956 006d 13        		.byte	19
 2957 006e 13        		.byte	19
 2958 006f 14        		.byte	20
 2959 0070 14        		.byte	20
 2960 0071 14        		.byte	20
 2961 0072 15        		.byte	21
 2962 0073 15        		.byte	21
 2963 0074 16        		.byte	22
 2964 0075 16        		.byte	22
 2965 0076 16        		.byte	22
 2966 0077 17        		.byte	23
 2967 0078 17        		.byte	23
 2968 0079 18        		.byte	24
 2969 007a 18        		.byte	24
 2970 007b 19        		.byte	25
 2971 007c 19        		.byte	25
 2972 007d 19        		.byte	25
 2973 007e 1A        		.byte	26
 2974 007f 1A        		.byte	26
 2975 0080 1B        		.byte	27
 2976 0081 1B        		.byte	27
 2977 0082 1C        		.byte	28
 2978 0083 1C        		.byte	28
 2979 0084 1D        		.byte	29
 2980 0085 1D        		.byte	29
 2981 0086 1E        		.byte	30
 2982 0087 1E        		.byte	30
 2983 0088 1F        		.byte	31
 2984 0089 20        		.byte	32
 2985 008a 20        		.byte	32
 2986 008b 21        		.byte	33
 2987 008c 21        		.byte	33
 2988 008d 22        		.byte	34
 2989 008e 23        		.byte	35
 2990 008f 23        		.byte	35
 2991 0090 24        		.byte	36
 2992 0091 24        		.byte	36
 2993 0092 25        		.byte	37
 2994 0093 26        		.byte	38
 2995 0094 26        		.byte	38
 2996 0095 27        		.byte	39
 2997 0096 28        		.byte	40
 2998 0097 28        		.byte	40
 2999 0098 29        		.byte	41
 3000 0099 2A        		.byte	42
 3001 009a 2B        		.byte	43
 3002 009b 2B        		.byte	43
 3003 009c 2C        		.byte	44
 3004 009d 2D        		.byte	45
 3005 009e 2E        		.byte	46
 3006 009f 2F        		.byte	47
 3007 00a0 30        		.byte	48
 3008 00a1 30        		.byte	48
 3009 00a2 31        		.byte	49
 3010 00a3 32        		.byte	50
 3011 00a4 33        		.byte	51
 3012 00a5 34        		.byte	52
 3013 00a6 35        		.byte	53
 3014 00a7 36        		.byte	54
 3015 00a8 37        		.byte	55
 3016 00a9 38        		.byte	56
 3017 00aa 39        		.byte	57
 3018 00ab 3A        		.byte	58
 3019 00ac 3B        		.byte	59
 3020 00ad 3C        		.byte	60
 3021 00ae 3D        		.byte	61
 3022 00af 3E        		.byte	62
 3023 00b0 3F        		.byte	63
 3024 00b1 40        		.byte	64
 3025 00b2 41        		.byte	65
 3026 00b3 42        		.byte	66
 3027 00b4 44        		.byte	68
 3028 00b5 45        		.byte	69
 3029 00b6 46        		.byte	70
 3030 00b7 47        		.byte	71
 3031 00b8 49        		.byte	73
 3032 00b9 4A        		.byte	74
 3033 00ba 4B        		.byte	75
 3034 00bb 4C        		.byte	76
 3035 00bc 4E        		.byte	78
 3036 00bd 4F        		.byte	79
 3037 00be 51        		.byte	81
 3038 00bf 52        		.byte	82
 3039 00c0 53        		.byte	83
 3040 00c1 55        		.byte	85
 3041 00c2 56        		.byte	86
 3042 00c3 58        		.byte	88
 3043 00c4 5A        		.byte	90
 3044 00c5 5B        		.byte	91
 3045 00c6 5D        		.byte	93
 3046 00c7 5E        		.byte	94
 3047 00c8 60        		.byte	96
 3048 00c9 62        		.byte	98
 3049 00ca 63        		.byte	99
 3050 00cb 65        		.byte	101
 3051 00cc 67        		.byte	103
 3052 00cd 69        		.byte	105
 3053 00ce 6B        		.byte	107
 3054 00cf 6D        		.byte	109
 3055 00d0 6E        		.byte	110
 3056 00d1 70        		.byte	112
 3057 00d2 72        		.byte	114
 3058 00d3 74        		.byte	116
 3059 00d4 76        		.byte	118
 3060 00d5 79        		.byte	121
 3061 00d6 7B        		.byte	123
 3062 00d7 7D        		.byte	125
 3063 00d8 7F        		.byte	127
 3064 00d9 81        		.byte	-127
 3065 00da 84        		.byte	-124
 3066 00db 86        		.byte	-122
 3067 00dc 88        		.byte	-120
 3068 00dd 8B        		.byte	-117
 3069 00de 8D        		.byte	-115
 3070 00df 90        		.byte	-112
 3071 00e0 92        		.byte	-110
 3072 00e1 95        		.byte	-107
 3073 00e2 97        		.byte	-105
 3074 00e3 9A        		.byte	-102
 3075 00e4 9D        		.byte	-99
 3076 00e5 9F        		.byte	-97
 3077 00e6 A2        		.byte	-94
 3078 00e7 A5        		.byte	-91
 3079 00e8 A8        		.byte	-88
 3080 00e9 AB        		.byte	-85
 3081 00ea AE        		.byte	-82
 3082 00eb B1        		.byte	-79
 3083 00ec B4        		.byte	-76
 3084 00ed B7        		.byte	-73
 3085 00ee BA        		.byte	-70
 3086 00ef BE        		.byte	-66
 3087 00f0 C1        		.byte	-63
 3088 00f1 C4        		.byte	-60
 3089 00f2 C8        		.byte	-56
 3090 00f3 CB        		.byte	-53
 3091 00f4 CF        		.byte	-49
 3092 00f5 D3        		.byte	-45
 3093 00f6 D6        		.byte	-42
 3094 00f7 DA        		.byte	-38
 3095 00f8 DE        		.byte	-34
 3096 00f9 E2        		.byte	-30
 3097 00fa E6        		.byte	-26
 3098 00fb EA        		.byte	-22
 3099 00fc EE        		.byte	-18
 3100 00fd F2        		.byte	-14
 3101 00fe F8        		.byte	-8
 3102 00ff FF        		.byte	-1
 3103               		.section	.bss.rgblight_timer_is_init.1996,"aw",@nobits
 3106               	rgblight_timer_is_init.1996:
 3107 0000 00        		.zero	1
 3108               		.section	.bss.last_timer.2016,"aw",@nobits
 3111               	last_timer.2016:
 3112 0000 0000      		.zero	2
 3113               		.section	.bss.pos.2015,"aw",@nobits
 3116               	pos.2015:
 3117 0000 00        		.zero	1
 3118               		.section	.bss.last_timer.2027,"aw",@nobits
 3121               	last_timer.2027:
 3122 0000 0000      		.zero	2
 3123               		.section	.bss.current_hue.2026,"aw",@nobits
 3126               	current_hue.2026:
 3127 0000 0000      		.zero	2
 3128               		.section	.bss.last_timer.2035,"aw",@nobits
 3131               	last_timer.2035:
 3132 0000 0000      		.zero	2
 3133               		.section	.bss.current_hue.2034,"aw",@nobits
 3136               	current_hue.2034:
 3137 0000 0000      		.zero	2
 3138               		.section	.bss.last_timer.2048,"aw",@nobits
 3141               	last_timer.2048:
 3142 0000 0000      		.zero	2
 3143               		.section	.bss.pos.2047,"aw",@nobits
 3146               	pos.2047:
 3147 0000 00        		.zero	1
 3148               		.section	.bss.last_timer.2066,"aw",@nobits
 3151               	last_timer.2066:
 3152 0000 0000      		.zero	2
 3153               		.section	.bss.pos.2065,"aw",@nobits
 3156               	pos.2065:
 3157 0000 00        		.zero	1
 3158               		.section	.data.increament.2072,"aw",@progbits
 3161               	increament.2072:
 3162 0000 FF        		.byte	-1
 3163               		.text
 3164               	.Letext0:
 3165               		.file 3 "d:\\applications\\keyboard\\avr-gcc-4.7.2-mingw32\\bin\\../lib/gcc/avr/4.7.2/../../../../
 3166               		.file 4 "light_ws2812.h"
 3167               		.file 5 "rgblight.h"
 3168               		.file 6 "../../tmk_core/common/debug.h"
 3169               		.file 7 "d:\\applications\\keyboard\\avr-gcc-4.7.2-mingw32\\bin\\../lib/gcc/avr/4.7.2/../../../../
 3170               		.file 8 "../../tmk_core/common/timer.h"
 3171               		.file 9 "../../tmk_core/common/eeconfig.h"
DEFINED SYMBOLS
                            *ABS*:00000000 rgblight.c
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:2      *ABS*:0000003e __SP_H__
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:3      *ABS*:0000003d __SP_L__
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:4      *ABS*:0000003f __SREG__
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:6      *ABS*:00000001 __zero_reg__
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:13     .text.setrgb:00000000 setrgb
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:37     .text.sethsv:00000000 sethsv
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:2846   .progmem.data.DIM_CURVE:00000000 DIM_CURVE
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:377    .text.eeconfig_read_rgblight:00000000 eeconfig_read_rgblight
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:396    .text.eeconfig_write_rgblight:00000000 eeconfig_write_rgblight
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:418    .text.eeconfig_write_rgblight_default:00000000 eeconfig_write_rgblight_default
                            *COM*:00000004 rgblight_config
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:454    .text.eeconfig_debug_rgblight:00000000 eeconfig_debug_rgblight
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:469    .text.rgblight_set:00000000 rgblight_set
                            *COM*:00000018 led
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:521    .text.rgblight_setrgb:00000000 rgblight_setrgb
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:563    .text.rgblight_sethsv_noeeprom:00000000 rgblight_sethsv_noeeprom
                            *COM*:00000004 inmem_config
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:684    .text.rgblight_sethsv:00000000 rgblight_sethsv
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:812    .text.rgblight_decrease_val:00000000 rgblight_decrease_val
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:857    .text.rgblight_increase_val:00000000 rgblight_increase_val
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:903    .text.rgblight_decrease_sat:00000000 rgblight_decrease_sat
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:948    .text.rgblight_increase_sat:00000000 rgblight_increase_sat
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:994    .text.rgblight_decrease_hue:00000000 rgblight_decrease_hue
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:1041   .text.rgblight_increase_hue:00000000 rgblight_increase_hue
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:1078   .text.rgblight_timer_init:00000000 rgblight_timer_init
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:3106   .bss.rgblight_timer_is_init.1996:00000000 rgblight_timer_is_init.1996
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:1122   .text.rgblight_timer_enable:00000000 rgblight_timer_enable
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:1143   .text.rgblight_timer_disable:00000000 rgblight_timer_disable
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:1164   .text.rgblight_mode:00000000 rgblight_mode
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:1253   .text.rgblight_step:00000000 rgblight_step
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:1283   .text.rgblight_pre:00000000 rgblight_pre
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:1306   .text.rgblight_decrease:00000000 rgblight_decrease
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:1337   .text.rgblight_increase:00000000 rgblight_increase
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:1368   .text.rgblight_init:00000000 rgblight_init
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:2535   .bss.rgblight_inited:00000000 rgblight_inited
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:1436   .text.rgblight_toggle:00000000 rgblight_toggle
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:1495   .text.rgblight_timer_toggle:00000000 rgblight_timer_toggle
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:1517   .text.rgblight_effect_breathing:00000000 rgblight_effect_breathing
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:3111   .bss.last_timer.2016:00000000 last_timer.2016
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:2576   .progmem.data.RGBLED_BREATHING_INTERVALS:00000000 RGBLED_BREATHING_INTERVALS
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:3116   .bss.pos.2015:00000000 pos.2015
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:2585   .progmem.data.RGBLED_BREATHING_TABLE:00000000 RGBLED_BREATHING_TABLE
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:1604   .text.rgblight_effect_rainbow_mood:00000000 rgblight_effect_rainbow_mood
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:3121   .bss.last_timer.2027:00000000 last_timer.2027
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:2568   .progmem.data.RGBLED_RAINBOW_MOOD_INTERVALS:00000000 RGBLED_RAINBOW_MOOD_INTERVALS
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:3126   .bss.current_hue.2026:00000000 current_hue.2026
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:1674   .text.rgblight_effect_rainbow_swirl:00000000 rgblight_effect_rainbow_swirl
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:3131   .bss.last_timer.2035:00000000 last_timer.2035
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:3136   .bss.current_hue.2034:00000000 current_hue.2034
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:1822   .text.rgblight_effect_snake:00000000 rgblight_effect_snake
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:3141   .bss.last_timer.2048:00000000 last_timer.2048
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:2552   .progmem.data.RGBLED_SNAKE_INTERVALS:00000000 RGBLED_SNAKE_INTERVALS
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:3146   .bss.pos.2047:00000000 pos.2047
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:2072   .text.rgblight_effect_knight:00000000 rgblight_effect_knight
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:3151   .bss.last_timer.2066:00000000 last_timer.2066
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:2544   .progmem.data.RGBLED_KNIGHT_INTERVALS:00000000 RGBLED_KNIGHT_INTERVALS
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:3161   .data.increament.2072:00000000 increament.2072
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:3156   .bss.pos.2065:00000000 pos.2065
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:2380   .text.__vector_32:00000000 __vector_32
C:\Users\tiny\AppData\Local\Temp\ccBrayxi.s:2560   .progmem.data.RGBLED_RAINBOW_SWIRL_INTERVALS:00000000 RGBLED_RAINBOW_SWIRL_INTERVALS

UNDEFINED SYMBOLS
__udivmodhi4
__eerd_dword_m32u4
__eewr_dword_m32u4
ws2812_setleds
__divmodhi4
debug_config
eeconfig_is_enabled
eeconfig_init
timer_elapsed
timer_read
__do_copy_data
__do_clear_bss
