   1               		.file	"matrix.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.matrix_init_kb,"ax",@progbits
  11               		.weak	matrix_init_kb
  13               	matrix_init_kb:
  14               	.LFB6:
  15               		.file 1 "../../quantum/matrix.c"
   1:../../quantum/matrix.c **** /*
   2:../../quantum/matrix.c **** Copyright 2012 Jun Wako 
   3:../../quantum/matrix.c **** Generated by planckkeyboard.com (2014 Jack Humbert)
   4:../../quantum/matrix.c **** 
   5:../../quantum/matrix.c **** This program is free software: you can redistribute it and/or modify
   6:../../quantum/matrix.c **** it under the terms of the GNU General Public License as published by
   7:../../quantum/matrix.c **** the Free Software Foundation, either version 2 of the License, or
   8:../../quantum/matrix.c **** (at your option) any later version.
   9:../../quantum/matrix.c **** 
  10:../../quantum/matrix.c **** This program is distributed in the hope that it will be useful,
  11:../../quantum/matrix.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:../../quantum/matrix.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:../../quantum/matrix.c **** GNU General Public License for more details.
  14:../../quantum/matrix.c **** 
  15:../../quantum/matrix.c **** You should have received a copy of the GNU General Public License
  16:../../quantum/matrix.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17:../../quantum/matrix.c **** */
  18:../../quantum/matrix.c **** 
  19:../../quantum/matrix.c **** /*
  20:../../quantum/matrix.c ****  * scan matrix
  21:../../quantum/matrix.c ****  */
  22:../../quantum/matrix.c **** #include <stdint.h>
  23:../../quantum/matrix.c **** #include <stdbool.h>
  24:../../quantum/matrix.c **** #include <avr/io.h>
  25:../../quantum/matrix.c **** #include <util/delay.h>
  26:../../quantum/matrix.c **** #include "print.h"
  27:../../quantum/matrix.c **** #include "debug.h"
  28:../../quantum/matrix.c **** #include "util.h"
  29:../../quantum/matrix.c **** #include "matrix.h"
  30:../../quantum/matrix.c **** 
  31:../../quantum/matrix.c **** #ifndef DEBOUNCE
  32:../../quantum/matrix.c **** #   define DEBOUNCE 10
  33:../../quantum/matrix.c **** #endif
  34:../../quantum/matrix.c **** static uint8_t debouncing = DEBOUNCE;
  35:../../quantum/matrix.c **** 
  36:../../quantum/matrix.c **** /* matrix state(1:on, 0:off) */
  37:../../quantum/matrix.c **** static matrix_row_t matrix[MATRIX_ROWS];
  38:../../quantum/matrix.c **** static matrix_row_t matrix_debouncing[MATRIX_ROWS];
  39:../../quantum/matrix.c **** 
  40:../../quantum/matrix.c **** #if DIODE_DIRECTION == ROW2COL
  41:../../quantum/matrix.c ****     static matrix_row_t matrix_reversed[MATRIX_COLS];
  42:../../quantum/matrix.c ****     static matrix_row_t matrix_reversed_debouncing[MATRIX_COLS];
  43:../../quantum/matrix.c **** #endif
  44:../../quantum/matrix.c **** 
  45:../../quantum/matrix.c **** static matrix_row_t read_cols(void);
  46:../../quantum/matrix.c **** static void init_cols(void);
  47:../../quantum/matrix.c **** static void unselect_rows(void);
  48:../../quantum/matrix.c **** static void select_row(uint8_t row);
  49:../../quantum/matrix.c **** 
  50:../../quantum/matrix.c **** __attribute__ ((weak))
  51:../../quantum/matrix.c **** void * matrix_init_kb(void) {
  16               		.loc 1 51 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  52:../../quantum/matrix.c **** 
  53:../../quantum/matrix.c **** };
  22               		.loc 1 53 0
  23 0000 0895      		ret
  24               		.cfi_endproc
  25               	.LFE6:
  27               		.section	.text.matrix_scan_kb,"ax",@progbits
  28               		.weak	matrix_scan_kb
  30               	matrix_scan_kb:
  31               	.LFB7:
  54:../../quantum/matrix.c **** 
  55:../../quantum/matrix.c **** __attribute__ ((weak))
  56:../../quantum/matrix.c **** void * matrix_scan_kb(void) {
  32               		.loc 1 56 0
  33               		.cfi_startproc
  34               	/* prologue: function */
  35               	/* frame size = 0 */
  36               	/* stack size = 0 */
  37               	.L__stack_usage = 0
  57:../../quantum/matrix.c **** 
  58:../../quantum/matrix.c **** };
  38               		.loc 1 58 0
  39 0000 0895      		ret
  40               		.cfi_endproc
  41               	.LFE7:
  43               		.section	.rodata
  44               	.LC0:
  45 0000 4000      		.word	64
  46 0002 4100      		.word	65
  47 0004 4200      		.word	66
  48 0006 4300      		.word	67
  49 0008 4500      		.word	69
  50               		.section	.text.unselect_rows,"ax",@progbits
  52               	unselect_rows:
  53               	.LFB19:
  59:../../quantum/matrix.c **** 
  60:../../quantum/matrix.c **** inline
  61:../../quantum/matrix.c **** uint8_t matrix_rows(void)
  62:../../quantum/matrix.c **** {
  63:../../quantum/matrix.c ****     return MATRIX_ROWS;
  64:../../quantum/matrix.c **** }
  65:../../quantum/matrix.c **** 
  66:../../quantum/matrix.c **** inline
  67:../../quantum/matrix.c **** uint8_t matrix_cols(void)
  68:../../quantum/matrix.c **** {
  69:../../quantum/matrix.c ****     return MATRIX_COLS;
  70:../../quantum/matrix.c **** }
  71:../../quantum/matrix.c **** 
  72:../../quantum/matrix.c **** void matrix_init(void)
  73:../../quantum/matrix.c **** {
  74:../../quantum/matrix.c ****     // To use PORTF disable JTAG with writing JTD bit twice within four cycles.
  75:../../quantum/matrix.c ****     MCUCR |= (1<<JTD);
  76:../../quantum/matrix.c ****     MCUCR |= (1<<JTD);
  77:../../quantum/matrix.c **** 
  78:../../quantum/matrix.c **** 
  79:../../quantum/matrix.c ****     // initialize row and col
  80:../../quantum/matrix.c ****     unselect_rows();
  81:../../quantum/matrix.c ****     init_cols();
  82:../../quantum/matrix.c **** 
  83:../../quantum/matrix.c ****     // initialize matrix state: all keys off
  84:../../quantum/matrix.c ****     for (uint8_t i=0; i < MATRIX_ROWS; i++) {
  85:../../quantum/matrix.c ****         matrix[i] = 0;
  86:../../quantum/matrix.c ****         matrix_debouncing[i] = 0;
  87:../../quantum/matrix.c ****     }
  88:../../quantum/matrix.c **** 
  89:../../quantum/matrix.c ****     if (matrix_init_kb) {
  90:../../quantum/matrix.c ****         (*matrix_init_kb)();
  91:../../quantum/matrix.c ****     }
  92:../../quantum/matrix.c **** }
  93:../../quantum/matrix.c **** 
  94:../../quantum/matrix.c **** 
  95:../../quantum/matrix.c **** uint8_t matrix_scan(void)
  96:../../quantum/matrix.c **** {
  97:../../quantum/matrix.c **** 
  98:../../quantum/matrix.c **** #if DIODE_DIRECTION == COL2ROW
  99:../../quantum/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 100:../../quantum/matrix.c ****         select_row(i);
 101:../../quantum/matrix.c ****         _delay_us(30);  // without this wait read unstable value.
 102:../../quantum/matrix.c ****         matrix_row_t cols = read_cols();
 103:../../quantum/matrix.c ****         if (matrix_debouncing[i] != cols) {
 104:../../quantum/matrix.c ****             matrix_debouncing[i] = cols;
 105:../../quantum/matrix.c ****             if (debouncing) {
 106:../../quantum/matrix.c ****                 debug("bounce!: "); debug_hex(debouncing); debug("\n");
 107:../../quantum/matrix.c ****             }
 108:../../quantum/matrix.c ****             debouncing = DEBOUNCE;
 109:../../quantum/matrix.c ****         }
 110:../../quantum/matrix.c ****         unselect_rows();
 111:../../quantum/matrix.c ****     }
 112:../../quantum/matrix.c **** 
 113:../../quantum/matrix.c ****     if (debouncing) {
 114:../../quantum/matrix.c ****         if (--debouncing) {
 115:../../quantum/matrix.c ****             _delay_ms(1);
 116:../../quantum/matrix.c ****         } else {
 117:../../quantum/matrix.c ****             for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 118:../../quantum/matrix.c ****                 matrix[i] = matrix_debouncing[i];
 119:../../quantum/matrix.c ****             }
 120:../../quantum/matrix.c ****         }
 121:../../quantum/matrix.c ****     }
 122:../../quantum/matrix.c **** #else
 123:../../quantum/matrix.c ****     for (uint8_t i = 0; i < MATRIX_COLS; i++) {
 124:../../quantum/matrix.c ****         select_row(i);
 125:../../quantum/matrix.c ****         _delay_us(30);  // without this wait read unstable value.
 126:../../quantum/matrix.c ****         matrix_row_t rows = read_cols();
 127:../../quantum/matrix.c ****         if (matrix_reversed_debouncing[i] != rows) {
 128:../../quantum/matrix.c ****             matrix_reversed_debouncing[i] = rows;
 129:../../quantum/matrix.c ****             if (debouncing) {
 130:../../quantum/matrix.c ****                 debug("bounce!: "); debug_hex(debouncing); debug("\n");
 131:../../quantum/matrix.c ****             }
 132:../../quantum/matrix.c ****             debouncing = DEBOUNCE;
 133:../../quantum/matrix.c ****         }
 134:../../quantum/matrix.c ****         unselect_rows();
 135:../../quantum/matrix.c ****     }
 136:../../quantum/matrix.c **** 
 137:../../quantum/matrix.c ****     if (debouncing) {
 138:../../quantum/matrix.c ****         if (--debouncing) {
 139:../../quantum/matrix.c ****             _delay_ms(1);
 140:../../quantum/matrix.c ****         } else {
 141:../../quantum/matrix.c ****             for (uint8_t i = 0; i < MATRIX_COLS; i++) {
 142:../../quantum/matrix.c ****                 matrix_reversed[i] = matrix_reversed_debouncing[i];
 143:../../quantum/matrix.c ****             }
 144:../../quantum/matrix.c ****         }
 145:../../quantum/matrix.c ****     }
 146:../../quantum/matrix.c ****     for (uint8_t y = 0; y < MATRIX_ROWS; y++) {
 147:../../quantum/matrix.c ****         matrix_row_t row = 0;
 148:../../quantum/matrix.c ****         for (uint8_t x = 0; x < MATRIX_COLS; x++) {
 149:../../quantum/matrix.c ****             row |= ((matrix_reversed[x] & (1<<y)) >> y) << x;
 150:../../quantum/matrix.c ****         }
 151:../../quantum/matrix.c ****         matrix[y] = row;
 152:../../quantum/matrix.c ****     }
 153:../../quantum/matrix.c **** #endif
 154:../../quantum/matrix.c **** 
 155:../../quantum/matrix.c ****     if (matrix_scan_kb) {
 156:../../quantum/matrix.c ****         (*matrix_scan_kb)();
 157:../../quantum/matrix.c ****     }
 158:../../quantum/matrix.c **** 
 159:../../quantum/matrix.c ****     return 1;
 160:../../quantum/matrix.c **** }
 161:../../quantum/matrix.c **** 
 162:../../quantum/matrix.c **** bool matrix_is_modified(void)
 163:../../quantum/matrix.c **** {
 164:../../quantum/matrix.c ****     if (debouncing) return false;
 165:../../quantum/matrix.c ****     return true;
 166:../../quantum/matrix.c **** }
 167:../../quantum/matrix.c **** 
 168:../../quantum/matrix.c **** inline
 169:../../quantum/matrix.c **** bool matrix_is_on(uint8_t row, uint8_t col)
 170:../../quantum/matrix.c **** {
 171:../../quantum/matrix.c ****     return (matrix[row] & ((matrix_row_t)1<col));
 172:../../quantum/matrix.c **** }
 173:../../quantum/matrix.c **** 
 174:../../quantum/matrix.c **** inline
 175:../../quantum/matrix.c **** matrix_row_t matrix_get_row(uint8_t row)
 176:../../quantum/matrix.c **** {
 177:../../quantum/matrix.c ****     return matrix[row];
 178:../../quantum/matrix.c **** }
 179:../../quantum/matrix.c **** 
 180:../../quantum/matrix.c **** void matrix_print(void)
 181:../../quantum/matrix.c **** {
 182:../../quantum/matrix.c ****     print("\nr/c 0123456789ABCDEF\n");
 183:../../quantum/matrix.c ****     for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 184:../../quantum/matrix.c ****         phex(row); print(": ");
 185:../../quantum/matrix.c ****         pbin_reverse16(matrix_get_row(row));
 186:../../quantum/matrix.c ****         print("\n");
 187:../../quantum/matrix.c ****     }
 188:../../quantum/matrix.c **** }
 189:../../quantum/matrix.c **** 
 190:../../quantum/matrix.c **** uint8_t matrix_key_count(void)
 191:../../quantum/matrix.c **** {
 192:../../quantum/matrix.c ****     uint8_t count = 0;
 193:../../quantum/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 194:../../quantum/matrix.c ****         count += bitpop16(matrix[i]);
 195:../../quantum/matrix.c ****     }
 196:../../quantum/matrix.c ****     return count;
 197:../../quantum/matrix.c **** }
 198:../../quantum/matrix.c **** 
 199:../../quantum/matrix.c **** static void init_cols(void)
 200:../../quantum/matrix.c **** {
 201:../../quantum/matrix.c ****     int B = 0, C = 0, D = 0, E = 0, F = 0;
 202:../../quantum/matrix.c **** 
 203:../../quantum/matrix.c **** #if DIODE_DIRECTION == COL2ROW
 204:../../quantum/matrix.c ****     for(int x = 0; x < MATRIX_COLS; x++) {
 205:../../quantum/matrix.c ****         int col = COLS[x];
 206:../../quantum/matrix.c **** #else
 207:../../quantum/matrix.c ****     for(int x = 0; x < MATRIX_ROWS; x++) {
 208:../../quantum/matrix.c ****         int col = ROWS[x];
 209:../../quantum/matrix.c **** #endif
 210:../../quantum/matrix.c ****         if ((col & 0xF0) == 0x20) { 
 211:../../quantum/matrix.c ****             B |= (1<<(col & 0x0F)); 
 212:../../quantum/matrix.c ****         } else if ((col & 0xF0) == 0x30) { 
 213:../../quantum/matrix.c ****             C |= (1<<(col & 0x0F)); 
 214:../../quantum/matrix.c ****         } else if ((col & 0xF0) == 0x40) { 
 215:../../quantum/matrix.c ****             D |= (1<<(col & 0x0F)); 
 216:../../quantum/matrix.c ****         } else if ((col & 0xF0) == 0x50) { 
 217:../../quantum/matrix.c ****             E |= (1<<(col & 0x0F)); 
 218:../../quantum/matrix.c ****         } else if ((col & 0xF0) == 0x60) { 
 219:../../quantum/matrix.c ****             F |= (1<<(col & 0x0F)); 
 220:../../quantum/matrix.c ****         } 
 221:../../quantum/matrix.c ****     }
 222:../../quantum/matrix.c ****     DDRB &= ~(B); PORTB |= (B);
 223:../../quantum/matrix.c ****     DDRC &= ~(C); PORTC |= (C); 
 224:../../quantum/matrix.c ****     DDRD &= ~(D); PORTD |= (D);
 225:../../quantum/matrix.c ****     DDRE &= ~(E); PORTE |= (E);
 226:../../quantum/matrix.c ****     DDRF &= ~(F); PORTF |= (F);
 227:../../quantum/matrix.c **** }
 228:../../quantum/matrix.c **** 
 229:../../quantum/matrix.c **** static matrix_row_t read_cols(void)
 230:../../quantum/matrix.c **** {
 231:../../quantum/matrix.c ****     matrix_row_t result = 0;
 232:../../quantum/matrix.c **** 
 233:../../quantum/matrix.c **** #if DIODE_DIRECTION == COL2ROW
 234:../../quantum/matrix.c ****     for(int x = 0; x < MATRIX_COLS; x++) {     
 235:../../quantum/matrix.c ****         int col = COLS[x];
 236:../../quantum/matrix.c **** #else
 237:../../quantum/matrix.c ****     for(int x = 0; x < MATRIX_ROWS; x++) {
 238:../../quantum/matrix.c ****         int col = ROWS[x];
 239:../../quantum/matrix.c **** #endif
 240:../../quantum/matrix.c **** 
 241:../../quantum/matrix.c ****         if ((col & 0xF0) == 0x20) { 
 242:../../quantum/matrix.c ****             result |= (PINB&(1<<(col & 0x0F)) ? 0 : (1<<x)); 
 243:../../quantum/matrix.c ****         } else if ((col & 0xF0) == 0x30) { 
 244:../../quantum/matrix.c ****             result |= (PINC&(1<<(col & 0x0F)) ? 0 : (1<<x)); 
 245:../../quantum/matrix.c ****         } else if ((col & 0xF0) == 0x40) { 
 246:../../quantum/matrix.c ****             result |= (PIND&(1<<(col & 0x0F)) ? 0 : (1<<x)); 
 247:../../quantum/matrix.c ****         } else if ((col & 0xF0) == 0x50) { 
 248:../../quantum/matrix.c ****             result |= (PINE&(1<<(col & 0x0F)) ? 0 : (1<<x)); 
 249:../../quantum/matrix.c ****         } else if ((col & 0xF0) == 0x60) { 
 250:../../quantum/matrix.c ****             result |= (PINF&(1<<(col & 0x0F)) ? 0 : (1<<x)); 
 251:../../quantum/matrix.c ****         } 
 252:../../quantum/matrix.c ****     }
 253:../../quantum/matrix.c ****     return result;
 254:../../quantum/matrix.c **** }
 255:../../quantum/matrix.c **** 
 256:../../quantum/matrix.c **** static void unselect_rows(void)
 257:../../quantum/matrix.c **** {
  54               		.loc 1 257 0
  55               		.cfi_startproc
  56 0000 5F92      		push r5
  57               	.LCFI0:
  58               		.cfi_def_cfa_offset 3
  59               		.cfi_offset 5, -2
  60 0002 6F92      		push r6
  61               	.LCFI1:
  62               		.cfi_def_cfa_offset 4
  63               		.cfi_offset 6, -3
  64 0004 7F92      		push r7
  65               	.LCFI2:
  66               		.cfi_def_cfa_offset 5
  67               		.cfi_offset 7, -4
  68 0006 8F92      		push r8
  69               	.LCFI3:
  70               		.cfi_def_cfa_offset 6
  71               		.cfi_offset 8, -5
  72 0008 9F92      		push r9
  73               	.LCFI4:
  74               		.cfi_def_cfa_offset 7
  75               		.cfi_offset 9, -6
  76 000a AF92      		push r10
  77               	.LCFI5:
  78               		.cfi_def_cfa_offset 8
  79               		.cfi_offset 10, -7
  80 000c BF92      		push r11
  81               	.LCFI6:
  82               		.cfi_def_cfa_offset 9
  83               		.cfi_offset 11, -8
  84 000e CF92      		push r12
  85               	.LCFI7:
  86               		.cfi_def_cfa_offset 10
  87               		.cfi_offset 12, -9
  88 0010 DF92      		push r13
  89               	.LCFI8:
  90               		.cfi_def_cfa_offset 11
  91               		.cfi_offset 13, -10
  92 0012 EF92      		push r14
  93               	.LCFI9:
  94               		.cfi_def_cfa_offset 12
  95               		.cfi_offset 14, -11
  96 0014 FF92      		push r15
  97               	.LCFI10:
  98               		.cfi_def_cfa_offset 13
  99               		.cfi_offset 15, -12
 100 0016 0F93      		push r16
 101               	.LCFI11:
 102               		.cfi_def_cfa_offset 14
 103               		.cfi_offset 16, -13
 104 0018 1F93      		push r17
 105               	.LCFI12:
 106               		.cfi_def_cfa_offset 15
 107               		.cfi_offset 17, -14
 108 001a CF93      		push r28
 109               	.LCFI13:
 110               		.cfi_def_cfa_offset 16
 111               		.cfi_offset 28, -15
 112 001c DF93      		push r29
 113               	.LCFI14:
 114               		.cfi_def_cfa_offset 17
 115               		.cfi_offset 29, -16
 116 001e CDB7      		in r28,__SP_L__
 117 0020 DEB7      		in r29,__SP_H__
 118               	.LCFI15:
 119               		.cfi_def_cfa_register 28
 120 0022 2A97      		sbiw r28,10
 121               	.LCFI16:
 122               		.cfi_def_cfa_offset 27
 123 0024 0FB6      		in __tmp_reg__,__SREG__
 124 0026 F894      		cli
 125 0028 DEBF      		out __SP_H__,r29
 126 002a 0FBE      		out __SREG__,__tmp_reg__
 127 002c CDBF      		out __SP_L__,r28
 128               	/* prologue: function */
 129               	/* frame size = 10 */
 130               	/* stack size = 25 */
 131               	.L__stack_usage = 25
 132               	.LVL0:
 133 002e 9E01      		movw r18,r28
 134 0030 2F5F      		subi r18,-1
 135 0032 3F4F      		sbci r19,-1
 256:../../quantum/matrix.c **** static void unselect_rows(void)
 136               		.loc 1 256 0
 137 0034 4E01      		movw r8,r28
 138 0036 8BE0      		ldi r24,11
 139 0038 880E      		add r8,r24
 140 003a 911C      		adc r9,__zero_reg__
 258:../../quantum/matrix.c ****     int B = 0, C = 0, D = 0, E = 0, F = 0;
 141               		.loc 1 258 0
 142 003c 60E0      		ldi r22,0
 143 003e 70E0      		ldi r23,0
 144 0040 00E0      		ldi r16,0
 145 0042 10E0      		ldi r17,0
 146 0044 E12C      		mov r14,__zero_reg__
 147 0046 F12C      		mov r15,__zero_reg__
 148 0048 C12C      		mov r12,__zero_reg__
 149 004a D12C      		mov r13,__zero_reg__
 150 004c A12C      		mov r10,__zero_reg__
 151 004e B12C      		mov r11,__zero_reg__
 152               	.LBB9:
 153               	.LBB10:
 259:../../quantum/matrix.c **** 
 260:../../quantum/matrix.c **** #if DIODE_DIRECTION == COL2ROW
 261:../../quantum/matrix.c ****     for(int x = 0; x < MATRIX_ROWS; x++) { 
 262:../../quantum/matrix.c ****         int row = ROWS[x];
 154               		.loc 1 262 0
 155 0050 8AE0      		ldi r24,lo8(10)
 156 0052 782E      		mov r7,r24
 157 0054 622E      		mov r6,r18
 158 0056 532E      		mov r5,r19
 263:../../quantum/matrix.c **** #else
 264:../../quantum/matrix.c ****     for(int x = 0; x < MATRIX_COLS; x++) { 
 265:../../quantum/matrix.c ****         int row = COLS[x];
 266:../../quantum/matrix.c **** #endif
 267:../../quantum/matrix.c ****         if ((row & 0xF0) == 0x20) { 
 268:../../quantum/matrix.c ****             B |= (1<<(row & 0x0F)); 
 269:../../quantum/matrix.c ****         } else if ((row & 0xF0) == 0x30) { 
 270:../../quantum/matrix.c ****             C |= (1<<(row & 0x0F)); 
 271:../../quantum/matrix.c ****         } else if ((row & 0xF0) == 0x40) { 
 272:../../quantum/matrix.c ****             D |= (1<<(row & 0x0F)); 
 273:../../quantum/matrix.c ****         } else if ((row & 0xF0) == 0x50) { 
 274:../../quantum/matrix.c ****             E |= (1<<(row & 0x0F)); 
 275:../../quantum/matrix.c ****         } else if ((row & 0xF0) == 0x60) { 
 276:../../quantum/matrix.c ****             F |= (1<<(row & 0x0F)); 
 159               		.loc 1 276 0
 160 0058 41E0      		ldi r20,lo8(1)
 161 005a 50E0      		ldi r21,0
 162               	.LVL1:
 163               	.L9:
 262:../../quantum/matrix.c ****         int row = ROWS[x];
 164               		.loc 1 262 0
 165 005c E0E0      		ldi r30,lo8(.LC0)
 166 005e F0E0      		ldi r31,hi8(.LC0)
 167 0060 A62D      		mov r26,r6
 168 0062 B52D      		mov r27,r5
 169 0064 872D      		mov r24,r7
 170               		0:
 171 0066 0190      		ld r0,Z+
 172 0068 0D92      		st X+,r0
 173 006a 8A95      		dec r24
 174 006c 01F4      		brne 0b
 175 006e F901      		movw r30,r18
 176 0070 8191      		ld r24,Z+
 177 0072 9191      		ld r25,Z+
 178 0074 9F01      		movw r18,r30
 179               	.LVL2:
 267:../../quantum/matrix.c ****         if ((row & 0xF0) == 0x20) { 
 180               		.loc 1 267 0
 181 0076 FC01      		movw r30,r24
 182 0078 E07F      		andi r30,240
 183 007a FF27      		clr r31
 184 007c E032      		cpi r30,32
 185 007e F105      		cpc r31,__zero_reg__
 186 0080 01F4      		brne .L4
 268:../../quantum/matrix.c ****             B |= (1<<(row & 0x0F)); 
 187               		.loc 1 268 0
 188 0082 8F70      		andi r24,15
 189 0084 9927      		clr r25
 190               	.LVL3:
 191 0086 FA01      		movw r30,r20
 192 0088 00C0      		rjmp 2f
 193               		1:
 194 008a EE0F      		lsl r30
 195 008c FF1F      		rol r31
 196               		2:
 197 008e 8A95      		dec r24
 198 0090 02F4      		brpl 1b
 199 0092 AE2A      		or r10,r30
 200 0094 BF2A      		or r11,r31
 201               	.LVL4:
 202 0096 00C0      		rjmp .L5
 203               	.LVL5:
 204               	.L4:
 269:../../quantum/matrix.c ****         } else if ((row & 0xF0) == 0x30) { 
 205               		.loc 1 269 0
 206 0098 E033      		cpi r30,48
 207 009a F105      		cpc r31,__zero_reg__
 208 009c 01F4      		brne .L6
 270:../../quantum/matrix.c ****             C |= (1<<(row & 0x0F)); 
 209               		.loc 1 270 0
 210 009e 8F70      		andi r24,15
 211 00a0 9927      		clr r25
 212               	.LVL6:
 213 00a2 FA01      		movw r30,r20
 214 00a4 00C0      		rjmp 2f
 215               		1:
 216 00a6 EE0F      		lsl r30
 217 00a8 FF1F      		rol r31
 218               		2:
 219 00aa 8A95      		dec r24
 220 00ac 02F4      		brpl 1b
 221 00ae CE2A      		or r12,r30
 222 00b0 DF2A      		or r13,r31
 223               	.LVL7:
 224 00b2 00C0      		rjmp .L5
 225               	.LVL8:
 226               	.L6:
 271:../../quantum/matrix.c ****         } else if ((row & 0xF0) == 0x40) { 
 227               		.loc 1 271 0
 228 00b4 E034      		cpi r30,64
 229 00b6 F105      		cpc r31,__zero_reg__
 230 00b8 01F4      		brne .L7
 272:../../quantum/matrix.c ****             D |= (1<<(row & 0x0F)); 
 231               		.loc 1 272 0
 232 00ba 8F70      		andi r24,15
 233 00bc 9927      		clr r25
 234               	.LVL9:
 235 00be FA01      		movw r30,r20
 236 00c0 00C0      		rjmp 2f
 237               		1:
 238 00c2 EE0F      		lsl r30
 239 00c4 FF1F      		rol r31
 240               		2:
 241 00c6 8A95      		dec r24
 242 00c8 02F4      		brpl 1b
 243 00ca EE2A      		or r14,r30
 244 00cc FF2A      		or r15,r31
 245               	.LVL10:
 246 00ce 00C0      		rjmp .L5
 247               	.LVL11:
 248               	.L7:
 273:../../quantum/matrix.c ****         } else if ((row & 0xF0) == 0x50) { 
 249               		.loc 1 273 0
 250 00d0 E035      		cpi r30,80
 251 00d2 F105      		cpc r31,__zero_reg__
 252 00d4 01F4      		brne .L8
 274:../../quantum/matrix.c ****             E |= (1<<(row & 0x0F)); 
 253               		.loc 1 274 0
 254 00d6 8F70      		andi r24,15
 255 00d8 9927      		clr r25
 256               	.LVL12:
 257 00da FA01      		movw r30,r20
 258 00dc 00C0      		rjmp 2f
 259               		1:
 260 00de EE0F      		lsl r30
 261 00e0 FF1F      		rol r31
 262               		2:
 263 00e2 8A95      		dec r24
 264 00e4 02F4      		brpl 1b
 265 00e6 0E2B      		or r16,r30
 266 00e8 1F2B      		or r17,r31
 267               	.LVL13:
 268 00ea 00C0      		rjmp .L5
 269               	.LVL14:
 270               	.L8:
 275:../../quantum/matrix.c ****         } else if ((row & 0xF0) == 0x60) { 
 271               		.loc 1 275 0
 272 00ec E036      		cpi r30,96
 273 00ee F105      		cpc r31,__zero_reg__
 274 00f0 01F4      		brne .L5
 275               		.loc 1 276 0
 276 00f2 8F70      		andi r24,15
 277 00f4 9927      		clr r25
 278               	.LVL15:
 279 00f6 FA01      		movw r30,r20
 280 00f8 00C0      		rjmp 2f
 281               		1:
 282 00fa EE0F      		lsl r30
 283 00fc FF1F      		rol r31
 284               		2:
 285 00fe 8A95      		dec r24
 286 0100 02F4      		brpl 1b
 287 0102 6E2B      		or r22,r30
 288 0104 7F2B      		or r23,r31
 289               	.LVL16:
 290               	.L5:
 291               	.LBE10:
 261:../../quantum/matrix.c ****     for(int x = 0; x < MATRIX_ROWS; x++) { 
 292               		.loc 1 261 0
 293 0106 2815      		cp r18,r8
 294 0108 3905      		cpc r19,r9
 295 010a 01F0      		breq .+2
 296 010c 00C0      		rjmp .L9
 297               	.LBE9:
 277:../../quantum/matrix.c ****         } 
 278:../../quantum/matrix.c ****     }
 279:../../quantum/matrix.c ****     DDRB &= ~(B); PORTB |= (B);
 298               		.loc 1 279 0
 299 010e 94B1      		in r25,0x4
 300 0110 8A2D      		mov r24,r10
 301 0112 8095      		com r24
 302 0114 8923      		and r24,r25
 303 0116 84B9      		out 0x4,r24
 304 0118 85B1      		in r24,0x5
 305 011a 8A29      		or r24,r10
 306 011c 85B9      		out 0x5,r24
 280:../../quantum/matrix.c ****     DDRC &= ~(C); PORTC |= (C); 
 307               		.loc 1 280 0
 308 011e 97B1      		in r25,0x7
 309 0120 8C2D      		mov r24,r12
 310 0122 8095      		com r24
 311 0124 8923      		and r24,r25
 312 0126 87B9      		out 0x7,r24
 313 0128 88B1      		in r24,0x8
 314 012a 8C29      		or r24,r12
 315 012c 88B9      		out 0x8,r24
 281:../../quantum/matrix.c ****     DDRD &= ~(D); PORTD |= (D);
 316               		.loc 1 281 0
 317 012e 9AB1      		in r25,0xa
 318 0130 8E2D      		mov r24,r14
 319 0132 8095      		com r24
 320 0134 8923      		and r24,r25
 321 0136 8AB9      		out 0xa,r24
 322 0138 8BB1      		in r24,0xb
 323 013a 8E29      		or r24,r14
 324 013c 8BB9      		out 0xb,r24
 282:../../quantum/matrix.c ****     DDRE &= ~(E); PORTE |= (E);
 325               		.loc 1 282 0
 326 013e 9DB1      		in r25,0xd
 327 0140 802F      		mov r24,r16
 328 0142 8095      		com r24
 329 0144 8923      		and r24,r25
 330 0146 8DB9      		out 0xd,r24
 331 0148 8EB1      		in r24,0xe
 332 014a 802B      		or r24,r16
 333 014c 8EB9      		out 0xe,r24
 283:../../quantum/matrix.c ****     DDRF &= ~(F); PORTF |= (F);
 334               		.loc 1 283 0
 335 014e 90B3      		in r25,0x10
 336 0150 862F      		mov r24,r22
 337 0152 8095      		com r24
 338 0154 8923      		and r24,r25
 339 0156 80BB      		out 0x10,r24
 340 0158 81B3      		in r24,0x11
 341 015a 862B      		or r24,r22
 342 015c 81BB      		out 0x11,r24
 343               	/* epilogue start */
 284:../../quantum/matrix.c **** }
 344               		.loc 1 284 0
 345 015e 2A96      		adiw r28,10
 346 0160 0FB6      		in __tmp_reg__,__SREG__
 347 0162 F894      		cli
 348 0164 DEBF      		out __SP_H__,r29
 349 0166 0FBE      		out __SREG__,__tmp_reg__
 350 0168 CDBF      		out __SP_L__,r28
 351 016a DF91      		pop r29
 352 016c CF91      		pop r28
 353 016e 1F91      		pop r17
 354 0170 0F91      		pop r16
 355               	.LVL17:
 356 0172 FF90      		pop r15
 357 0174 EF90      		pop r14
 358               	.LVL18:
 359 0176 DF90      		pop r13
 360 0178 CF90      		pop r12
 361               	.LVL19:
 362 017a BF90      		pop r11
 363 017c AF90      		pop r10
 364               	.LVL20:
 365 017e 9F90      		pop r9
 366 0180 8F90      		pop r8
 367 0182 7F90      		pop r7
 368 0184 6F90      		pop r6
 369 0186 5F90      		pop r5
 370 0188 0895      		ret
 371               		.cfi_endproc
 372               	.LFE19:
 374               		.section	.text.matrix_rows,"ax",@progbits
 375               	.global	matrix_rows
 377               	matrix_rows:
 378               	.LFB8:
  62:../../quantum/matrix.c **** {
 379               		.loc 1 62 0
 380               		.cfi_startproc
 381               	/* prologue: function */
 382               	/* frame size = 0 */
 383               	/* stack size = 0 */
 384               	.L__stack_usage = 0
  64:../../quantum/matrix.c **** }
 385               		.loc 1 64 0
 386 0000 85E0      		ldi r24,lo8(5)
 387 0002 0895      		ret
 388               		.cfi_endproc
 389               	.LFE8:
 391               		.section	.text.matrix_cols,"ax",@progbits
 392               	.global	matrix_cols
 394               	matrix_cols:
 395               	.LFB9:
  68:../../quantum/matrix.c **** {
 396               		.loc 1 68 0
 397               		.cfi_startproc
 398               	/* prologue: function */
 399               	/* frame size = 0 */
 400               	/* stack size = 0 */
 401               	.L__stack_usage = 0
  70:../../quantum/matrix.c **** }
 402               		.loc 1 70 0
 403 0000 8EE0      		ldi r24,lo8(14)
 404 0002 0895      		ret
 405               		.cfi_endproc
 406               	.LFE9:
 408               		.section	.rodata
 409               	.LC1:
 410 000a 6000      		.word	96
 411 000c 6100      		.word	97
 412 000e 5600      		.word	86
 413 0010 3700      		.word	55
 414 0012 3600      		.word	54
 415 0014 2700      		.word	39
 416 0016 4400      		.word	68
 417 0018 2100      		.word	33
 418 001a 2000      		.word	32
 419 001c 2500      		.word	37
 420 001e 2400      		.word	36
 421 0020 4700      		.word	71
 422 0022 4600      		.word	70
 423 0024 2300      		.word	35
 424               		.section	.text.matrix_init,"ax",@progbits
 425               	.global	matrix_init
 427               	matrix_init:
 428               	.LFB10:
  73:../../quantum/matrix.c **** {
 429               		.loc 1 73 0
 430               		.cfi_startproc
 431 0000 5F92      		push r5
 432               	.LCFI17:
 433               		.cfi_def_cfa_offset 3
 434               		.cfi_offset 5, -2
 435 0002 6F92      		push r6
 436               	.LCFI18:
 437               		.cfi_def_cfa_offset 4
 438               		.cfi_offset 6, -3
 439 0004 7F92      		push r7
 440               	.LCFI19:
 441               		.cfi_def_cfa_offset 5
 442               		.cfi_offset 7, -4
 443 0006 8F92      		push r8
 444               	.LCFI20:
 445               		.cfi_def_cfa_offset 6
 446               		.cfi_offset 8, -5
 447 0008 9F92      		push r9
 448               	.LCFI21:
 449               		.cfi_def_cfa_offset 7
 450               		.cfi_offset 9, -6
 451 000a AF92      		push r10
 452               	.LCFI22:
 453               		.cfi_def_cfa_offset 8
 454               		.cfi_offset 10, -7
 455 000c BF92      		push r11
 456               	.LCFI23:
 457               		.cfi_def_cfa_offset 9
 458               		.cfi_offset 11, -8
 459 000e CF92      		push r12
 460               	.LCFI24:
 461               		.cfi_def_cfa_offset 10
 462               		.cfi_offset 12, -9
 463 0010 DF92      		push r13
 464               	.LCFI25:
 465               		.cfi_def_cfa_offset 11
 466               		.cfi_offset 13, -10
 467 0012 EF92      		push r14
 468               	.LCFI26:
 469               		.cfi_def_cfa_offset 12
 470               		.cfi_offset 14, -11
 471 0014 FF92      		push r15
 472               	.LCFI27:
 473               		.cfi_def_cfa_offset 13
 474               		.cfi_offset 15, -12
 475 0016 0F93      		push r16
 476               	.LCFI28:
 477               		.cfi_def_cfa_offset 14
 478               		.cfi_offset 16, -13
 479 0018 1F93      		push r17
 480               	.LCFI29:
 481               		.cfi_def_cfa_offset 15
 482               		.cfi_offset 17, -14
 483 001a CF93      		push r28
 484               	.LCFI30:
 485               		.cfi_def_cfa_offset 16
 486               		.cfi_offset 28, -15
 487 001c DF93      		push r29
 488               	.LCFI31:
 489               		.cfi_def_cfa_offset 17
 490               		.cfi_offset 29, -16
 491 001e CDB7      		in r28,__SP_L__
 492 0020 DEB7      		in r29,__SP_H__
 493               	.LCFI32:
 494               		.cfi_def_cfa_register 28
 495 0022 6C97      		sbiw r28,28
 496               	.LCFI33:
 497               		.cfi_def_cfa_offset 45
 498 0024 0FB6      		in __tmp_reg__,__SREG__
 499 0026 F894      		cli
 500 0028 DEBF      		out __SP_H__,r29
 501 002a 0FBE      		out __SREG__,__tmp_reg__
 502 002c CDBF      		out __SP_L__,r28
 503               	/* prologue: function */
 504               	/* frame size = 28 */
 505               	/* stack size = 43 */
 506               	.L__stack_usage = 43
  75:../../quantum/matrix.c ****     MCUCR |= (1<<JTD);
 507               		.loc 1 75 0
 508 002e 85B7      		in r24,0x35
 509 0030 8068      		ori r24,lo8(-128)
 510 0032 85BF      		out 0x35,r24
  76:../../quantum/matrix.c ****     MCUCR |= (1<<JTD);
 511               		.loc 1 76 0
 512 0034 85B7      		in r24,0x35
 513 0036 8068      		ori r24,lo8(-128)
 514 0038 85BF      		out 0x35,r24
  80:../../quantum/matrix.c ****     unselect_rows();
 515               		.loc 1 80 0
 516 003a 0E94 0000 		call unselect_rows
 517               	.LVL21:
 518 003e 9E01      		movw r18,r28
 519 0040 2F5F      		subi r18,-1
 520 0042 3F4F      		sbci r19,-1
  72:../../quantum/matrix.c **** void matrix_init(void)
 521               		.loc 1 72 0
 522 0044 4E01      		movw r8,r28
 523 0046 8DE1      		ldi r24,29
 524 0048 880E      		add r8,r24
 525 004a 911C      		adc r9,__zero_reg__
 201:../../quantum/matrix.c ****     int B = 0, C = 0, D = 0, E = 0, F = 0;
 526               		.loc 1 201 0
 527 004c 60E0      		ldi r22,0
 528 004e 70E0      		ldi r23,0
 529 0050 00E0      		ldi r16,0
 530 0052 10E0      		ldi r17,0
 531 0054 E12C      		mov r14,__zero_reg__
 532 0056 F12C      		mov r15,__zero_reg__
 533 0058 C12C      		mov r12,__zero_reg__
 534 005a D12C      		mov r13,__zero_reg__
 535 005c A12C      		mov r10,__zero_reg__
 536 005e B12C      		mov r11,__zero_reg__
 537               	.LBB16:
 538               	.LBB17:
 539               	.LBB18:
 540               	.LBB19:
 205:../../quantum/matrix.c ****         int col = COLS[x];
 541               		.loc 1 205 0
 542 0060 9CE1      		ldi r25,lo8(28)
 543 0062 792E      		mov r7,r25
 544 0064 622E      		mov r6,r18
 545 0066 532E      		mov r5,r19
 219:../../quantum/matrix.c ****             F |= (1<<(col & 0x0F)); 
 546               		.loc 1 219 0
 547 0068 41E0      		ldi r20,lo8(1)
 548 006a 50E0      		ldi r21,0
 549               	.LVL22:
 550               	.L19:
 205:../../quantum/matrix.c ****         int col = COLS[x];
 551               		.loc 1 205 0
 552 006c E0E0      		ldi r30,lo8(.LC1)
 553 006e F0E0      		ldi r31,hi8(.LC1)
 554 0070 A62D      		mov r26,r6
 555 0072 B52D      		mov r27,r5
 556 0074 872D      		mov r24,r7
 557               		0:
 558 0076 0190      		ld r0,Z+
 559 0078 0D92      		st X+,r0
 560 007a 8A95      		dec r24
 561 007c 01F4      		brne 0b
 562 007e F901      		movw r30,r18
 563 0080 8191      		ld r24,Z+
 564 0082 9191      		ld r25,Z+
 565 0084 9F01      		movw r18,r30
 566               	.LVL23:
 210:../../quantum/matrix.c ****         if ((col & 0xF0) == 0x20) { 
 567               		.loc 1 210 0
 568 0086 FC01      		movw r30,r24
 569 0088 E07F      		andi r30,240
 570 008a FF27      		clr r31
 571 008c E032      		cpi r30,32
 572 008e F105      		cpc r31,__zero_reg__
 573 0090 01F4      		brne .L14
 211:../../quantum/matrix.c ****             B |= (1<<(col & 0x0F)); 
 574               		.loc 1 211 0
 575 0092 8F70      		andi r24,15
 576 0094 9927      		clr r25
 577               	.LVL24:
 578 0096 FA01      		movw r30,r20
 579 0098 00C0      		rjmp 2f
 580               		1:
 581 009a EE0F      		lsl r30
 582 009c FF1F      		rol r31
 583               		2:
 584 009e 8A95      		dec r24
 585 00a0 02F4      		brpl 1b
 586 00a2 AE2A      		or r10,r30
 587 00a4 BF2A      		or r11,r31
 588               	.LVL25:
 589 00a6 00C0      		rjmp .L15
 590               	.LVL26:
 591               	.L14:
 212:../../quantum/matrix.c ****         } else if ((col & 0xF0) == 0x30) { 
 592               		.loc 1 212 0
 593 00a8 E033      		cpi r30,48
 594 00aa F105      		cpc r31,__zero_reg__
 595 00ac 01F4      		brne .L16
 213:../../quantum/matrix.c ****             C |= (1<<(col & 0x0F)); 
 596               		.loc 1 213 0
 597 00ae 8F70      		andi r24,15
 598 00b0 9927      		clr r25
 599               	.LVL27:
 600 00b2 FA01      		movw r30,r20
 601 00b4 00C0      		rjmp 2f
 602               		1:
 603 00b6 EE0F      		lsl r30
 604 00b8 FF1F      		rol r31
 605               		2:
 606 00ba 8A95      		dec r24
 607 00bc 02F4      		brpl 1b
 608 00be CE2A      		or r12,r30
 609 00c0 DF2A      		or r13,r31
 610               	.LVL28:
 611 00c2 00C0      		rjmp .L15
 612               	.LVL29:
 613               	.L16:
 214:../../quantum/matrix.c ****         } else if ((col & 0xF0) == 0x40) { 
 614               		.loc 1 214 0
 615 00c4 E034      		cpi r30,64
 616 00c6 F105      		cpc r31,__zero_reg__
 617 00c8 01F4      		brne .L17
 215:../../quantum/matrix.c ****             D |= (1<<(col & 0x0F)); 
 618               		.loc 1 215 0
 619 00ca 8F70      		andi r24,15
 620 00cc 9927      		clr r25
 621               	.LVL30:
 622 00ce FA01      		movw r30,r20
 623 00d0 00C0      		rjmp 2f
 624               		1:
 625 00d2 EE0F      		lsl r30
 626 00d4 FF1F      		rol r31
 627               		2:
 628 00d6 8A95      		dec r24
 629 00d8 02F4      		brpl 1b
 630 00da EE2A      		or r14,r30
 631 00dc FF2A      		or r15,r31
 632               	.LVL31:
 633 00de 00C0      		rjmp .L15
 634               	.LVL32:
 635               	.L17:
 216:../../quantum/matrix.c ****         } else if ((col & 0xF0) == 0x50) { 
 636               		.loc 1 216 0
 637 00e0 E035      		cpi r30,80
 638 00e2 F105      		cpc r31,__zero_reg__
 639 00e4 01F4      		brne .L18
 217:../../quantum/matrix.c ****             E |= (1<<(col & 0x0F)); 
 640               		.loc 1 217 0
 641 00e6 8F70      		andi r24,15
 642 00e8 9927      		clr r25
 643               	.LVL33:
 644 00ea FA01      		movw r30,r20
 645 00ec 00C0      		rjmp 2f
 646               		1:
 647 00ee EE0F      		lsl r30
 648 00f0 FF1F      		rol r31
 649               		2:
 650 00f2 8A95      		dec r24
 651 00f4 02F4      		brpl 1b
 652 00f6 0E2B      		or r16,r30
 653 00f8 1F2B      		or r17,r31
 654               	.LVL34:
 655 00fa 00C0      		rjmp .L15
 656               	.LVL35:
 657               	.L18:
 218:../../quantum/matrix.c ****         } else if ((col & 0xF0) == 0x60) { 
 658               		.loc 1 218 0
 659 00fc E036      		cpi r30,96
 660 00fe F105      		cpc r31,__zero_reg__
 661 0100 01F4      		brne .L15
 219:../../quantum/matrix.c ****             F |= (1<<(col & 0x0F)); 
 662               		.loc 1 219 0
 663 0102 8F70      		andi r24,15
 664 0104 9927      		clr r25
 665               	.LVL36:
 666 0106 FA01      		movw r30,r20
 667 0108 00C0      		rjmp 2f
 668               		1:
 669 010a EE0F      		lsl r30
 670 010c FF1F      		rol r31
 671               		2:
 672 010e 8A95      		dec r24
 673 0110 02F4      		brpl 1b
 674 0112 6E2B      		or r22,r30
 675 0114 7F2B      		or r23,r31
 676               	.LVL37:
 677               	.L15:
 678               	.LBE19:
 204:../../quantum/matrix.c ****     for(int x = 0; x < MATRIX_COLS; x++) {
 679               		.loc 1 204 0
 680 0116 2815      		cp r18,r8
 681 0118 3905      		cpc r19,r9
 682 011a 01F0      		breq .+2
 683 011c 00C0      		rjmp .L19
 684               	.LBE18:
 222:../../quantum/matrix.c ****     DDRB &= ~(B); PORTB |= (B);
 685               		.loc 1 222 0
 686 011e 94B1      		in r25,0x4
 687 0120 8A2D      		mov r24,r10
 688 0122 8095      		com r24
 689 0124 8923      		and r24,r25
 690 0126 84B9      		out 0x4,r24
 691 0128 85B1      		in r24,0x5
 692 012a 8A29      		or r24,r10
 693 012c 85B9      		out 0x5,r24
 223:../../quantum/matrix.c ****     DDRC &= ~(C); PORTC |= (C); 
 694               		.loc 1 223 0
 695 012e 97B1      		in r25,0x7
 696 0130 8C2D      		mov r24,r12
 697 0132 8095      		com r24
 698 0134 8923      		and r24,r25
 699 0136 87B9      		out 0x7,r24
 700 0138 88B1      		in r24,0x8
 701 013a 8C29      		or r24,r12
 702 013c 88B9      		out 0x8,r24
 224:../../quantum/matrix.c ****     DDRD &= ~(D); PORTD |= (D);
 703               		.loc 1 224 0
 704 013e 9AB1      		in r25,0xa
 705 0140 8E2D      		mov r24,r14
 706 0142 8095      		com r24
 707 0144 8923      		and r24,r25
 708 0146 8AB9      		out 0xa,r24
 709 0148 8BB1      		in r24,0xb
 710 014a 8E29      		or r24,r14
 711 014c 8BB9      		out 0xb,r24
 225:../../quantum/matrix.c ****     DDRE &= ~(E); PORTE |= (E);
 712               		.loc 1 225 0
 713 014e 9DB1      		in r25,0xd
 714 0150 802F      		mov r24,r16
 715 0152 8095      		com r24
 716 0154 8923      		and r24,r25
 717 0156 8DB9      		out 0xd,r24
 718 0158 8EB1      		in r24,0xe
 719 015a 802B      		or r24,r16
 720 015c 8EB9      		out 0xe,r24
 226:../../quantum/matrix.c ****     DDRF &= ~(F); PORTF |= (F);
 721               		.loc 1 226 0
 722 015e 90B3      		in r25,0x10
 723 0160 862F      		mov r24,r22
 724 0162 8095      		com r24
 725 0164 8923      		and r24,r25
 726 0166 80BB      		out 0x10,r24
 727 0168 81B3      		in r24,0x11
 728 016a 862B      		or r24,r22
 729 016c 81BB      		out 0x11,r24
 730               	.LVL38:
 731               	.LBE17:
 732               	.LBE16:
 733               	.LBB20:
  85:../../quantum/matrix.c ****         matrix[i] = 0;
 734               		.loc 1 85 0
 735 016e 1092 0000 		sts matrix+1,__zero_reg__
 736 0172 1092 0000 		sts matrix,__zero_reg__
  86:../../quantum/matrix.c ****         matrix_debouncing[i] = 0;
 737               		.loc 1 86 0
 738 0176 1092 0000 		sts matrix_debouncing+1,__zero_reg__
 739 017a 1092 0000 		sts matrix_debouncing,__zero_reg__
 740               	.LVL39:
  85:../../quantum/matrix.c ****         matrix[i] = 0;
 741               		.loc 1 85 0
 742 017e 1092 0000 		sts matrix+2+1,__zero_reg__
 743 0182 1092 0000 		sts matrix+2,__zero_reg__
  86:../../quantum/matrix.c ****         matrix_debouncing[i] = 0;
 744               		.loc 1 86 0
 745 0186 1092 0000 		sts matrix_debouncing+2+1,__zero_reg__
 746 018a 1092 0000 		sts matrix_debouncing+2,__zero_reg__
 747               	.LVL40:
  85:../../quantum/matrix.c ****         matrix[i] = 0;
 748               		.loc 1 85 0
 749 018e 1092 0000 		sts matrix+4+1,__zero_reg__
 750 0192 1092 0000 		sts matrix+4,__zero_reg__
  86:../../quantum/matrix.c ****         matrix_debouncing[i] = 0;
 751               		.loc 1 86 0
 752 0196 1092 0000 		sts matrix_debouncing+4+1,__zero_reg__
 753 019a 1092 0000 		sts matrix_debouncing+4,__zero_reg__
 754               	.LVL41:
  85:../../quantum/matrix.c ****         matrix[i] = 0;
 755               		.loc 1 85 0
 756 019e 1092 0000 		sts matrix+6+1,__zero_reg__
 757 01a2 1092 0000 		sts matrix+6,__zero_reg__
  86:../../quantum/matrix.c ****         matrix_debouncing[i] = 0;
 758               		.loc 1 86 0
 759 01a6 1092 0000 		sts matrix_debouncing+6+1,__zero_reg__
 760 01aa 1092 0000 		sts matrix_debouncing+6,__zero_reg__
 761               	.LVL42:
  85:../../quantum/matrix.c ****         matrix[i] = 0;
 762               		.loc 1 85 0
 763 01ae 1092 0000 		sts matrix+8+1,__zero_reg__
 764 01b2 1092 0000 		sts matrix+8,__zero_reg__
  86:../../quantum/matrix.c ****         matrix_debouncing[i] = 0;
 765               		.loc 1 86 0
 766 01b6 1092 0000 		sts matrix_debouncing+8+1,__zero_reg__
 767 01ba 1092 0000 		sts matrix_debouncing+8,__zero_reg__
 768               	.LVL43:
 769               	.LBE20:
  89:../../quantum/matrix.c ****     if (matrix_init_kb) {
 770               		.loc 1 89 0
 771 01be 80E0      		ldi r24,lo8(gs(matrix_init_kb))
 772 01c0 90E0      		ldi r25,hi8(gs(matrix_init_kb))
 773 01c2 892B      		or r24,r25
 774 01c4 01F0      		breq .L13
 775               	/* epilogue start */
  92:../../quantum/matrix.c **** }
 776               		.loc 1 92 0
 777 01c6 6C96      		adiw r28,28
 778 01c8 0FB6      		in __tmp_reg__,__SREG__
 779 01ca F894      		cli
 780 01cc DEBF      		out __SP_H__,r29
 781 01ce 0FBE      		out __SREG__,__tmp_reg__
 782 01d0 CDBF      		out __SP_L__,r28
 783 01d2 DF91      		pop r29
 784 01d4 CF91      		pop r28
 785 01d6 1F91      		pop r17
 786 01d8 0F91      		pop r16
 787               	.LVL44:
 788 01da FF90      		pop r15
 789 01dc EF90      		pop r14
 790               	.LVL45:
 791 01de DF90      		pop r13
 792 01e0 CF90      		pop r12
 793               	.LVL46:
 794 01e2 BF90      		pop r11
 795 01e4 AF90      		pop r10
 796               	.LVL47:
 797 01e6 9F90      		pop r9
 798 01e8 8F90      		pop r8
 799 01ea 7F90      		pop r7
 800 01ec 6F90      		pop r6
 801 01ee 5F90      		pop r5
  90:../../quantum/matrix.c ****         (*matrix_init_kb)();
 802               		.loc 1 90 0
 803 01f0 0C94 0000 		jmp matrix_init_kb
 804               	.LVL48:
 805               	.L13:
 806               	/* epilogue start */
  92:../../quantum/matrix.c **** }
 807               		.loc 1 92 0
 808 01f4 6C96      		adiw r28,28
 809 01f6 0FB6      		in __tmp_reg__,__SREG__
 810 01f8 F894      		cli
 811 01fa DEBF      		out __SP_H__,r29
 812 01fc 0FBE      		out __SREG__,__tmp_reg__
 813 01fe CDBF      		out __SP_L__,r28
 814 0200 DF91      		pop r29
 815 0202 CF91      		pop r28
 816 0204 1F91      		pop r17
 817 0206 0F91      		pop r16
 818               	.LVL49:
 819 0208 FF90      		pop r15
 820 020a EF90      		pop r14
 821               	.LVL50:
 822 020c DF90      		pop r13
 823 020e CF90      		pop r12
 824               	.LVL51:
 825 0210 BF90      		pop r11
 826 0212 AF90      		pop r10
 827               	.LVL52:
 828 0214 9F90      		pop r9
 829 0216 8F90      		pop r8
 830 0218 7F90      		pop r7
 831 021a 6F90      		pop r6
 832 021c 5F90      		pop r5
 833 021e 0895      		ret
 834               		.cfi_endproc
 835               	.LFE10:
 837               		.section	.text.matrix_scan,"ax",@progbits
 838               	.global	matrix_scan
 840               	matrix_scan:
 841               	.LFB11:
  96:../../quantum/matrix.c **** {
 842               		.loc 1 96 0
 843               		.cfi_startproc
 844 0000 5F92      		push r5
 845               	.LCFI34:
 846               		.cfi_def_cfa_offset 3
 847               		.cfi_offset 5, -2
 848 0002 6F92      		push r6
 849               	.LCFI35:
 850               		.cfi_def_cfa_offset 4
 851               		.cfi_offset 6, -3
 852 0004 7F92      		push r7
 853               	.LCFI36:
 854               		.cfi_def_cfa_offset 5
 855               		.cfi_offset 7, -4
 856 0006 8F92      		push r8
 857               	.LCFI37:
 858               		.cfi_def_cfa_offset 6
 859               		.cfi_offset 8, -5
 860 0008 9F92      		push r9
 861               	.LCFI38:
 862               		.cfi_def_cfa_offset 7
 863               		.cfi_offset 9, -6
 864 000a AF92      		push r10
 865               	.LCFI39:
 866               		.cfi_def_cfa_offset 8
 867               		.cfi_offset 10, -7
 868 000c BF92      		push r11
 869               	.LCFI40:
 870               		.cfi_def_cfa_offset 9
 871               		.cfi_offset 11, -8
 872 000e CF92      		push r12
 873               	.LCFI41:
 874               		.cfi_def_cfa_offset 10
 875               		.cfi_offset 12, -9
 876 0010 DF92      		push r13
 877               	.LCFI42:
 878               		.cfi_def_cfa_offset 11
 879               		.cfi_offset 13, -10
 880 0012 EF92      		push r14
 881               	.LCFI43:
 882               		.cfi_def_cfa_offset 12
 883               		.cfi_offset 14, -11
 884 0014 FF92      		push r15
 885               	.LCFI44:
 886               		.cfi_def_cfa_offset 13
 887               		.cfi_offset 15, -12
 888 0016 0F93      		push r16
 889               	.LCFI45:
 890               		.cfi_def_cfa_offset 14
 891               		.cfi_offset 16, -13
 892 0018 1F93      		push r17
 893               	.LCFI46:
 894               		.cfi_def_cfa_offset 15
 895               		.cfi_offset 17, -14
 896 001a CF93      		push r28
 897               	.LCFI47:
 898               		.cfi_def_cfa_offset 16
 899               		.cfi_offset 28, -15
 900 001c DF93      		push r29
 901               	.LCFI48:
 902               		.cfi_def_cfa_offset 17
 903               		.cfi_offset 29, -16
 904 001e CDB7      		in r28,__SP_L__
 905 0020 DEB7      		in r29,__SP_H__
 906               	.LCFI49:
 907               		.cfi_def_cfa_register 28
 908 0022 A697      		sbiw r28,38
 909               	.LCFI50:
 910               		.cfi_def_cfa_offset 55
 911 0024 0FB6      		in __tmp_reg__,__SREG__
 912 0026 F894      		cli
 913 0028 DEBF      		out __SP_H__,r29
 914 002a 0FBE      		out __SREG__,__tmp_reg__
 915 002c CDBF      		out __SP_L__,r28
 916               	/* prologue: function */
 917               	/* frame size = 38 */
 918               	/* stack size = 53 */
 919               	.L__stack_usage = 53
 920               	.LVL53:
 921 002e 7E01      		movw r14,r28
 922 0030 4DE1      		ldi r20,29
 923 0032 E40E      		add r14,r20
 924 0034 F11C      		adc r15,__zero_reg__
 925 0036 20E0      		ldi r18,lo8(matrix_debouncing)
 926 0038 C22E      		mov r12,r18
 927 003a 20E0      		ldi r18,hi8(matrix_debouncing)
 928 003c D22E      		mov r13,r18
 929               	.LBB34:
 930               	.LBB35:
 931               	.LBB36:
 932               	.LBB37:
 933               	.LBB38:
 934               	.LBB39:
  95:../../quantum/matrix.c **** uint8_t matrix_scan(void)
 935               		.loc 1 95 0
 936 003e 5E01      		movw r10,r28
 937 0040 57E2      		ldi r21,39
 938 0042 A50E      		add r10,r21
 939 0044 B11C      		adc r11,__zero_reg__
 940               	.LBE39:
 941               	.LBE38:
 942               	.LBE37:
 943               	.LBE36:
 944               	.LBB46:
 945               	.LBB47:
 285:../../quantum/matrix.c **** 
 286:../../quantum/matrix.c **** static void select_row(uint8_t row)
 287:../../quantum/matrix.c **** {
 288:../../quantum/matrix.c **** 
 289:../../quantum/matrix.c **** #if DIODE_DIRECTION == COL2ROW
 290:../../quantum/matrix.c ****     int row_pin = ROWS[row];
 946               		.loc 1 290 0
 947 0046 3AE0      		ldi r19,lo8(10)
 948 0048 532E      		mov r5,r19
 949 004a 4701      		movw r8,r14
 291:../../quantum/matrix.c **** #else
 292:../../quantum/matrix.c ****     int row_pin = COLS[row];
 293:../../quantum/matrix.c **** #endif
 294:../../quantum/matrix.c **** 
 295:../../quantum/matrix.c ****     if ((row_pin & 0xF0) == 0x20) { 
 296:../../quantum/matrix.c ****         DDRB  |= (1<<(row_pin & 0x0F));
 297:../../quantum/matrix.c ****         PORTB &= ~(1<<(row_pin & 0x0F));
 298:../../quantum/matrix.c ****     } else if ((row_pin & 0xF0) == 0x30) { 
 299:../../quantum/matrix.c ****         DDRC  |= (1<<(row_pin & 0x0F));
 300:../../quantum/matrix.c ****         PORTC &= ~(1<<(row_pin & 0x0F));
 301:../../quantum/matrix.c ****     } else if ((row_pin & 0xF0) == 0x40) { 
 302:../../quantum/matrix.c ****         DDRD  |= (1<<(row_pin & 0x0F));
 303:../../quantum/matrix.c ****         PORTD &= ~(1<<(row_pin & 0x0F));
 304:../../quantum/matrix.c ****     } else if ((row_pin & 0xF0) == 0x50) { 
 305:../../quantum/matrix.c ****         DDRE  |= (1<<(row_pin & 0x0F));
 306:../../quantum/matrix.c ****         PORTE &= ~(1<<(row_pin & 0x0F));
 307:../../quantum/matrix.c ****     } else if ((row_pin & 0xF0) == 0x60) { 
 308:../../quantum/matrix.c ****         DDRF  |= (1<<(row_pin & 0x0F));
 950               		.loc 1 308 0
 951 004c 01E0      		ldi r16,lo8(1)
 952 004e 10E0      		ldi r17,0
 953               	.LBE47:
 954               	.LBE46:
 955               	.LBB49:
 956               	.LBB44:
 957               	.LBB42:
 958               	.LBB40:
 235:../../quantum/matrix.c ****         int col = COLS[x];
 959               		.loc 1 235 0
 960 0050 4CE1      		ldi r20,lo8(28)
 961 0052 642E      		mov r6,r20
 962               	.LBE40:
 963               	.LBE42:
 964               	.LBE44:
 965               	.LBE49:
 108:../../quantum/matrix.c ****             debouncing = DEBOUNCE;
 966               		.loc 1 108 0
 967 0054 55E0      		ldi r21,lo8(5)
 968 0056 752E      		mov r7,r21
 969               	.LVL54:
 970               	.L40:
 971               	.LBB50:
 972               	.LBB48:
 290:../../quantum/matrix.c ****     int row_pin = ROWS[row];
 973               		.loc 1 290 0
 974 0058 E0E0      		ldi r30,lo8(.LC0)
 975 005a F0E0      		ldi r31,hi8(.LC0)
 976 005c D401      		movw r26,r8
 977 005e 852D      		mov r24,r5
 978               		0:
 979 0060 0190      		ld r0,Z+
 980 0062 0D92      		st X+,r0
 981 0064 8A95      		dec r24
 982 0066 01F4      		brne 0b
 983 0068 F701      		movw r30,r14
 984 006a 8191      		ld r24,Z+
 985 006c 9191      		ld r25,Z+
 986 006e 7F01      		movw r14,r30
 987               	.LVL55:
 295:../../quantum/matrix.c ****     if ((row_pin & 0xF0) == 0x20) { 
 988               		.loc 1 295 0
 989 0070 9C01      		movw r18,r24
 990 0072 207F      		andi r18,240
 991 0074 3327      		clr r19
 992 0076 2032      		cpi r18,32
 993 0078 3105      		cpc r19,__zero_reg__
 994 007a 01F4      		brne .L23
 296:../../quantum/matrix.c ****         DDRB  |= (1<<(row_pin & 0x0F));
 995               		.loc 1 296 0
 996 007c 24B1      		in r18,0x4
 997 007e 8F70      		andi r24,15
 998 0080 9927      		clr r25
 999               	.LVL56:
 1000 0082 A801      		movw r20,r16
 1001 0084 00C0      		rjmp 2f
 1002               		1:
 1003 0086 440F      		lsl r20
 1004 0088 551F      		rol r21
 1005               		2:
 1006 008a 8A95      		dec r24
 1007 008c 02F4      		brpl 1b
 1008 008e CA01      		movw r24,r20
 1009 0090 242B      		or r18,r20
 1010 0092 24B9      		out 0x4,r18
 297:../../quantum/matrix.c ****         PORTB &= ~(1<<(row_pin & 0x0F));
 1011               		.loc 1 297 0
 1012 0094 95B1      		in r25,0x5
 1013 0096 8095      		com r24
 1014 0098 8923      		and r24,r25
 1015 009a 85B9      		out 0x5,r24
 1016 009c 00C0      		rjmp .L24
 1017               	.LVL57:
 1018               	.L23:
 298:../../quantum/matrix.c ****     } else if ((row_pin & 0xF0) == 0x30) { 
 1019               		.loc 1 298 0
 1020 009e 2033      		cpi r18,48
 1021 00a0 3105      		cpc r19,__zero_reg__
 1022 00a2 01F4      		brne .L25
 299:../../quantum/matrix.c ****         DDRC  |= (1<<(row_pin & 0x0F));
 1023               		.loc 1 299 0
 1024 00a4 27B1      		in r18,0x7
 1025 00a6 8F70      		andi r24,15
 1026 00a8 9927      		clr r25
 1027               	.LVL58:
 1028 00aa F801      		movw r30,r16
 1029 00ac 00C0      		rjmp 2f
 1030               		1:
 1031 00ae EE0F      		lsl r30
 1032 00b0 FF1F      		rol r31
 1033               		2:
 1034 00b2 8A95      		dec r24
 1035 00b4 02F4      		brpl 1b
 1036 00b6 CF01      		movw r24,r30
 1037 00b8 2E2B      		or r18,r30
 1038 00ba 27B9      		out 0x7,r18
 300:../../quantum/matrix.c ****         PORTC &= ~(1<<(row_pin & 0x0F));
 1039               		.loc 1 300 0
 1040 00bc 98B1      		in r25,0x8
 1041 00be 8095      		com r24
 1042 00c0 8923      		and r24,r25
 1043 00c2 88B9      		out 0x8,r24
 1044 00c4 00C0      		rjmp .L24
 1045               	.LVL59:
 1046               	.L25:
 301:../../quantum/matrix.c ****     } else if ((row_pin & 0xF0) == 0x40) { 
 1047               		.loc 1 301 0
 1048 00c6 2034      		cpi r18,64
 1049 00c8 3105      		cpc r19,__zero_reg__
 1050 00ca 01F4      		brne .L26
 302:../../quantum/matrix.c ****         DDRD  |= (1<<(row_pin & 0x0F));
 1051               		.loc 1 302 0
 1052 00cc 2AB1      		in r18,0xa
 1053 00ce 8F70      		andi r24,15
 1054 00d0 9927      		clr r25
 1055               	.LVL60:
 1056 00d2 A801      		movw r20,r16
 1057 00d4 00C0      		rjmp 2f
 1058               		1:
 1059 00d6 440F      		lsl r20
 1060 00d8 551F      		rol r21
 1061               		2:
 1062 00da 8A95      		dec r24
 1063 00dc 02F4      		brpl 1b
 1064 00de CA01      		movw r24,r20
 1065 00e0 242B      		or r18,r20
 1066 00e2 2AB9      		out 0xa,r18
 303:../../quantum/matrix.c ****         PORTD &= ~(1<<(row_pin & 0x0F));
 1067               		.loc 1 303 0
 1068 00e4 9BB1      		in r25,0xb
 1069 00e6 8095      		com r24
 1070 00e8 8923      		and r24,r25
 1071 00ea 8BB9      		out 0xb,r24
 1072 00ec 00C0      		rjmp .L24
 1073               	.LVL61:
 1074               	.L26:
 304:../../quantum/matrix.c ****     } else if ((row_pin & 0xF0) == 0x50) { 
 1075               		.loc 1 304 0
 1076 00ee 2035      		cpi r18,80
 1077 00f0 3105      		cpc r19,__zero_reg__
 1078 00f2 01F4      		brne .L27
 305:../../quantum/matrix.c ****         DDRE  |= (1<<(row_pin & 0x0F));
 1079               		.loc 1 305 0
 1080 00f4 2DB1      		in r18,0xd
 1081 00f6 8F70      		andi r24,15
 1082 00f8 9927      		clr r25
 1083               	.LVL62:
 1084 00fa F801      		movw r30,r16
 1085 00fc 00C0      		rjmp 2f
 1086               		1:
 1087 00fe EE0F      		lsl r30
 1088 0100 FF1F      		rol r31
 1089               		2:
 1090 0102 8A95      		dec r24
 1091 0104 02F4      		brpl 1b
 1092 0106 CF01      		movw r24,r30
 1093 0108 2E2B      		or r18,r30
 1094 010a 2DB9      		out 0xd,r18
 306:../../quantum/matrix.c ****         PORTE &= ~(1<<(row_pin & 0x0F));
 1095               		.loc 1 306 0
 1096 010c 9EB1      		in r25,0xe
 1097 010e 8095      		com r24
 1098 0110 8923      		and r24,r25
 1099 0112 8EB9      		out 0xe,r24
 1100 0114 00C0      		rjmp .L24
 1101               	.LVL63:
 1102               	.L27:
 307:../../quantum/matrix.c ****     } else if ((row_pin & 0xF0) == 0x60) { 
 1103               		.loc 1 307 0
 1104 0116 2036      		cpi r18,96
 1105 0118 3105      		cpc r19,__zero_reg__
 1106 011a 01F4      		brne .L24
 1107               		.loc 1 308 0
 1108 011c 20B3      		in r18,0x10
 1109 011e 8F70      		andi r24,15
 1110 0120 9927      		clr r25
 1111               	.LVL64:
 1112 0122 A801      		movw r20,r16
 1113 0124 00C0      		rjmp 2f
 1114               		1:
 1115 0126 440F      		lsl r20
 1116 0128 551F      		rol r21
 1117               		2:
 1118 012a 8A95      		dec r24
 1119 012c 02F4      		brpl 1b
 1120 012e CA01      		movw r24,r20
 1121 0130 242B      		or r18,r20
 1122 0132 20BB      		out 0x10,r18
 309:../../quantum/matrix.c ****         PORTF &= ~(1<<(row_pin & 0x0F));
 1123               		.loc 1 309 0
 1124 0134 91B3      		in r25,0x11
 1125 0136 8095      		com r24
 1126 0138 8923      		and r24,r25
 1127 013a 81BB      		out 0x11,r24
 1128               	.L24:
 1129               	.LVL65:
 1130               	.LBE48:
 1131               	.LBE50:
 1132               	.LBB51:
 1133               	.LBB52:
 1134               		.file 2 "d:\\applications\\keyboard\\avr-gcc-4.7.2-mingw32\\bin\\../lib/gcc/avr/4.7.2/../../../../
   1:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    All rights reserved.
   5:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
   6:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
   9:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  12:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****      the documentation and/or other materials provided with the
  15:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****      distribution.
  16:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  17:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****      contributors may be used to endorse or promote products derived
  19:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****      from this software without specific prior written permission.
  20:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  21:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  33:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  35:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  38:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #define __HAS_DELAY_CYCLES 1
  40:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #endif
  41:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  42:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #include <inttypes.h>
  43:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #include <util/delay_basic.h>
  44:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #include <math.h>
  45:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  46:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** /** \file */
  47:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     \code
  49:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     //#define F_CPU 14.7456E6
  51:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     #include <util/delay.h>
  52:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     \endcode
  53:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  54:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     \note As an alternative method, it is possible to pass the
  55:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     used.
  58:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  59:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     The functions in this header file are wrappers around the basic
  60:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     convenience functions where actual time values can be specified
  62:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     that compile-time constant expressions will be eliminated by
  64:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     compiler optimization so floating-point expressions can be used
  65:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     frequency passed by the macro F_CPU.
  67:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  68:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     \note In order for these functions to work as intended, compiler
  69:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     <em>must</em> be an expression that is a known constant at
  71:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     delay will be much longer (and basically unpredictable), and
  73:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     applications that otherwise do not use floating-point calculations
  74:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     will experience severe code bloat by the floating-point library
  75:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     routines linked into the application.
  76:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  77:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     The functions available allow the specification of microsecond, and
  78:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     millisecond delays directly, using the application-supplied macro
  79:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  81:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** */
  82:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  83:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #if !defined(__DOXYGEN__)
  84:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #endif
  87:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  88:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #ifndef F_CPU
  89:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** /* prevent compiler error by supplying a default */
  90:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** # define F_CPU 1000000UL
  92:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #endif
  93:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  94:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #ifndef __OPTIMIZE__
  95:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #endif
  97:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  98:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   __STDC_HOSTED__
 101:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #  include <math.h>
 102:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #endif
 103:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 104:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** /**
 105:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    \ingroup util_delay
 106:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 107:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 109:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    The macro F_CPU is supposed to be defined to a
 110:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 112:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 114:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    When the user request delay which exceed the maximum possible one,
 115:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    user will not be informed about decreased resolution.
 119:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 120:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    values greater than the maximal possible delay, overflows results in
 123:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    no delay i.e., 0ms.
 124:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 125:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    the user gets atleast __us microseconds of delay.
 128:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 129:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    to round down and round to closest integer.
 131:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 132:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Also, the backward compatible
 136:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    required for rounding are not available to the compiler then.
 139:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 140:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****  */
 141:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** void
 142:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** _delay_ms(double __ms)
 143:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** {
 144:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	uint16_t __ticks;
 145:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	double __tmp ; 
 146:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   __STDC_HOSTED__
 149:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	uint32_t __ticks_dc;
 150:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 153:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 156:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 159:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	#else
 160:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 		//round up by default
 161:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	#endif
 163:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 164:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 165:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 166:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #else
 167:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 168:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	if (__tmp < 1.0)
 169:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 		__ticks = 1;
 170:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	else if (__tmp > 65535)
 171:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	{
 172:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 		//	__ticks = requested delay in 1/10 ms
 173:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 174:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 		while(__ticks)
 175:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 		{
 176:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 			// wait 1/10 ms
 177:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 178:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 			__ticks --;
 179:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 		}
 180:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 		return;
 181:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	}
 182:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	else
 183:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 		__ticks = (uint16_t)__tmp;
 184:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	_delay_loop_2(__ticks);
 185:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #endif
 186:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** }
 187:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 188:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** /**
 189:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    \ingroup util_delay
 190:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 191:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 192:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 193:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    The macro F_CPU is supposed to be defined to a
 194:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 195:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 196:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 197:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 198:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    If the user requests a delay greater than the maximal possible one,
 199:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 200:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    will not be informed about this case.
 201:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 202:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 203:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 204:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    values greater than the maximal possible delay, overflow results in
 205:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    no delay i.e., 0us.
 206:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   
 207:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 208:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 209:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    the user gets atleast __us microseconds of delay.
 210:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 211:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 212:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    to round down and round to closest integer.
 213:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****  
 214:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Note: The new implementation of _delay_us(double __us) with 
 215:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible.
 216:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 217:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Also, the backward compatible
 218:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 219:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 220:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    required for rounding are not available to the compiler then.
 221:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 222:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****  */
 223:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** void
 224:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** _delay_us(double __us)
 225:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** {
 226:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	uint8_t __ticks;
 227:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	double __tmp ; 
 228:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 229:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 230:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   __STDC_HOSTED__
 231:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	uint32_t __ticks_dc;
 232:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 233:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 234:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 235:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 236:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 237:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 238:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 239:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 240:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 241:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	#else
 242:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 		//round up by default
 243:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 244:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	#endif
 245:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 246:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1135               		.loc 2 246 0
 1136 013c 50EA      		ldi r21,lo8(-96)
 1137 013e 5A95      		1: dec r21
 1138 0140 01F4      		brne 1b
 1139               	.LVL66:
 1140 0142 BE01      		movw r22,r28
 1141 0144 6F5F      		subi r22,-1
 1142 0146 7F4F      		sbci r23,-1
 231:../../quantum/matrix.c ****     matrix_row_t result = 0;
 1143               		.loc 1 231 0
 1144 0148 80E0      		ldi r24,0
 1145 014a 90E0      		ldi r25,0
 234:../../quantum/matrix.c ****     for(int x = 0; x < MATRIX_COLS; x++) {     
 1146               		.loc 1 234 0
 1147 014c 20E0      		ldi r18,0
 1148 014e 30E0      		ldi r19,0
 1149               	.LVL67:
 1150               	.L38:
 1151               	.LBE52:
 1152               	.LBE51:
 1153               	.LBB53:
 1154               	.LBB45:
 1155               	.LBB43:
 1156               	.LBB41:
 235:../../quantum/matrix.c ****         int col = COLS[x];
 1157               		.loc 1 235 0
 1158 0150 E0E0      		ldi r30,lo8(.LC1)
 1159 0152 F0E0      		ldi r31,hi8(.LC1)
 1160 0154 DE01      		movw r26,r28
 1161 0156 1196      		adiw r26,1
 1162 0158 462D      		mov r20,r6
 1163               		0:
 1164 015a 0190      		ld r0,Z+
 1165 015c 0D92      		st X+,r0
 1166 015e 4A95      		dec r20
 1167 0160 01F4      		brne 0b
 1168 0162 FB01      		movw r30,r22
 1169 0164 4191      		ld r20,Z+
 1170 0166 5191      		ld r21,Z+
 1171 0168 BF01      		movw r22,r30
 1172               	.LVL68:
 241:../../quantum/matrix.c ****         if ((col & 0xF0) == 0x20) { 
 1173               		.loc 1 241 0
 1174 016a FA01      		movw r30,r20
 1175 016c E07F      		andi r30,240
 1176 016e FF27      		clr r31
 1177 0170 E032      		cpi r30,32
 1178 0172 F105      		cpc r31,__zero_reg__
 1179 0174 01F4      		brne .L28
 242:../../quantum/matrix.c ****             result |= (PINB&(1<<(col & 0x0F)) ? 0 : (1<<x)); 
 1180               		.loc 1 242 0
 1181 0176 E3B1      		in r30,0x3
 1182 0178 00C0      		rjmp .L58
 1183               	.L28:
 243:../../quantum/matrix.c ****         } else if ((col & 0xF0) == 0x30) { 
 1184               		.loc 1 243 0
 1185 017a E033      		cpi r30,48
 1186 017c F105      		cpc r31,__zero_reg__
 1187 017e 01F4      		brne .L31
 244:../../quantum/matrix.c ****             result |= (PINC&(1<<(col & 0x0F)) ? 0 : (1<<x)); 
 1188               		.loc 1 244 0
 1189 0180 E6B1      		in r30,0x6
 1190 0182 00C0      		rjmp .L58
 1191               	.L31:
 245:../../quantum/matrix.c ****         } else if ((col & 0xF0) == 0x40) { 
 1192               		.loc 1 245 0
 1193 0184 E034      		cpi r30,64
 1194 0186 F105      		cpc r31,__zero_reg__
 1195 0188 01F4      		brne .L33
 246:../../quantum/matrix.c ****             result |= (PIND&(1<<(col & 0x0F)) ? 0 : (1<<x)); 
 1196               		.loc 1 246 0
 1197 018a E9B1      		in r30,0x9
 1198 018c 00C0      		rjmp .L58
 1199               	.L33:
 247:../../quantum/matrix.c ****         } else if ((col & 0xF0) == 0x50) { 
 1200               		.loc 1 247 0
 1201 018e E035      		cpi r30,80
 1202 0190 F105      		cpc r31,__zero_reg__
 1203 0192 01F4      		brne .L35
 248:../../quantum/matrix.c ****             result |= (PINE&(1<<(col & 0x0F)) ? 0 : (1<<x)); 
 1204               		.loc 1 248 0
 1205 0194 ECB1      		in r30,0xc
 1206 0196 00C0      		rjmp .L58
 1207               	.L35:
 249:../../quantum/matrix.c ****         } else if ((col & 0xF0) == 0x60) { 
 1208               		.loc 1 249 0
 1209 0198 E036      		cpi r30,96
 1210 019a F105      		cpc r31,__zero_reg__
 1211 019c 01F4      		brne .L30
 250:../../quantum/matrix.c ****             result |= (PINF&(1<<(col & 0x0F)) ? 0 : (1<<x)); 
 1212               		.loc 1 250 0
 1213 019e EFB1      		in r30,0xf
 1214               	.L58:
 1215 01a0 F0E0      		ldi r31,0
 1216 01a2 4F70      		andi r20,15
 1217 01a4 5527      		clr r21
 1218               	.LVL69:
 1219 01a6 00C0      		rjmp 2f
 1220               		1:
 1221 01a8 F595      		asr r31
 1222 01aa E795      		ror r30
 1223               		2:
 1224 01ac 4A95      		dec r20
 1225 01ae 02F4      		brpl 1b
 1226 01b0 E0FD      		sbrc r30,0
 1227 01b2 00C0      		rjmp .L50
 1228 01b4 A801      		movw r20,r16
 1229 01b6 022E      		mov r0,r18
 1230 01b8 00C0      		rjmp 2f
 1231               		1:
 1232 01ba 440F      		lsl r20
 1233 01bc 551F      		rol r21
 1234               		2:
 1235 01be 0A94      		dec r0
 1236 01c0 02F4      		brpl 1b
 1237 01c2 00C0      		rjmp .L37
 1238               	.L50:
 1239 01c4 40E0      		ldi r20,0
 1240 01c6 50E0      		ldi r21,0
 1241               	.L37:
 1242 01c8 842B      		or r24,r20
 1243 01ca 952B      		or r25,r21
 1244               	.LVL70:
 1245               	.L30:
 1246               	.LBE41:
 234:../../quantum/matrix.c ****     for(int x = 0; x < MATRIX_COLS; x++) {     
 1247               		.loc 1 234 0
 1248 01cc 2F5F      		subi r18,-1
 1249 01ce 3F4F      		sbci r19,-1
 1250               	.LVL71:
 1251 01d0 2E30      		cpi r18,14
 1252 01d2 3105      		cpc r19,__zero_reg__
 1253 01d4 01F0      		breq .+2
 1254 01d6 00C0      		rjmp .L38
 1255               	.LBE43:
 1256               	.LBE45:
 1257               	.LBE53:
 103:../../quantum/matrix.c ****         if (matrix_debouncing[i] != cols) {
 1258               		.loc 1 103 0
 1259 01d8 F601      		movw r30,r12
 1260 01da 2081      		ld r18,Z
 1261 01dc 3181      		ldd r19,Z+1
 1262               	.LVL72:
 1263 01de 2817      		cp r18,r24
 1264 01e0 3907      		cpc r19,r25
 1265 01e2 01F0      		breq .L39
 104:../../quantum/matrix.c ****             matrix_debouncing[i] = cols;
 1266               		.loc 1 104 0
 1267 01e4 9183      		std Z+1,r25
 1268 01e6 8083      		st Z,r24
 108:../../quantum/matrix.c ****             debouncing = DEBOUNCE;
 1269               		.loc 1 108 0
 1270 01e8 7092 0000 		sts debouncing,r7
 1271               	.L39:
 110:../../quantum/matrix.c ****         unselect_rows();
 1272               		.loc 1 110 0
 1273 01ec 0E94 0000 		call unselect_rows
 1274               	.LVL73:
 1275 01f0 F2E0      		ldi r31,2
 1276 01f2 CF0E      		add r12,r31
 1277 01f4 D11C      		adc r13,__zero_reg__
 1278               	.LBE35:
  99:../../quantum/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 1279               		.loc 1 99 0
 1280 01f6 EA14      		cp r14,r10
 1281 01f8 FB04      		cpc r15,r11
 1282 01fa 01F0      		breq .+2
 1283 01fc 00C0      		rjmp .L40
 1284               	.LBE34:
 113:../../quantum/matrix.c ****     if (debouncing) {
 1285               		.loc 1 113 0
 1286 01fe 8091 0000 		lds r24,debouncing
 1287 0202 8823      		tst r24
 1288 0204 01F0      		breq .L42
 114:../../quantum/matrix.c ****         if (--debouncing) {
 1289               		.loc 1 114 0
 1290 0206 8150      		subi r24,lo8(-(-1))
 1291 0208 8093 0000 		sts debouncing,r24
 1292 020c 8823      		tst r24
 1293 020e 01F0      		breq .L43
 1294               	.LVL74:
 1295               	.LBB54:
 1296               	.LBB55:
 164:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1297               		.loc 2 164 0
 1298 0210 8FE9      		ldi r24,lo8(3999)
 1299 0212 9FE0      		ldi r25,hi8(3999)
 1300 0214 0197      		1: sbiw r24,1
 1301 0216 01F4      		brne 1b
 1302 0218 00C0      		rjmp .
 1303 021a 0000      		nop
 1304 021c 00C0      		rjmp .L42
 1305               	.LVL75:
 1306               	.L43:
 1307               	.LBE55:
 1308               	.LBE54:
 1309               	.LBB56:
 118:../../quantum/matrix.c ****                 matrix[i] = matrix_debouncing[i];
 1310               		.loc 1 118 0
 1311 021e 8091 0000 		lds r24,matrix_debouncing
 1312 0222 9091 0000 		lds r25,matrix_debouncing+1
 1313 0226 9093 0000 		sts matrix+1,r25
 1314 022a 8093 0000 		sts matrix,r24
 1315               	.LVL76:
 1316 022e 8091 0000 		lds r24,matrix_debouncing+2
 1317 0232 9091 0000 		lds r25,matrix_debouncing+2+1
 1318 0236 9093 0000 		sts matrix+2+1,r25
 1319 023a 8093 0000 		sts matrix+2,r24
 1320               	.LVL77:
 1321 023e 8091 0000 		lds r24,matrix_debouncing+4
 1322 0242 9091 0000 		lds r25,matrix_debouncing+4+1
 1323 0246 9093 0000 		sts matrix+4+1,r25
 1324 024a 8093 0000 		sts matrix+4,r24
 1325               	.LVL78:
 1326 024e 8091 0000 		lds r24,matrix_debouncing+6
 1327 0252 9091 0000 		lds r25,matrix_debouncing+6+1
 1328 0256 9093 0000 		sts matrix+6+1,r25
 1329 025a 8093 0000 		sts matrix+6,r24
 1330               	.LVL79:
 1331 025e 8091 0000 		lds r24,matrix_debouncing+8
 1332 0262 9091 0000 		lds r25,matrix_debouncing+8+1
 1333 0266 9093 0000 		sts matrix+8+1,r25
 1334 026a 8093 0000 		sts matrix+8,r24
 1335               	.LVL80:
 1336               	.L42:
 1337               	.LBE56:
 155:../../quantum/matrix.c ****     if (matrix_scan_kb) {
 1338               		.loc 1 155 0
 1339 026e 80E0      		ldi r24,lo8(gs(matrix_scan_kb))
 1340 0270 90E0      		ldi r25,hi8(gs(matrix_scan_kb))
 1341 0272 892B      		or r24,r25
 1342 0274 01F0      		breq .L45
 156:../../quantum/matrix.c ****         (*matrix_scan_kb)();
 1343               		.loc 1 156 0
 1344 0276 0E94 0000 		call matrix_scan_kb
 1345               	.LVL81:
 1346               	.L45:
 160:../../quantum/matrix.c **** }
 1347               		.loc 1 160 0
 1348 027a 81E0      		ldi r24,lo8(1)
 1349               	/* epilogue start */
 1350 027c A696      		adiw r28,38
 1351 027e 0FB6      		in __tmp_reg__,__SREG__
 1352 0280 F894      		cli
 1353 0282 DEBF      		out __SP_H__,r29
 1354 0284 0FBE      		out __SREG__,__tmp_reg__
 1355 0286 CDBF      		out __SP_L__,r28
 1356 0288 DF91      		pop r29
 1357 028a CF91      		pop r28
 1358 028c 1F91      		pop r17
 1359 028e 0F91      		pop r16
 1360 0290 FF90      		pop r15
 1361 0292 EF90      		pop r14
 1362 0294 DF90      		pop r13
 1363 0296 CF90      		pop r12
 1364 0298 BF90      		pop r11
 1365 029a AF90      		pop r10
 1366 029c 9F90      		pop r9
 1367 029e 8F90      		pop r8
 1368 02a0 7F90      		pop r7
 1369 02a2 6F90      		pop r6
 1370 02a4 5F90      		pop r5
 1371 02a6 0895      		ret
 1372               		.cfi_endproc
 1373               	.LFE11:
 1375               		.section	.text.matrix_is_modified,"ax",@progbits
 1376               	.global	matrix_is_modified
 1378               	matrix_is_modified:
 1379               	.LFB12:
 163:../../quantum/matrix.c **** {
 1380               		.loc 1 163 0
 1381               		.cfi_startproc
 1382               	/* prologue: function */
 1383               	/* frame size = 0 */
 1384               	/* stack size = 0 */
 1385               	.L__stack_usage = 0
 164:../../quantum/matrix.c ****     if (debouncing) return false;
 1386               		.loc 1 164 0
 1387 0000 81E0      		ldi r24,lo8(1)
 1388 0002 9091 0000 		lds r25,debouncing
 1389 0006 9111      		cpse r25,__zero_reg__
 1390 0008 80E0      		ldi r24,0
 1391               	.L63:
 166:../../quantum/matrix.c **** }
 1392               		.loc 1 166 0
 1393 000a 0895      		ret
 1394               		.cfi_endproc
 1395               	.LFE12:
 1397               		.section	.text.matrix_is_on,"ax",@progbits
 1398               	.global	matrix_is_on
 1400               	matrix_is_on:
 1401               	.LFB13:
 170:../../quantum/matrix.c **** {
 1402               		.loc 1 170 0
 1403               		.cfi_startproc
 1404               	.LVL82:
 1405               	/* prologue: function */
 1406               	/* frame size = 0 */
 1407               	/* stack size = 0 */
 1408               	.L__stack_usage = 0
 171:../../quantum/matrix.c ****     return (matrix[row] & ((matrix_row_t)1<col));
 1409               		.loc 1 171 0
 1410 0000 21E0      		ldi r18,lo8(1)
 1411 0002 30E0      		ldi r19,0
 1412 0004 6230      		cpi r22,lo8(2)
 1413 0006 00F4      		brsh .L68
 1414 0008 20E0      		ldi r18,0
 1415 000a 30E0      		ldi r19,0
 1416               	.L68:
 1417 000c E82F      		mov r30,r24
 1418 000e F0E0      		ldi r31,0
 1419 0010 EE0F      		lsl r30
 1420 0012 FF1F      		rol r31
 1421               	.LVL83:
 1422 0014 E050      		subi r30,lo8(-(matrix))
 1423 0016 F040      		sbci r31,hi8(-(matrix))
 1424 0018 8081      		ld r24,Z
 1425               	.LVL84:
 1426 001a 8223      		and r24,r18
 172:../../quantum/matrix.c **** }
 1427               		.loc 1 172 0
 1428 001c 8170      		andi r24,lo8(1)
 1429 001e 0895      		ret
 1430               		.cfi_endproc
 1431               	.LFE13:
 1433               		.section	.text.matrix_get_row,"ax",@progbits
 1434               	.global	matrix_get_row
 1436               	matrix_get_row:
 1437               	.LFB14:
 176:../../quantum/matrix.c **** {
 1438               		.loc 1 176 0
 1439               		.cfi_startproc
 1440               	.LVL85:
 1441               	/* prologue: function */
 1442               	/* frame size = 0 */
 1443               	/* stack size = 0 */
 1444               	.L__stack_usage = 0
 177:../../quantum/matrix.c ****     return matrix[row];
 1445               		.loc 1 177 0
 1446 0000 E82F      		mov r30,r24
 1447 0002 F0E0      		ldi r31,0
 1448 0004 EE0F      		lsl r30
 1449 0006 FF1F      		rol r31
 1450 0008 E050      		subi r30,lo8(-(matrix))
 1451 000a F040      		sbci r31,hi8(-(matrix))
 178:../../quantum/matrix.c **** }
 1452               		.loc 1 178 0
 1453 000c 8081      		ld r24,Z
 1454               	.LVL86:
 1455 000e 9181      		ldd r25,Z+1
 1456 0010 0895      		ret
 1457               		.cfi_endproc
 1458               	.LFE14:
 1460               		.section	.text.matrix_print,"ax",@progbits
 1461               	.global	matrix_print
 1463               	matrix_print:
 1464               	.LFB15:
 181:../../quantum/matrix.c **** {
 1465               		.loc 1 181 0
 1466               		.cfi_startproc
 1467               	/* prologue: function */
 1468               	/* frame size = 0 */
 1469               	/* stack size = 0 */
 1470               	.L__stack_usage = 0
 1471               	.LVL87:
 1472 0000 0895      		ret
 1473               		.cfi_endproc
 1474               	.LFE15:
 1476               		.section	.text.matrix_key_count,"ax",@progbits
 1477               	.global	matrix_key_count
 1479               	matrix_key_count:
 1480               	.LFB16:
 191:../../quantum/matrix.c **** {
 1481               		.loc 1 191 0
 1482               		.cfi_startproc
 191:../../quantum/matrix.c **** {
 1483               		.loc 1 191 0
 1484 0000 1F93      		push r17
 1485               	.LCFI51:
 1486               		.cfi_def_cfa_offset 3
 1487               		.cfi_offset 17, -2
 1488 0002 CF93      		push r28
 1489               	.LCFI52:
 1490               		.cfi_def_cfa_offset 4
 1491               		.cfi_offset 28, -3
 1492 0004 DF93      		push r29
 1493               	.LCFI53:
 1494               		.cfi_def_cfa_offset 5
 1495               		.cfi_offset 29, -4
 1496               	/* prologue: function */
 1497               	/* frame size = 0 */
 1498               	/* stack size = 3 */
 1499               	.L__stack_usage = 3
 1500               	.LVL88:
 1501 0006 C0E0      		ldi r28,lo8(matrix)
 1502 0008 D0E0      		ldi r29,hi8(matrix)
 192:../../quantum/matrix.c ****     uint8_t count = 0;
 1503               		.loc 1 192 0
 1504 000a 10E0      		ldi r17,0
 1505               	.LVL89:
 1506               	.L72:
 1507               	.LBB57:
 194:../../quantum/matrix.c ****         count += bitpop16(matrix[i]);
 1508               		.loc 1 194 0 discriminator 2
 1509 000c 8991      		ld r24,Y+
 1510 000e 9991      		ld r25,Y+
 1511 0010 0E94 0000 		call bitpop16
 1512               	.LVL90:
 1513 0014 180F      		add r17,r24
 1514               	.LVL91:
 193:../../quantum/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 1515               		.loc 1 193 0 discriminator 2
 1516 0016 80E0      		ldi r24,hi8(matrix+10)
 1517 0018 C030      		cpi r28,lo8(matrix+10)
 1518 001a D807      		cpc r29,r24
 1519 001c 01F4      		brne .L72
 1520               	.LBE57:
 197:../../quantum/matrix.c **** }
 1521               		.loc 1 197 0
 1522 001e 812F      		mov r24,r17
 1523               	/* epilogue start */
 1524 0020 DF91      		pop r29
 1525 0022 CF91      		pop r28
 1526 0024 1F91      		pop r17
 1527               	.LVL92:
 1528 0026 0895      		ret
 1529               		.cfi_endproc
 1530               	.LFE16:
 1532               		.section	.bss.matrix,"aw",@nobits
 1535               	matrix:
 1536 0000 0000 0000 		.zero	10
 1536      0000 0000 
 1536      0000 
 1537               		.section	.bss.matrix_debouncing,"aw",@nobits
 1540               	matrix_debouncing:
 1541 0000 0000 0000 		.zero	10
 1541      0000 0000 
 1541      0000 
 1542               		.section	.data.debouncing,"aw",@progbits
 1545               	debouncing:
 1546 0000 05        		.byte	5
 1547               		.text
 1548               	.Letext0:
 1549               		.file 3 "d:\\applications\\keyboard\\avr-gcc-4.7.2-mingw32\\bin\\../lib/gcc/avr/4.7.2/../../../../
 1550               		.file 4 "../../tmk_core/common/matrix.h"
 1551               		.file 5 "../../tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:00000000 matrix.c
C:\Users\tiny\AppData\Local\Temp\cc3Cnl9r.s:2      *ABS*:0000003e __SP_H__
C:\Users\tiny\AppData\Local\Temp\cc3Cnl9r.s:3      *ABS*:0000003d __SP_L__
C:\Users\tiny\AppData\Local\Temp\cc3Cnl9r.s:4      *ABS*:0000003f __SREG__
C:\Users\tiny\AppData\Local\Temp\cc3Cnl9r.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\tiny\AppData\Local\Temp\cc3Cnl9r.s:6      *ABS*:00000001 __zero_reg__
C:\Users\tiny\AppData\Local\Temp\cc3Cnl9r.s:13     .text.matrix_init_kb:00000000 matrix_init_kb
C:\Users\tiny\AppData\Local\Temp\cc3Cnl9r.s:30     .text.matrix_scan_kb:00000000 matrix_scan_kb
C:\Users\tiny\AppData\Local\Temp\cc3Cnl9r.s:52     .text.unselect_rows:00000000 unselect_rows
C:\Users\tiny\AppData\Local\Temp\cc3Cnl9r.s:377    .text.matrix_rows:00000000 matrix_rows
C:\Users\tiny\AppData\Local\Temp\cc3Cnl9r.s:394    .text.matrix_cols:00000000 matrix_cols
C:\Users\tiny\AppData\Local\Temp\cc3Cnl9r.s:427    .text.matrix_init:00000000 matrix_init
C:\Users\tiny\AppData\Local\Temp\cc3Cnl9r.s:1535   .bss.matrix:00000000 matrix
C:\Users\tiny\AppData\Local\Temp\cc3Cnl9r.s:1540   .bss.matrix_debouncing:00000000 matrix_debouncing
C:\Users\tiny\AppData\Local\Temp\cc3Cnl9r.s:840    .text.matrix_scan:00000000 matrix_scan
C:\Users\tiny\AppData\Local\Temp\cc3Cnl9r.s:1545   .data.debouncing:00000000 debouncing
C:\Users\tiny\AppData\Local\Temp\cc3Cnl9r.s:1378   .text.matrix_is_modified:00000000 matrix_is_modified
C:\Users\tiny\AppData\Local\Temp\cc3Cnl9r.s:1400   .text.matrix_is_on:00000000 matrix_is_on
C:\Users\tiny\AppData\Local\Temp\cc3Cnl9r.s:1436   .text.matrix_get_row:00000000 matrix_get_row
C:\Users\tiny\AppData\Local\Temp\cc3Cnl9r.s:1463   .text.matrix_print:00000000 matrix_print
C:\Users\tiny\AppData\Local\Temp\cc3Cnl9r.s:1479   .text.matrix_key_count:00000000 matrix_key_count

UNDEFINED SYMBOLS
bitpop16
__do_copy_data
__do_clear_bss
