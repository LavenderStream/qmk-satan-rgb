   1               		.file	"bootmagic.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.scan_keycode,"ax",@progbits
  12               	scan_keycode:
  13               	.LFB104:
  14               		.file 1 "../../tmk_core/common/bootmagic.c"
   1:../../tmk_core/common/bootmagic.c **** #include <stdint.h>
   2:../../tmk_core/common/bootmagic.c **** #include <stdbool.h>
   3:../../tmk_core/common/bootmagic.c **** #include <util/delay.h>
   4:../../tmk_core/common/bootmagic.c **** #include "matrix.h"
   5:../../tmk_core/common/bootmagic.c **** #include "bootloader.h"
   6:../../tmk_core/common/bootmagic.c **** #include "debug.h"
   7:../../tmk_core/common/bootmagic.c **** #include "keymap.h"
   8:../../tmk_core/common/bootmagic.c **** #include "host.h"
   9:../../tmk_core/common/bootmagic.c **** #include "action_layer.h"
  10:../../tmk_core/common/bootmagic.c **** #include "eeconfig.h"
  11:../../tmk_core/common/bootmagic.c **** #include "bootmagic.h"
  12:../../tmk_core/common/bootmagic.c **** 
  13:../../tmk_core/common/bootmagic.c **** 
  14:../../tmk_core/common/bootmagic.c **** void bootmagic(void)
  15:../../tmk_core/common/bootmagic.c **** {
  16:../../tmk_core/common/bootmagic.c ****     /* check signature */
  17:../../tmk_core/common/bootmagic.c ****     if (!eeconfig_is_enabled()) {
  18:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
  19:../../tmk_core/common/bootmagic.c ****     }
  20:../../tmk_core/common/bootmagic.c **** 
  21:../../tmk_core/common/bootmagic.c ****     /* do scans in case of bounce */
  22:../../tmk_core/common/bootmagic.c ****     print("boogmagic scan: ... ");
  23:../../tmk_core/common/bootmagic.c ****     uint8_t scan = 100;
  24:../../tmk_core/common/bootmagic.c ****     while (scan--) { matrix_scan(); _delay_ms(10); }
  25:../../tmk_core/common/bootmagic.c ****     print("done.\n");
  26:../../tmk_core/common/bootmagic.c **** 
  27:../../tmk_core/common/bootmagic.c ****     /* bootmagic skip */
  28:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
  29:../../tmk_core/common/bootmagic.c ****         return;
  30:../../tmk_core/common/bootmagic.c ****     }
  31:../../tmk_core/common/bootmagic.c **** 
  32:../../tmk_core/common/bootmagic.c ****     /* eeconfig clear */
  33:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
  34:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
  35:../../tmk_core/common/bootmagic.c ****     }
  36:../../tmk_core/common/bootmagic.c **** 
  37:../../tmk_core/common/bootmagic.c ****     /* bootloader */
  38:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
  39:../../tmk_core/common/bootmagic.c ****         bootloader_jump();
  40:../../tmk_core/common/bootmagic.c ****     }
  41:../../tmk_core/common/bootmagic.c **** 
  42:../../tmk_core/common/bootmagic.c ****     /* debug enable */
  43:../../tmk_core/common/bootmagic.c ****     debug_config.raw = eeconfig_read_debug();
  44:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
  45:../../tmk_core/common/bootmagic.c ****         if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
  46:../../tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
  47:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
  48:../../tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
  49:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
  50:../../tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
  51:../../tmk_core/common/bootmagic.c ****         } else {
  52:../../tmk_core/common/bootmagic.c ****             debug_config.enable = !debug_config.enable;
  53:../../tmk_core/common/bootmagic.c ****         }
  54:../../tmk_core/common/bootmagic.c ****     }
  55:../../tmk_core/common/bootmagic.c ****     eeconfig_write_debug(debug_config.raw);
  56:../../tmk_core/common/bootmagic.c **** 
  57:../../tmk_core/common/bootmagic.c ****     /* keymap config */
  58:../../tmk_core/common/bootmagic.c ****     keymap_config.raw = eeconfig_read_keymap();
  59:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
  60:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
  61:../../tmk_core/common/bootmagic.c ****     }
  62:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
  63:../../tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
  64:../../tmk_core/common/bootmagic.c ****     }
  65:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
  66:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
  67:../../tmk_core/common/bootmagic.c ****     }
  68:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
  69:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
  70:../../tmk_core/common/bootmagic.c ****     }
  71:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
  72:../../tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
  73:../../tmk_core/common/bootmagic.c ****     }
  74:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
  75:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
  76:../../tmk_core/common/bootmagic.c ****     }
  77:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
  78:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
  79:../../tmk_core/common/bootmagic.c ****     }
  80:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
  81:../../tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
  82:../../tmk_core/common/bootmagic.c ****     }
  83:../../tmk_core/common/bootmagic.c ****     eeconfig_write_keymap(keymap_config.raw);
  84:../../tmk_core/common/bootmagic.c **** 
  85:../../tmk_core/common/bootmagic.c **** #ifdef NKRO_ENABLE
  86:../../tmk_core/common/bootmagic.c ****     keyboard_nkro = keymap_config.nkro;
  87:../../tmk_core/common/bootmagic.c **** #endif
  88:../../tmk_core/common/bootmagic.c **** 
  89:../../tmk_core/common/bootmagic.c ****     /* default layer */
  90:../../tmk_core/common/bootmagic.c ****     uint8_t default_layer = 0;
  91:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
  92:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
  93:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
  94:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
  95:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
  96:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
  97:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
  98:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
  99:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 100:../../tmk_core/common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 101:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 102:../../tmk_core/common/bootmagic.c ****     } else {
 103:../../tmk_core/common/bootmagic.c ****         default_layer = eeconfig_read_default_layer();
 104:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 105:../../tmk_core/common/bootmagic.c ****     }
 106:../../tmk_core/common/bootmagic.c **** }
 107:../../tmk_core/common/bootmagic.c **** 
 108:../../tmk_core/common/bootmagic.c **** static bool scan_keycode(uint8_t keycode)
 109:../../tmk_core/common/bootmagic.c **** {
  15               		.loc 1 109 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 CF92      		push r12
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 12, -2
  22 0002 DF92      		push r13
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 13, -3
  26 0004 EF92      		push r14
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 14, -4
  30 0006 FF92      		push r15
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 15, -5
  34 0008 0F93      		push r16
  35               	.LCFI4:
  36               		.cfi_def_cfa_offset 7
  37               		.cfi_offset 16, -6
  38 000a 1F93      		push r17
  39               	.LCFI5:
  40               		.cfi_def_cfa_offset 8
  41               		.cfi_offset 17, -7
  42 000c CF93      		push r28
  43               	.LCFI6:
  44               		.cfi_def_cfa_offset 9
  45               		.cfi_offset 28, -8
  46 000e DF93      		push r29
  47               	.LCFI7:
  48               		.cfi_def_cfa_offset 10
  49               		.cfi_offset 29, -9
  50               	/* prologue: function */
  51               	/* frame size = 0 */
  52               	/* stack size = 8 */
  53               	.L__stack_usage = 8
  54 0010 C82E      		mov r12,r24
  55               	.LVL1:
 110:../../tmk_core/common/bootmagic.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
  56               		.loc 1 110 0
  57 0012 D12C      		mov r13,__zero_reg__
  58               	.LBB4:
  59               	.LBB5:
  60               	.LBB6:
 111:../../tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
 112:../../tmk_core/common/bootmagic.c ****         for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 113:../../tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1<<c)) {
  61               		.loc 1 113 0
  62 0014 01E0      		ldi r16,lo8(1)
  63 0016 10E0      		ldi r17,0
  64               	.LVL2:
  65               	.L7:
  66               	.LBE6:
 111:../../tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
  67               		.loc 1 111 0
  68 0018 8D2D      		mov r24,r13
  69 001a 0E94 0000 		call matrix_get_row
  70               	.LVL3:
  71 001e 7C01      		movw r14,r24
  72               	.LVL4:
  73 0020 C0E0      		ldi r28,0
  74 0022 D0E0      		ldi r29,0
  75               	.LVL5:
  76               	.L3:
  77               	.LBB7:
  78               		.loc 1 113 0
  79 0024 9801      		movw r18,r16
  80 0026 0C2E      		mov r0,r28
  81 0028 00C0      		rjmp 2f
  82               		1:
  83 002a 220F      		lsl r18
  84 002c 331F      		rol r19
  85               		2:
  86 002e 0A94      		dec r0
  87 0030 02F4      		brpl 1b
  88 0032 2E21      		and r18,r14
  89 0034 3F21      		and r19,r15
  90 0036 232B      		or r18,r19
  91 0038 01F4      		brne .L2
  92               	.L6:
  93 003a 2196      		adiw r28,1
 112:../../tmk_core/common/bootmagic.c ****         for (uint8_t c = 0; c < MATRIX_COLS; c++) {
  94               		.loc 1 112 0
  95 003c CE30      		cpi r28,14
  96 003e D105      		cpc r29,__zero_reg__
  97 0040 01F4      		brne .L3
  98 0042 00C0      		rjmp .L11
  99               	.L2:
 114:../../tmk_core/common/bootmagic.c ****                 if (keycode == keymap_key_to_keycode(0, (keypos_t){ .row = r, .col = c })) {
 100               		.loc 1 114 0
 101 0044 6C2F      		mov r22,r28
 102 0046 7D2D      		mov r23,r13
 103 0048 80E0      		ldi r24,0
 104 004a 0E94 0000 		call keymap_key_to_keycode
 105               	.LVL6:
 106 004e C812      		cpse r12,r24
 107 0050 00C0      		rjmp .L6
 108 0052 00C0      		rjmp .L8
 109               	.L11:
 110               	.LBE7:
 111               	.LBE5:
 110:../../tmk_core/common/bootmagic.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 112               		.loc 1 110 0
 113 0054 D394      		inc r13
 114               	.LVL7:
 115 0056 85E0      		ldi r24,lo8(5)
 116 0058 D812      		cpse r13,r24
 117 005a 00C0      		rjmp .L7
 115:../../tmk_core/common/bootmagic.c ****                     return true;
 116:../../tmk_core/common/bootmagic.c ****                 }
 117:../../tmk_core/common/bootmagic.c ****             }
 118:../../tmk_core/common/bootmagic.c ****         }
 119:../../tmk_core/common/bootmagic.c ****     }
 120:../../tmk_core/common/bootmagic.c ****     return false;
 118               		.loc 1 120 0
 119 005c 80E0      		ldi r24,0
 120 005e 00C0      		rjmp .L5
 121               	.LVL8:
 122               	.L8:
 123               	.LBB9:
 124               	.LBB8:
 115:../../tmk_core/common/bootmagic.c ****                     return true;
 125               		.loc 1 115 0
 126 0060 81E0      		ldi r24,lo8(1)
 127               	.L5:
 128               	/* epilogue start */
 129               	.LBE8:
 130               	.LBE9:
 131               	.LBE4:
 121:../../tmk_core/common/bootmagic.c **** }
 132               		.loc 1 121 0
 133 0062 DF91      		pop r29
 134 0064 CF91      		pop r28
 135 0066 1F91      		pop r17
 136 0068 0F91      		pop r16
 137 006a FF90      		pop r15
 138 006c EF90      		pop r14
 139               	.LVL9:
 140 006e DF90      		pop r13
 141 0070 CF90      		pop r12
 142               	.LVL10:
 143 0072 0895      		ret
 144               		.cfi_endproc
 145               	.LFE104:
 147               		.section	.text.bootmagic_scan_keycode,"ax",@progbits
 148               	.global	bootmagic_scan_keycode
 150               	bootmagic_scan_keycode:
 151               	.LFB105:
 122:../../tmk_core/common/bootmagic.c **** 
 123:../../tmk_core/common/bootmagic.c **** bool bootmagic_scan_keycode(uint8_t keycode)
 124:../../tmk_core/common/bootmagic.c **** {
 152               		.loc 1 124 0
 153               		.cfi_startproc
 154               	.LVL11:
 155 0000 CF93      		push r28
 156               	.LCFI8:
 157               		.cfi_def_cfa_offset 3
 158               		.cfi_offset 28, -2
 159               	/* prologue: function */
 160               	/* frame size = 0 */
 161               	/* stack size = 1 */
 162               	.L__stack_usage = 1
 163 0002 C82F      		mov r28,r24
 125:../../tmk_core/common/bootmagic.c ****     if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;
 164               		.loc 1 125 0
 165 0004 8CE2      		ldi r24,lo8(44)
 166               	.LVL12:
 167 0006 0E94 0000 		call scan_keycode
 168               	.LVL13:
 169 000a 8823      		tst r24
 170 000c 01F0      		breq .L13
 126:../../tmk_core/common/bootmagic.c **** 
 127:../../tmk_core/common/bootmagic.c ****     return scan_keycode(keycode);
 171               		.loc 1 127 0
 172 000e 8C2F      		mov r24,r28
 173               	/* epilogue start */
 128:../../tmk_core/common/bootmagic.c **** }
 174               		.loc 1 128 0
 175 0010 CF91      		pop r28
 176               	.LVL14:
 127:../../tmk_core/common/bootmagic.c ****     return scan_keycode(keycode);
 177               		.loc 1 127 0
 178 0012 0C94 0000 		jmp scan_keycode
 179               	.LVL15:
 180               	.L13:
 181               		.loc 1 128 0
 182 0016 80E0      		ldi r24,0
 183               	/* epilogue start */
 184 0018 CF91      		pop r28
 185               	.LVL16:
 186 001a 0895      		ret
 187               		.cfi_endproc
 188               	.LFE105:
 190               		.section	.text.bootmagic,"ax",@progbits
 191               	.global	bootmagic
 193               	bootmagic:
 194               	.LFB103:
  15:../../tmk_core/common/bootmagic.c **** {
 195               		.loc 1 15 0
 196               		.cfi_startproc
 197 0000 CF93      		push r28
 198               	.LCFI9:
 199               		.cfi_def_cfa_offset 3
 200               		.cfi_offset 28, -2
 201               	/* prologue: function */
 202               	/* frame size = 0 */
 203               	/* stack size = 1 */
 204               	.L__stack_usage = 1
  17:../../tmk_core/common/bootmagic.c ****     if (!eeconfig_is_enabled()) {
 205               		.loc 1 17 0
 206 0002 0E94 0000 		call eeconfig_is_enabled
 207               	.LVL17:
 208 0006 8111      		cpse r24,__zero_reg__
 209 0008 00C0      		rjmp .L15
  18:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
 210               		.loc 1 18 0
 211 000a 0E94 0000 		call eeconfig_init
 212               	.LVL18:
 213               	.L15:
  15:../../tmk_core/common/bootmagic.c **** {
 214               		.loc 1 15 0 discriminator 1
 215 000e C5E6      		ldi r28,lo8(101)
 216 0010 00C0      		rjmp .L16
 217               	.L17:
  24:../../tmk_core/common/bootmagic.c ****     while (scan--) { matrix_scan(); _delay_ms(10); }
 218               		.loc 1 24 0 discriminator 2
 219 0012 0E94 0000 		call matrix_scan
 220               	.LVL19:
 221               	.LBB10:
 222               	.LBB11:
 223               		.file 2 "d:\\applications\\keyboard\\avr-gcc-4.7.2-mingw32\\bin\\../lib/gcc/avr/4.7.2/../../../../
   1:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    All rights reserved.
   5:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
   6:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
   9:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  12:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****      the documentation and/or other materials provided with the
  15:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****      distribution.
  16:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  17:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****      contributors may be used to endorse or promote products derived
  19:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****      from this software without specific prior written permission.
  20:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  21:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  33:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  35:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  38:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #define __HAS_DELAY_CYCLES 1
  40:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #endif
  41:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  42:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #include <inttypes.h>
  43:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #include <util/delay_basic.h>
  44:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #include <math.h>
  45:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  46:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** /** \file */
  47:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     \code
  49:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     //#define F_CPU 14.7456E6
  51:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     #include <util/delay.h>
  52:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     \endcode
  53:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  54:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     \note As an alternative method, it is possible to pass the
  55:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     used.
  58:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  59:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     The functions in this header file are wrappers around the basic
  60:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     convenience functions where actual time values can be specified
  62:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     that compile-time constant expressions will be eliminated by
  64:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     compiler optimization so floating-point expressions can be used
  65:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     frequency passed by the macro F_CPU.
  67:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  68:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     \note In order for these functions to work as intended, compiler
  69:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     <em>must</em> be an expression that is a known constant at
  71:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     delay will be much longer (and basically unpredictable), and
  73:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     applications that otherwise do not use floating-point calculations
  74:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     will experience severe code bloat by the floating-point library
  75:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     routines linked into the application.
  76:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  77:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     The functions available allow the specification of microsecond, and
  78:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     millisecond delays directly, using the application-supplied macro
  79:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  81:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** */
  82:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  83:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #if !defined(__DOXYGEN__)
  84:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #endif
  87:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  88:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #ifndef F_CPU
  89:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** /* prevent compiler error by supplying a default */
  90:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** # define F_CPU 1000000UL
  92:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #endif
  93:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  94:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #ifndef __OPTIMIZE__
  95:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #endif
  97:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
  98:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   __STDC_HOSTED__
 101:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #  include <math.h>
 102:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #endif
 103:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 104:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** /**
 105:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    \ingroup util_delay
 106:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 107:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 109:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    The macro F_CPU is supposed to be defined to a
 110:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 112:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 114:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    When the user request delay which exceed the maximum possible one,
 115:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    user will not be informed about decreased resolution.
 119:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 120:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    values greater than the maximal possible delay, overflows results in
 123:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    no delay i.e., 0ms.
 124:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 125:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    the user gets atleast __us microseconds of delay.
 128:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 129:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    to round down and round to closest integer.
 131:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 132:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    Also, the backward compatible
 136:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****    required for rounding are not available to the compiler then.
 139:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 140:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****  */
 141:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** void
 142:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** _delay_ms(double __ms)
 143:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** {
 144:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	uint16_t __ticks;
 145:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	double __tmp ; 
 146:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h ****   __STDC_HOSTED__
 149:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	uint32_t __ticks_dc;
 150:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 153:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 156:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 159:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	#else
 160:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 		//round up by default
 161:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	#endif
 163:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 
 164:d:\applications\keyboard\avr-gcc-4.7.2-mingw32\bin\../lib/gcc/avr/4.7.2/../../../../avr/include/util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 224               		.loc 2 164 0 discriminator 2
 225 0016 8FE3      		ldi r24,lo8(-25537)
 226 0018 9CE9      		ldi r25,hi8(-25537)
 227 001a 0197      		1: sbiw r24,1
 228 001c 01F4      		brne 1b
 229 001e 00C0      		rjmp .
 230 0020 0000      		nop
 231               	.LVL20:
 232               	.L16:
 233 0022 C150      		subi r28,lo8(-(-1))
 234               	.LBE11:
 235               	.LBE10:
  24:../../tmk_core/common/bootmagic.c ****     while (scan--) { matrix_scan(); _delay_ms(10); }
 236               		.loc 1 24 0 discriminator 1
 237 0024 01F4      		brne .L17
  28:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
 238               		.loc 1 28 0
 239 0026 89E2      		ldi r24,lo8(41)
 240 0028 0E94 0000 		call bootmagic_scan_keycode
 241               	.LVL21:
 242 002c 8111      		cpse r24,__zero_reg__
 243 002e 00C0      		rjmp .L14
  33:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
 244               		.loc 1 33 0
 245 0030 8AE2      		ldi r24,lo8(42)
 246 0032 0E94 0000 		call bootmagic_scan_keycode
 247               	.LVL22:
 248 0036 8111      		cpse r24,__zero_reg__
  34:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
 249               		.loc 1 34 0
 250 0038 0E94 0000 		call eeconfig_init
 251               	.LVL23:
 252               	.L19:
  38:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
 253               		.loc 1 38 0
 254 003c 85E0      		ldi r24,lo8(5)
 255 003e 0E94 0000 		call bootmagic_scan_keycode
 256               	.LVL24:
 257 0042 8111      		cpse r24,__zero_reg__
  39:../../tmk_core/common/bootmagic.c ****         bootloader_jump();
 258               		.loc 1 39 0
 259 0044 0E94 0000 		call bootloader_jump
 260               	.LVL25:
 261               	.L20:
  43:../../tmk_core/common/bootmagic.c ****     debug_config.raw = eeconfig_read_debug();
 262               		.loc 1 43 0
 263 0048 0E94 0000 		call eeconfig_read_debug
 264               	.LVL26:
 265 004c 8093 0000 		sts debug_config,r24
  44:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
 266               		.loc 1 44 0
 267 0050 87E0      		ldi r24,lo8(7)
 268 0052 0E94 0000 		call bootmagic_scan_keycode
 269               	.LVL27:
 270 0056 8823      		tst r24
 271 0058 01F0      		breq .L21
  45:../../tmk_core/common/bootmagic.c ****         if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
 272               		.loc 1 45 0
 273 005a 8BE1      		ldi r24,lo8(27)
 274 005c 0E94 0000 		call bootmagic_scan_keycode
 275               	.LVL28:
 276 0060 8823      		tst r24
 277 0062 01F0      		breq .L22
  46:../../tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
 278               		.loc 1 46 0
 279 0064 9091 0000 		lds r25,debug_config
 280 0068 91FB      		bst r25,1
 281 006a 8827      		clr r24
 282 006c 80F9      		bld r24,0
 283 006e 21E0      		ldi r18,lo8(1)
 284 0070 8227      		eor r24,r18
 285 0072 80FB      		bst r24,0
 286 0074 91F9      		bld r25,1
 287 0076 00C0      		rjmp .L93
 288               	.L22:
  47:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
 289               		.loc 1 47 0
 290 0078 8EE0      		ldi r24,lo8(14)
 291 007a 0E94 0000 		call bootmagic_scan_keycode
 292               	.LVL29:
 293 007e 8823      		tst r24
 294 0080 01F0      		breq .L23
  48:../../tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
 295               		.loc 1 48 0
 296 0082 9091 0000 		lds r25,debug_config
 297 0086 92FB      		bst r25,2
 298 0088 8827      		clr r24
 299 008a 80F9      		bld r24,0
 300 008c 21E0      		ldi r18,lo8(1)
 301 008e 8227      		eor r24,r18
 302 0090 80FB      		bst r24,0
 303 0092 92F9      		bld r25,2
 304 0094 00C0      		rjmp .L93
 305               	.L23:
  49:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
 306               		.loc 1 49 0
 307 0096 80E1      		ldi r24,lo8(16)
 308 0098 0E94 0000 		call bootmagic_scan_keycode
 309               	.LVL30:
 310 009c 9091 0000 		lds r25,debug_config
 311 00a0 8823      		tst r24
 312 00a2 01F0      		breq .L24
  50:../../tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
 313               		.loc 1 50 0
 314 00a4 93FB      		bst r25,3
 315 00a6 8827      		clr r24
 316 00a8 80F9      		bld r24,0
 317 00aa 21E0      		ldi r18,lo8(1)
 318 00ac 8227      		eor r24,r18
 319 00ae 80FB      		bst r24,0
 320 00b0 93F9      		bld r25,3
 321 00b2 00C0      		rjmp .L93
 322               	.L24:
  52:../../tmk_core/common/bootmagic.c ****             debug_config.enable = !debug_config.enable;
 323               		.loc 1 52 0
 324 00b4 892F      		mov r24,r25
 325 00b6 8095      		com r24
 326 00b8 80FB      		bst r24,0
 327 00ba 90F9      		bld r25,0
 328               	.L93:
 329 00bc 9093 0000 		sts debug_config,r25
 330               	.L21:
  55:../../tmk_core/common/bootmagic.c ****     eeconfig_write_debug(debug_config.raw);
 331               		.loc 1 55 0
 332 00c0 8091 0000 		lds r24,debug_config
 333 00c4 0E94 0000 		call eeconfig_write_debug
 334               	.LVL31:
  58:../../tmk_core/common/bootmagic.c ****     keymap_config.raw = eeconfig_read_keymap();
 335               		.loc 1 58 0
 336 00c8 0E94 0000 		call eeconfig_read_keymap
 337               	.LVL32:
 338 00cc 8093 0000 		sts keymap_config,r24
  59:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
 339               		.loc 1 59 0
 340 00d0 80EE      		ldi r24,lo8(-32)
 341 00d2 0E94 0000 		call bootmagic_scan_keycode
 342               	.LVL33:
 343 00d6 8823      		tst r24
 344 00d8 01F0      		breq .L25
  60:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
 345               		.loc 1 60 0
 346 00da 8091 0000 		lds r24,keymap_config
 347 00de 982F      		mov r25,r24
 348 00e0 9095      		com r25
 349 00e2 90FB      		bst r25,0
 350 00e4 80F9      		bld r24,0
 351 00e6 8093 0000 		sts keymap_config,r24
 352               	.L25:
  62:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
 353               		.loc 1 62 0
 354 00ea 89E3      		ldi r24,lo8(57)
 355 00ec 0E94 0000 		call bootmagic_scan_keycode
 356               	.LVL34:
 357 00f0 8823      		tst r24
 358 00f2 01F0      		breq .L26
  63:../../tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
 359               		.loc 1 63 0
 360 00f4 9091 0000 		lds r25,keymap_config
 361 00f8 91FB      		bst r25,1
 362 00fa 8827      		clr r24
 363 00fc 80F9      		bld r24,0
 364 00fe 21E0      		ldi r18,lo8(1)
 365 0100 8227      		eor r24,r18
 366 0102 80FB      		bst r24,0
 367 0104 91F9      		bld r25,1
 368 0106 9093 0000 		sts keymap_config,r25
 369               	.L26:
  65:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
 370               		.loc 1 65 0
 371 010a 82EE      		ldi r24,lo8(-30)
 372 010c 0E94 0000 		call bootmagic_scan_keycode
 373               	.LVL35:
 374 0110 8823      		tst r24
 375 0112 01F0      		breq .L27
  66:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
 376               		.loc 1 66 0
 377 0114 9091 0000 		lds r25,keymap_config
 378 0118 92FB      		bst r25,2
 379 011a 8827      		clr r24
 380 011c 80F9      		bld r24,0
 381 011e 21E0      		ldi r18,lo8(1)
 382 0120 8227      		eor r24,r18
 383 0122 80FB      		bst r24,0
 384 0124 92F9      		bld r25,2
 385 0126 9093 0000 		sts keymap_config,r25
 386               	.L27:
  68:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
 387               		.loc 1 68 0
 388 012a 86EE      		ldi r24,lo8(-26)
 389 012c 0E94 0000 		call bootmagic_scan_keycode
 390               	.LVL36:
 391 0130 8823      		tst r24
 392 0132 01F0      		breq .L28
  69:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
 393               		.loc 1 69 0
 394 0134 9091 0000 		lds r25,keymap_config
 395 0138 93FB      		bst r25,3
 396 013a 8827      		clr r24
 397 013c 80F9      		bld r24,0
 398 013e 21E0      		ldi r18,lo8(1)
 399 0140 8227      		eor r24,r18
 400 0142 80FB      		bst r24,0
 401 0144 93F9      		bld r25,3
 402 0146 9093 0000 		sts keymap_config,r25
 403               	.L28:
  71:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
 404               		.loc 1 71 0
 405 014a 83EE      		ldi r24,lo8(-29)
 406 014c 0E94 0000 		call bootmagic_scan_keycode
 407               	.LVL37:
 408 0150 8823      		tst r24
 409 0152 01F0      		breq .L29
  72:../../tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
 410               		.loc 1 72 0
 411 0154 9091 0000 		lds r25,keymap_config
 412 0158 94FB      		bst r25,4
 413 015a 8827      		clr r24
 414 015c 80F9      		bld r24,0
 415 015e 21E0      		ldi r18,lo8(1)
 416 0160 8227      		eor r24,r18
 417 0162 80FB      		bst r24,0
 418 0164 94F9      		bld r25,4
 419 0166 9093 0000 		sts keymap_config,r25
 420               	.L29:
  74:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
 421               		.loc 1 74 0
 422 016a 85E3      		ldi r24,lo8(53)
 423 016c 0E94 0000 		call bootmagic_scan_keycode
 424               	.LVL38:
 425 0170 8823      		tst r24
 426 0172 01F0      		breq .L30
  75:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
 427               		.loc 1 75 0
 428 0174 9091 0000 		lds r25,keymap_config
 429 0178 95FB      		bst r25,5
 430 017a 8827      		clr r24
 431 017c 80F9      		bld r24,0
 432 017e 21E0      		ldi r18,lo8(1)
 433 0180 8227      		eor r24,r18
 434 0182 80FB      		bst r24,0
 435 0184 95F9      		bld r25,5
 436 0186 9093 0000 		sts keymap_config,r25
 437               	.L30:
  77:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
 438               		.loc 1 77 0
 439 018a 81E3      		ldi r24,lo8(49)
 440 018c 0E94 0000 		call bootmagic_scan_keycode
 441               	.LVL39:
 442 0190 8823      		tst r24
 443 0192 01F0      		breq .L31
  78:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
 444               		.loc 1 78 0
 445 0194 9091 0000 		lds r25,keymap_config
 446 0198 96FB      		bst r25,6
 447 019a 8827      		clr r24
 448 019c 80F9      		bld r24,0
 449 019e 21E0      		ldi r18,lo8(1)
 450 01a0 8227      		eor r24,r18
 451 01a2 80FB      		bst r24,0
 452 01a4 96F9      		bld r25,6
 453 01a6 9093 0000 		sts keymap_config,r25
 454               	.L31:
  80:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
 455               		.loc 1 80 0
 456 01aa 81E1      		ldi r24,lo8(17)
 457 01ac 0E94 0000 		call bootmagic_scan_keycode
 458               	.LVL40:
 459 01b0 8823      		tst r24
 460 01b2 01F0      		breq .L32
  81:../../tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
 461               		.loc 1 81 0
 462 01b4 9091 0000 		lds r25,keymap_config
 463 01b8 97FB      		bst r25,7
 464 01ba 8827      		clr r24
 465 01bc 80F9      		bld r24,0
 466 01be 21E0      		ldi r18,lo8(1)
 467 01c0 8227      		eor r24,r18
 468 01c2 80FB      		bst r24,0
 469 01c4 97F9      		bld r25,7
 470 01c6 9093 0000 		sts keymap_config,r25
 471               	.L32:
  83:../../tmk_core/common/bootmagic.c ****     eeconfig_write_keymap(keymap_config.raw);
 472               		.loc 1 83 0
 473 01ca 8091 0000 		lds r24,keymap_config
 474 01ce 0E94 0000 		call eeconfig_write_keymap
 475               	.LVL41:
  86:../../tmk_core/common/bootmagic.c ****     keyboard_nkro = keymap_config.nkro;
 476               		.loc 1 86 0
 477 01d2 8091 0000 		lds r24,keymap_config
 478 01d6 87FB      		bst r24,7
 479 01d8 8827      		clr r24
 480 01da 80F9      		bld r24,0
 481 01dc 8093 0000 		sts keyboard_nkro,r24
 482               	.LVL42:
  91:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
 483               		.loc 1 91 0
 484 01e0 87E2      		ldi r24,lo8(39)
 485 01e2 0E94 0000 		call bootmagic_scan_keycode
 486               	.LVL43:
 487 01e6 C82F      		mov r28,r24
 488               	.LVL44:
  92:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
 489               		.loc 1 92 0
 490 01e8 8EE1      		ldi r24,lo8(30)
 491               	.LVL45:
 492 01ea 0E94 0000 		call bootmagic_scan_keycode
 493               	.LVL46:
 494 01ee 8111      		cpse r24,__zero_reg__
  92:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
 495               		.loc 1 92 0 is_stmt 0 discriminator 1
 496 01f0 C260      		ori r28,lo8(2)
 497               	.LVL47:
 498               	.L33:
  93:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 499               		.loc 1 93 0 is_stmt 1
 500 01f2 8FE1      		ldi r24,lo8(31)
 501 01f4 0E94 0000 		call bootmagic_scan_keycode
 502               	.LVL48:
 503 01f8 8111      		cpse r24,__zero_reg__
  93:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 504               		.loc 1 93 0 is_stmt 0 discriminator 1
 505 01fa C460      		ori r28,lo8(4)
 506               	.LVL49:
 507               	.L34:
  94:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 508               		.loc 1 94 0 is_stmt 1
 509 01fc 80E2      		ldi r24,lo8(32)
 510 01fe 0E94 0000 		call bootmagic_scan_keycode
 511               	.LVL50:
 512 0202 8111      		cpse r24,__zero_reg__
  94:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 513               		.loc 1 94 0 is_stmt 0 discriminator 1
 514 0204 C860      		ori r28,lo8(8)
 515               	.LVL51:
 516               	.L35:
  95:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 517               		.loc 1 95 0 is_stmt 1
 518 0206 81E2      		ldi r24,lo8(33)
 519 0208 0E94 0000 		call bootmagic_scan_keycode
 520               	.LVL52:
 521 020c 8111      		cpse r24,__zero_reg__
  95:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 522               		.loc 1 95 0 is_stmt 0 discriminator 1
 523 020e C061      		ori r28,lo8(16)
 524               	.LVL53:
 525               	.L36:
  96:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 526               		.loc 1 96 0 is_stmt 1
 527 0210 82E2      		ldi r24,lo8(34)
 528 0212 0E94 0000 		call bootmagic_scan_keycode
 529               	.LVL54:
 530 0216 8111      		cpse r24,__zero_reg__
  96:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 531               		.loc 1 96 0 is_stmt 0 discriminator 1
 532 0218 C062      		ori r28,lo8(32)
 533               	.LVL55:
 534               	.L37:
  97:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 535               		.loc 1 97 0 is_stmt 1
 536 021a 83E2      		ldi r24,lo8(35)
 537 021c 0E94 0000 		call bootmagic_scan_keycode
 538               	.LVL56:
 539 0220 8111      		cpse r24,__zero_reg__
  97:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 540               		.loc 1 97 0 is_stmt 0 discriminator 1
 541 0222 C064      		ori r28,lo8(64)
 542               	.LVL57:
 543               	.L38:
  98:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 544               		.loc 1 98 0 is_stmt 1
 545 0224 84E2      		ldi r24,lo8(36)
 546 0226 0E94 0000 		call bootmagic_scan_keycode
 547               	.LVL58:
 548 022a 8823      		tst r24
 549 022c 01F0      		breq .L39
  98:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 550               		.loc 1 98 0 is_stmt 0 discriminator 1
 551 022e C068      		ori r28,lo8(-128)
 552               	.LVL59:
 553 0230 00C0      		rjmp .L40
 554               	.L39:
  99:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 555               		.loc 1 99 0 is_stmt 1
 556 0232 CC23      		tst r28
 557 0234 01F0      		breq .L41
 558               	.L40:
 100:../../tmk_core/common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 559               		.loc 1 100 0
 560 0236 8C2F      		mov r24,r28
 561 0238 0E94 0000 		call eeconfig_write_default_layer
 562               	.LVL60:
 101:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 563               		.loc 1 101 0
 564 023c 6C2F      		mov r22,r28
 565 023e 00C0      		rjmp .L94
 566               	.L41:
 103:../../tmk_core/common/bootmagic.c ****         default_layer = eeconfig_read_default_layer();
 567               		.loc 1 103 0
 568 0240 0E94 0000 		call eeconfig_read_default_layer
 569               	.LVL61:
 104:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 570               		.loc 1 104 0
 571 0244 682F      		mov r22,r24
 572               	.LVL62:
 573               	.L94:
 574 0246 70E0      		ldi r23,0
 575 0248 80E0      		ldi r24,0
 576 024a 90E0      		ldi r25,0
 577               	/* epilogue start */
 106:../../tmk_core/common/bootmagic.c **** }
 578               		.loc 1 106 0
 579 024c CF91      		pop r28
 104:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 580               		.loc 1 104 0
 581 024e 0C94 0000 		jmp default_layer_set
 582               	.LVL63:
 583               	.L14:
 584               	/* epilogue start */
 106:../../tmk_core/common/bootmagic.c **** }
 585               		.loc 1 106 0
 586 0252 CF91      		pop r28
 587 0254 0895      		ret
 588               		.cfi_endproc
 589               	.LFE103:
 591               		.comm	keymap_config,1,1
 592               		.text
 593               	.Letext0:
 594               		.file 3 "d:\\applications\\keyboard\\avr-gcc-4.7.2-mingw32\\bin\\../lib/gcc/avr/4.7.2/../../../../
 595               		.file 4 "../../tmk_core/common/matrix.h"
 596               		.file 5 "../../tmk_core/common/debug.h"
 597               		.file 6 "../../tmk_core/common/keyboard.h"
 598               		.file 7 "../../tmk_core/common/keymap.h"
 599               		.file 8 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 600               		.file 9 "../../tmk_core/common/host.h"
 601               		.file 10 "../../tmk_core/common/eeconfig.h"
 602               		.file 11 "../../tmk_core/common/bootloader.h"
 603               		.file 12 "../../tmk_core/common/action_layer.h"
 604               		.file 13 "../../tmk_core/common/keycode.h"
DEFINED SYMBOLS
                            *ABS*:00000000 bootmagic.c
C:\Users\tiny\AppData\Local\Temp\cc8VAyrJ.s:2      *ABS*:0000003e __SP_H__
C:\Users\tiny\AppData\Local\Temp\cc8VAyrJ.s:3      *ABS*:0000003d __SP_L__
C:\Users\tiny\AppData\Local\Temp\cc8VAyrJ.s:4      *ABS*:0000003f __SREG__
C:\Users\tiny\AppData\Local\Temp\cc8VAyrJ.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\tiny\AppData\Local\Temp\cc8VAyrJ.s:6      *ABS*:00000001 __zero_reg__
C:\Users\tiny\AppData\Local\Temp\cc8VAyrJ.s:12     .text.scan_keycode:00000000 scan_keycode
C:\Users\tiny\AppData\Local\Temp\cc8VAyrJ.s:150    .text.bootmagic_scan_keycode:00000000 bootmagic_scan_keycode
C:\Users\tiny\AppData\Local\Temp\cc8VAyrJ.s:193    .text.bootmagic:00000000 bootmagic
                            *COM*:00000001 keymap_config

UNDEFINED SYMBOLS
matrix_get_row
keymap_key_to_keycode
eeconfig_is_enabled
eeconfig_init
matrix_scan
bootloader_jump
eeconfig_read_debug
debug_config
eeconfig_write_debug
eeconfig_read_keymap
eeconfig_write_keymap
keyboard_nkro
eeconfig_write_default_layer
eeconfig_read_default_layer
default_layer_set
__do_clear_bss
