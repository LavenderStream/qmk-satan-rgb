   1               		.file	"action_util.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.add_key,"ax",@progbits
  11               	.global	add_key
  13               	add_key:
  14               	.LFB101:
  15               		.file 1 "../../tmk_core/common/action_util.c"
   1:../../tmk_core/common/action_util.c **** /*
   2:../../tmk_core/common/action_util.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/action_util.c **** 
   4:../../tmk_core/common/action_util.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/action_util.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/action_util.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/action_util.c **** (at your option) any later version.
   8:../../tmk_core/common/action_util.c **** 
   9:../../tmk_core/common/action_util.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/action_util.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/action_util.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/action_util.c **** GNU General Public License for more details.
  13:../../tmk_core/common/action_util.c **** 
  14:../../tmk_core/common/action_util.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/action_util.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/action_util.c **** */
  17:../../tmk_core/common/action_util.c **** #include "host.h"
  18:../../tmk_core/common/action_util.c **** #include "report.h"
  19:../../tmk_core/common/action_util.c **** #include "debug.h"
  20:../../tmk_core/common/action_util.c **** #include "action_util.h"
  21:../../tmk_core/common/action_util.c **** #include "timer.h"
  22:../../tmk_core/common/action_util.c **** 
  23:../../tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code);
  24:../../tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code);
  25:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  26:../../tmk_core/common/action_util.c **** static inline void add_key_bit(uint8_t code);
  27:../../tmk_core/common/action_util.c **** static inline void del_key_bit(uint8_t code);
  28:../../tmk_core/common/action_util.c **** #endif
  29:../../tmk_core/common/action_util.c **** 
  30:../../tmk_core/common/action_util.c **** static uint8_t real_mods = 0;
  31:../../tmk_core/common/action_util.c **** static uint8_t weak_mods = 0;
  32:../../tmk_core/common/action_util.c **** 
  33:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
  34:../../tmk_core/common/action_util.c **** #define RO_ADD(a, b) ((a + b) % KEYBOARD_REPORT_KEYS)
  35:../../tmk_core/common/action_util.c **** #define RO_SUB(a, b) ((a - b + KEYBOARD_REPORT_KEYS) % KEYBOARD_REPORT_KEYS)
  36:../../tmk_core/common/action_util.c **** #define RO_INC(a) RO_ADD(a, 1)
  37:../../tmk_core/common/action_util.c **** #define RO_DEC(a) RO_SUB(a, 1)
  38:../../tmk_core/common/action_util.c **** static int8_t cb_head = 0;
  39:../../tmk_core/common/action_util.c **** static int8_t cb_tail = 0;
  40:../../tmk_core/common/action_util.c **** static int8_t cb_count = 0;
  41:../../tmk_core/common/action_util.c **** #endif
  42:../../tmk_core/common/action_util.c **** 
  43:../../tmk_core/common/action_util.c **** // TODO: pointer variable is not needed
  44:../../tmk_core/common/action_util.c **** //report_keyboard_t keyboard_report = {};
  45:../../tmk_core/common/action_util.c **** report_keyboard_t *keyboard_report = &(report_keyboard_t){};
  46:../../tmk_core/common/action_util.c **** 
  47:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  48:../../tmk_core/common/action_util.c **** static int8_t oneshot_mods = 0;
  49:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  50:../../tmk_core/common/action_util.c **** static int16_t oneshot_time = 0;
  51:../../tmk_core/common/action_util.c **** #endif
  52:../../tmk_core/common/action_util.c **** #endif
  53:../../tmk_core/common/action_util.c **** 
  54:../../tmk_core/common/action_util.c **** 
  55:../../tmk_core/common/action_util.c **** void send_keyboard_report(void) {
  56:../../tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
  57:../../tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
  58:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  59:../../tmk_core/common/action_util.c ****     if (oneshot_mods) {
  60:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  61:../../tmk_core/common/action_util.c ****         if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
  62:../../tmk_core/common/action_util.c ****             dprintf("Oneshot: timeout\n");
  63:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
  64:../../tmk_core/common/action_util.c ****         }
  65:../../tmk_core/common/action_util.c **** #endif
  66:../../tmk_core/common/action_util.c ****         keyboard_report->mods |= oneshot_mods;
  67:../../tmk_core/common/action_util.c ****         if (has_anykey()) {
  68:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
  69:../../tmk_core/common/action_util.c ****         }
  70:../../tmk_core/common/action_util.c ****     }
  71:../../tmk_core/common/action_util.c **** #endif
  72:../../tmk_core/common/action_util.c ****     host_keyboard_send(keyboard_report);
  73:../../tmk_core/common/action_util.c **** }
  74:../../tmk_core/common/action_util.c **** 
  75:../../tmk_core/common/action_util.c **** /* key */
  76:../../tmk_core/common/action_util.c **** void add_key(uint8_t key)
  77:../../tmk_core/common/action_util.c **** {
  16               		.loc 1 77 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  78:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  79:../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
  23               		.loc 1 79 0
  24 0000 9091 0000 		lds r25,keyboard_protocol
  25 0004 9923      		tst r25
  26 0006 01F0      		breq .L2
  27               		.loc 1 79 0 is_stmt 0 discriminator 1
  28 0008 9091 0000 		lds r25,keyboard_nkro
  29 000c 9923      		tst r25
  30 000e 01F0      		breq .L2
  31               	.LVL1:
  32               	.LBB6:
  33               	.LBB7:
  80:../../tmk_core/common/action_util.c ****         add_key_bit(key);
  81:../../tmk_core/common/action_util.c ****         return;
  82:../../tmk_core/common/action_util.c ****     }
  83:../../tmk_core/common/action_util.c **** #endif
  84:../../tmk_core/common/action_util.c ****     add_key_byte(key);
  85:../../tmk_core/common/action_util.c **** }
  86:../../tmk_core/common/action_util.c **** 
  87:../../tmk_core/common/action_util.c **** void del_key(uint8_t key)
  88:../../tmk_core/common/action_util.c **** {
  89:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  90:../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
  91:../../tmk_core/common/action_util.c ****         del_key_bit(key);
  92:../../tmk_core/common/action_util.c ****         return;
  93:../../tmk_core/common/action_util.c ****     }
  94:../../tmk_core/common/action_util.c **** #endif
  95:../../tmk_core/common/action_util.c ****     del_key_byte(key);
  96:../../tmk_core/common/action_util.c **** }
  97:../../tmk_core/common/action_util.c **** 
  98:../../tmk_core/common/action_util.c **** void clear_keys(void)
  99:../../tmk_core/common/action_util.c **** {
 100:../../tmk_core/common/action_util.c ****     // not clear mods
 101:../../tmk_core/common/action_util.c ****     for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 102:../../tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 103:../../tmk_core/common/action_util.c ****     }
 104:../../tmk_core/common/action_util.c **** }
 105:../../tmk_core/common/action_util.c **** 
 106:../../tmk_core/common/action_util.c **** 
 107:../../tmk_core/common/action_util.c **** /* modifier */
 108:../../tmk_core/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 109:../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 110:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 111:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 112:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 113:../../tmk_core/common/action_util.c **** 
 114:../../tmk_core/common/action_util.c **** /* weak modifier */
 115:../../tmk_core/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 116:../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 117:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 118:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 119:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 120:../../tmk_core/common/action_util.c **** 
 121:../../tmk_core/common/action_util.c **** /* Oneshot modifier */
 122:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 123:../../tmk_core/common/action_util.c **** void set_oneshot_mods(uint8_t mods)
 124:../../tmk_core/common/action_util.c **** {
 125:../../tmk_core/common/action_util.c ****     oneshot_mods = mods;
 126:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 127:../../tmk_core/common/action_util.c ****     oneshot_time = timer_read();
 128:../../tmk_core/common/action_util.c **** #endif
 129:../../tmk_core/common/action_util.c **** }
 130:../../tmk_core/common/action_util.c **** void clear_oneshot_mods(void)
 131:../../tmk_core/common/action_util.c **** {
 132:../../tmk_core/common/action_util.c ****     oneshot_mods = 0;
 133:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 134:../../tmk_core/common/action_util.c ****     oneshot_time = 0;
 135:../../tmk_core/common/action_util.c **** #endif
 136:../../tmk_core/common/action_util.c **** }
 137:../../tmk_core/common/action_util.c **** #endif
 138:../../tmk_core/common/action_util.c **** 
 139:../../tmk_core/common/action_util.c **** 
 140:../../tmk_core/common/action_util.c **** 
 141:../../tmk_core/common/action_util.c **** 
 142:../../tmk_core/common/action_util.c **** /*
 143:../../tmk_core/common/action_util.c ****  * inspect keyboard state
 144:../../tmk_core/common/action_util.c ****  */
 145:../../tmk_core/common/action_util.c **** uint8_t has_anykey(void)
 146:../../tmk_core/common/action_util.c **** {
 147:../../tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 148:../../tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 149:../../tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 150:../../tmk_core/common/action_util.c ****             cnt++;
 151:../../tmk_core/common/action_util.c ****     }
 152:../../tmk_core/common/action_util.c ****     return cnt;
 153:../../tmk_core/common/action_util.c **** }
 154:../../tmk_core/common/action_util.c **** 
 155:../../tmk_core/common/action_util.c **** uint8_t has_anymod(void)
 156:../../tmk_core/common/action_util.c **** {
 157:../../tmk_core/common/action_util.c ****     return bitpop(real_mods);
 158:../../tmk_core/common/action_util.c **** }
 159:../../tmk_core/common/action_util.c **** 
 160:../../tmk_core/common/action_util.c **** uint8_t get_first_key(void)
 161:../../tmk_core/common/action_util.c **** {
 162:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 163:../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
 164:../../tmk_core/common/action_util.c ****         uint8_t i = 0;
 165:../../tmk_core/common/action_util.c ****         for (; i < KEYBOARD_REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 166:../../tmk_core/common/action_util.c ****             ;
 167:../../tmk_core/common/action_util.c ****         return i<<3 | biton(keyboard_report->nkro.bits[i]);
 168:../../tmk_core/common/action_util.c ****     }
 169:../../tmk_core/common/action_util.c **** #endif
 170:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 171:../../tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 172:../../tmk_core/common/action_util.c ****     do {
 173:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] != 0) {
 174:../../tmk_core/common/action_util.c ****             break;
 175:../../tmk_core/common/action_util.c ****         }
 176:../../tmk_core/common/action_util.c ****         i = RO_INC(i);
 177:../../tmk_core/common/action_util.c ****     } while (i != cb_tail);
 178:../../tmk_core/common/action_util.c ****     return keyboard_report->keys[i];
 179:../../tmk_core/common/action_util.c **** #else
 180:../../tmk_core/common/action_util.c ****     return keyboard_report->keys[0];
 181:../../tmk_core/common/action_util.c **** #endif
 182:../../tmk_core/common/action_util.c **** }
 183:../../tmk_core/common/action_util.c **** 
 184:../../tmk_core/common/action_util.c **** 
 185:../../tmk_core/common/action_util.c **** 
 186:../../tmk_core/common/action_util.c **** /* local functions */
 187:../../tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code)
 188:../../tmk_core/common/action_util.c **** {
 189:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 190:../../tmk_core/common/action_util.c ****     int8_t i = cb_head;
 191:../../tmk_core/common/action_util.c ****     int8_t empty = -1;
 192:../../tmk_core/common/action_util.c ****     if (cb_count) {
 193:../../tmk_core/common/action_util.c ****         do {
 194:../../tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 195:../../tmk_core/common/action_util.c ****                 return;
 196:../../tmk_core/common/action_util.c ****             }
 197:../../tmk_core/common/action_util.c ****             if (empty == -1 && keyboard_report->keys[i] == 0) {
 198:../../tmk_core/common/action_util.c ****                 empty = i;
 199:../../tmk_core/common/action_util.c ****             }
 200:../../tmk_core/common/action_util.c ****             i = RO_INC(i);
 201:../../tmk_core/common/action_util.c ****         } while (i != cb_tail);
 202:../../tmk_core/common/action_util.c ****         if (i == cb_tail) {
 203:../../tmk_core/common/action_util.c ****             if (cb_tail == cb_head) {
 204:../../tmk_core/common/action_util.c ****                 // buffer is full
 205:../../tmk_core/common/action_util.c ****                 if (empty == -1) {
 206:../../tmk_core/common/action_util.c ****                     // pop head when has no empty space
 207:../../tmk_core/common/action_util.c ****                     cb_head = RO_INC(cb_head);
 208:../../tmk_core/common/action_util.c ****                     cb_count--;
 209:../../tmk_core/common/action_util.c ****                 }
 210:../../tmk_core/common/action_util.c ****                 else {
 211:../../tmk_core/common/action_util.c ****                     // left shift when has empty space
 212:../../tmk_core/common/action_util.c ****                     uint8_t offset = 1;
 213:../../tmk_core/common/action_util.c ****                     i = RO_INC(empty);
 214:../../tmk_core/common/action_util.c ****                     do {
 215:../../tmk_core/common/action_util.c ****                         if (keyboard_report->keys[i] != 0) {
 216:../../tmk_core/common/action_util.c ****                             keyboard_report->keys[empty] = keyboard_report->keys[i];
 217:../../tmk_core/common/action_util.c ****                             keyboard_report->keys[i] = 0;
 218:../../tmk_core/common/action_util.c ****                             empty = RO_INC(empty);
 219:../../tmk_core/common/action_util.c ****                         }
 220:../../tmk_core/common/action_util.c ****                         else {
 221:../../tmk_core/common/action_util.c ****                             offset++;
 222:../../tmk_core/common/action_util.c ****                         }
 223:../../tmk_core/common/action_util.c ****                         i = RO_INC(i);
 224:../../tmk_core/common/action_util.c ****                     } while (i != cb_tail);
 225:../../tmk_core/common/action_util.c ****                     cb_tail = RO_SUB(cb_tail, offset);
 226:../../tmk_core/common/action_util.c ****                 }
 227:../../tmk_core/common/action_util.c ****             }
 228:../../tmk_core/common/action_util.c ****         }
 229:../../tmk_core/common/action_util.c ****     }
 230:../../tmk_core/common/action_util.c ****     // add to tail
 231:../../tmk_core/common/action_util.c ****     keyboard_report->keys[cb_tail] = code;
 232:../../tmk_core/common/action_util.c ****     cb_tail = RO_INC(cb_tail);
 233:../../tmk_core/common/action_util.c ****     cb_count++;
 234:../../tmk_core/common/action_util.c **** #else
 235:../../tmk_core/common/action_util.c ****     int8_t i = 0;
 236:../../tmk_core/common/action_util.c ****     int8_t empty = -1;
 237:../../tmk_core/common/action_util.c ****     for (; i < KEYBOARD_REPORT_KEYS; i++) {
 238:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 239:../../tmk_core/common/action_util.c ****             break;
 240:../../tmk_core/common/action_util.c ****         }
 241:../../tmk_core/common/action_util.c ****         if (empty == -1 && keyboard_report->keys[i] == 0) {
 242:../../tmk_core/common/action_util.c ****             empty = i;
 243:../../tmk_core/common/action_util.c ****         }
 244:../../tmk_core/common/action_util.c ****     }
 245:../../tmk_core/common/action_util.c ****     if (i == KEYBOARD_REPORT_KEYS) {
 246:../../tmk_core/common/action_util.c ****         if (empty != -1) {
 247:../../tmk_core/common/action_util.c ****             keyboard_report->keys[empty] = code;
 248:../../tmk_core/common/action_util.c ****         }
 249:../../tmk_core/common/action_util.c ****     }
 250:../../tmk_core/common/action_util.c **** #endif
 251:../../tmk_core/common/action_util.c **** }
 252:../../tmk_core/common/action_util.c **** 
 253:../../tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code)
 254:../../tmk_core/common/action_util.c **** {
 255:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 256:../../tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 257:../../tmk_core/common/action_util.c ****     if (cb_count) {
 258:../../tmk_core/common/action_util.c ****         do {
 259:../../tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 260:../../tmk_core/common/action_util.c ****                 keyboard_report->keys[i] = 0;
 261:../../tmk_core/common/action_util.c ****                 cb_count--;
 262:../../tmk_core/common/action_util.c ****                 if (cb_count == 0) {
 263:../../tmk_core/common/action_util.c ****                     // reset head and tail
 264:../../tmk_core/common/action_util.c ****                     cb_tail = cb_head = 0;
 265:../../tmk_core/common/action_util.c ****                 }
 266:../../tmk_core/common/action_util.c ****                 if (i == RO_DEC(cb_tail)) {
 267:../../tmk_core/common/action_util.c ****                     // left shift when next to tail
 268:../../tmk_core/common/action_util.c ****                     do {
 269:../../tmk_core/common/action_util.c ****                         cb_tail = RO_DEC(cb_tail);
 270:../../tmk_core/common/action_util.c ****                         if (keyboard_report->keys[RO_DEC(cb_tail)] != 0) {
 271:../../tmk_core/common/action_util.c ****                             break;
 272:../../tmk_core/common/action_util.c ****                         }
 273:../../tmk_core/common/action_util.c ****                     } while (cb_tail != cb_head);
 274:../../tmk_core/common/action_util.c ****                 }
 275:../../tmk_core/common/action_util.c ****                 break;
 276:../../tmk_core/common/action_util.c ****             }
 277:../../tmk_core/common/action_util.c ****             i = RO_INC(i);
 278:../../tmk_core/common/action_util.c ****         } while (i != cb_tail);
 279:../../tmk_core/common/action_util.c ****     }
 280:../../tmk_core/common/action_util.c **** #else
 281:../../tmk_core/common/action_util.c ****     for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 282:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 283:../../tmk_core/common/action_util.c ****             keyboard_report->keys[i] = 0;
 284:../../tmk_core/common/action_util.c ****         }
 285:../../tmk_core/common/action_util.c ****     }
 286:../../tmk_core/common/action_util.c **** #endif
 287:../../tmk_core/common/action_util.c **** }
 288:../../tmk_core/common/action_util.c **** 
 289:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 290:../../tmk_core/common/action_util.c **** static inline void add_key_bit(uint8_t code)
 291:../../tmk_core/common/action_util.c **** {
 292:../../tmk_core/common/action_util.c ****     if ((code>>3) < KEYBOARD_REPORT_BITS) {
  34               		.loc 1 292 0 is_stmt 1
  35 0010 982F      		mov r25,r24
  36 0012 9695      		lsr r25
  37 0014 9695      		lsr r25
  38 0016 9695      		lsr r25
  39 0018 9F30      		cpi r25,lo8(15)
  40 001a 00F4      		brsh .L1
 293:../../tmk_core/common/action_util.c ****         keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
  41               		.loc 1 293 0
  42 001c E091 0000 		lds r30,keyboard_report
  43 0020 F091 0000 		lds r31,keyboard_report+1
  44 0024 E90F      		add r30,r25
  45 0026 F11D      		adc r31,__zero_reg__
  46               	.LBE7:
  47 0028 8770      		andi r24,lo8(7)
  48               	.LVL2:
  49               	.LBB8:
  50 002a 21E0      		ldi r18,lo8(1)
  51 002c 30E0      		ldi r19,0
  52 002e 00C0      		rjmp 2f
  53               		1:
  54 0030 220F      		lsl r18
  55               		2:
  56 0032 8A95      		dec r24
  57 0034 02F4      		brpl 1b
  58 0036 8181      		ldd r24,Z+1
  59 0038 822B      		or r24,r18
  60 003a 8183      		std Z+1,r24
  61 003c 0895      		ret
  62               	.LVL3:
  63               	.L2:
  64               	.LBE8:
  65               	.LBE6:
  66               	.LBB9:
  67               	.LBB10:
 238:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
  68               		.loc 1 238 0
  69 003e 4091 0000 		lds r20,keyboard_report
  70 0042 5091 0000 		lds r21,keyboard_report+1
  71 0046 20E0      		ldi r18,0
  72 0048 30E0      		ldi r19,0
  73 004a 9FEF      		ldi r25,lo8(-1)
  74               	.L5:
  76:../../tmk_core/common/action_util.c **** void add_key(uint8_t key)
  75               		.loc 1 76 0
  76 004c FA01      		movw r30,r20
  77 004e E20F      		add r30,r18
  78 0050 F31F      		adc r31,r19
 238:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
  79               		.loc 1 238 0
  80 0052 6281      		ldd r22,Z+2
  81 0054 6817      		cp r22,r24
  82 0056 01F0      		breq .L1
 241:../../tmk_core/common/action_util.c ****         if (empty == -1 && keyboard_report->keys[i] == 0) {
  83               		.loc 1 241 0
  84 0058 9F3F      		cpi r25,lo8(-1)
  85 005a 01F4      		brne .L4
  86 005c 6111      		cpse r22,__zero_reg__
  87 005e 00C0      		rjmp .L4
  88 0060 922F      		mov r25,r18
  89               	.L4:
  90               	.LVL4:
  91 0062 2F5F      		subi r18,-1
  92 0064 3F4F      		sbci r19,-1
 237:../../tmk_core/common/action_util.c ****     for (; i < KEYBOARD_REPORT_KEYS; i++) {
  93               		.loc 1 237 0
  94 0066 2E30      		cpi r18,14
  95 0068 3105      		cpc r19,__zero_reg__
  96 006a 01F4      		brne .L5
  97 006c 00C0      		rjmp .L16
  98               	.L7:
 247:../../tmk_core/common/action_util.c ****             keyboard_report->keys[empty] = code;
  99               		.loc 1 247 0
 100 006e FA01      		movw r30,r20
 101 0070 E90F      		add r30,r25
 102 0072 F11D      		adc r31,__zero_reg__
 103 0074 97FD      		sbrc r25,7
 104 0076 FA95      		dec r31
 105 0078 8283      		std Z+2,r24
 106 007a 0895      		ret
 107               	.L16:
 246:../../tmk_core/common/action_util.c ****         if (empty != -1) {
 108               		.loc 1 246 0
 109 007c 9F3F      		cpi r25,lo8(-1)
 110 007e 01F4      		brne .L7
 111               	.LVL5:
 112               	.L1:
 113 0080 0895      		ret
 114               	.LBE10:
 115               	.LBE9:
 116               		.cfi_endproc
 117               	.LFE101:
 119               		.section	.text.del_key,"ax",@progbits
 120               	.global	del_key
 122               	del_key:
 123               	.LFB102:
  88:../../tmk_core/common/action_util.c **** {
 124               		.loc 1 88 0
 125               		.cfi_startproc
 126               	.LVL6:
 127               	/* prologue: function */
 128               	/* frame size = 0 */
 129               	/* stack size = 0 */
 130               	.L__stack_usage = 0
  90:../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
 131               		.loc 1 90 0
 132 0000 9091 0000 		lds r25,keyboard_protocol
 133 0004 9923      		tst r25
 134 0006 01F0      		breq .L18
  90:../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
 135               		.loc 1 90 0 is_stmt 0 discriminator 1
 136 0008 9091 0000 		lds r25,keyboard_nkro
 137 000c 9923      		tst r25
 138 000e 01F0      		breq .L18
 139               	.LVL7:
 140               	.LBB16:
 141               	.LBB17:
 294:../../tmk_core/common/action_util.c ****     } else {
 295:../../tmk_core/common/action_util.c ****         dprintf("add_key_bit: can't add: %02X\n", code);
 296:../../tmk_core/common/action_util.c ****     }
 297:../../tmk_core/common/action_util.c **** }
 298:../../tmk_core/common/action_util.c **** 
 299:../../tmk_core/common/action_util.c **** static inline void del_key_bit(uint8_t code)
 300:../../tmk_core/common/action_util.c **** {
 301:../../tmk_core/common/action_util.c ****     if ((code>>3) < KEYBOARD_REPORT_BITS) {
 142               		.loc 1 301 0 is_stmt 1
 143 0010 982F      		mov r25,r24
 144 0012 9695      		lsr r25
 145 0014 9695      		lsr r25
 146 0016 9695      		lsr r25
 147 0018 9F30      		cpi r25,lo8(15)
 148 001a 00F4      		brsh .L17
 302:../../tmk_core/common/action_util.c ****         keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
 149               		.loc 1 302 0
 150 001c E091 0000 		lds r30,keyboard_report
 151 0020 F091 0000 		lds r31,keyboard_report+1
 152 0024 E90F      		add r30,r25
 153 0026 F11D      		adc r31,__zero_reg__
 154               	.LBE17:
 155 0028 8770      		andi r24,lo8(7)
 156               	.LVL8:
 157               	.LBB18:
 158 002a 21E0      		ldi r18,lo8(1)
 159 002c 30E0      		ldi r19,0
 160 002e 00C0      		rjmp 2f
 161               		1:
 162 0030 220F      		lsl r18
 163               		2:
 164 0032 8A95      		dec r24
 165 0034 02F4      		brpl 1b
 166 0036 2095      		com r18
 167 0038 8181      		ldd r24,Z+1
 168 003a 2823      		and r18,r24
 169 003c 2183      		std Z+1,r18
 170 003e 0895      		ret
 171               	.LVL9:
 172               	.L18:
 173               	.LBE18:
 174               	.LBE16:
 175               	.LBB19:
 176               	.LBB20:
 282:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 177               		.loc 1 282 0
 178 0040 4091 0000 		lds r20,keyboard_report
 179 0044 5091 0000 		lds r21,keyboard_report+1
 180 0048 20E0      		ldi r18,0
 181 004a 30E0      		ldi r19,0
 182               	.L22:
  87:../../tmk_core/common/action_util.c **** void del_key(uint8_t key)
 183               		.loc 1 87 0
 184 004c FA01      		movw r30,r20
 185 004e E20F      		add r30,r18
 186 0050 F31F      		adc r31,r19
 282:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 187               		.loc 1 282 0
 188 0052 9281      		ldd r25,Z+2
 189 0054 9813      		cpse r25,r24
 190 0056 00C0      		rjmp .L21
 283:../../tmk_core/common/action_util.c ****             keyboard_report->keys[i] = 0;
 191               		.loc 1 283 0
 192 0058 1282      		std Z+2,__zero_reg__
 193               	.L21:
 194               	.LVL10:
 195 005a 2F5F      		subi r18,-1
 196 005c 3F4F      		sbci r19,-1
 281:../../tmk_core/common/action_util.c ****     for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 197               		.loc 1 281 0
 198 005e 2E30      		cpi r18,14
 199 0060 3105      		cpc r19,__zero_reg__
 200 0062 01F4      		brne .L22
 201               	.L17:
 202 0064 0895      		ret
 203               	.LBE20:
 204               	.LBE19:
 205               		.cfi_endproc
 206               	.LFE102:
 208               		.section	.text.clear_keys,"ax",@progbits
 209               	.global	clear_keys
 211               	clear_keys:
 212               	.LFB103:
  99:../../tmk_core/common/action_util.c **** {
 213               		.loc 1 99 0
 214               		.cfi_startproc
 215               	/* prologue: function */
 216               	/* frame size = 0 */
 217               	/* stack size = 0 */
 218               	.L__stack_usage = 0
 219               	.LVL11:
  99:../../tmk_core/common/action_util.c **** {
 220               		.loc 1 99 0
 221 0000 81E0      		ldi r24,lo8(1)
 222 0002 90E0      		ldi r25,0
 223               	.LVL12:
 224               	.L32:
 225               	.LBB21:
 102:../../tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 226               		.loc 1 102 0 discriminator 2
 227 0004 E091 0000 		lds r30,keyboard_report
 228 0008 F091 0000 		lds r31,keyboard_report+1
 229 000c E80F      		add r30,r24
 230 000e F91F      		adc r31,r25
 231 0010 1082      		st Z,__zero_reg__
 232 0012 0196      		adiw r24,1
 101:../../tmk_core/common/action_util.c ****     for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 233               		.loc 1 101 0 discriminator 2
 234 0014 8031      		cpi r24,16
 235 0016 9105      		cpc r25,__zero_reg__
 236 0018 01F4      		brne .L32
 237               	/* epilogue start */
 238               	.LBE21:
 104:../../tmk_core/common/action_util.c **** }
 239               		.loc 1 104 0
 240 001a 0895      		ret
 241               		.cfi_endproc
 242               	.LFE103:
 244               		.section	.text.get_mods,"ax",@progbits
 245               	.global	get_mods
 247               	get_mods:
 248               	.LFB104:
 108:../../tmk_core/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 249               		.loc 1 108 0
 250               		.cfi_startproc
 251               	/* prologue: function */
 252               	/* frame size = 0 */
 253               	/* stack size = 0 */
 254               	.L__stack_usage = 0
 108:../../tmk_core/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 255               		.loc 1 108 0
 256 0000 8091 0000 		lds r24,real_mods
 257 0004 0895      		ret
 258               		.cfi_endproc
 259               	.LFE104:
 261               		.section	.text.add_mods,"ax",@progbits
 262               	.global	add_mods
 264               	add_mods:
 265               	.LFB105:
 109:../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 266               		.loc 1 109 0
 267               		.cfi_startproc
 268               	.LVL13:
 269               	/* prologue: function */
 270               	/* frame size = 0 */
 271               	/* stack size = 0 */
 272               	.L__stack_usage = 0
 109:../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 273               		.loc 1 109 0
 274 0000 9091 0000 		lds r25,real_mods
 275 0004 982B      		or r25,r24
 276 0006 9093 0000 		sts real_mods,r25
 277 000a 0895      		ret
 278               		.cfi_endproc
 279               	.LFE105:
 281               		.section	.text.del_mods,"ax",@progbits
 282               	.global	del_mods
 284               	del_mods:
 285               	.LFB106:
 110:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 286               		.loc 1 110 0
 287               		.cfi_startproc
 288               	.LVL14:
 289               	/* prologue: function */
 290               	/* frame size = 0 */
 291               	/* stack size = 0 */
 292               	.L__stack_usage = 0
 110:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 293               		.loc 1 110 0
 294 0000 8095      		com r24
 295               	.LVL15:
 296 0002 9091 0000 		lds r25,real_mods
 297 0006 9823      		and r25,r24
 298 0008 9093 0000 		sts real_mods,r25
 299 000c 0895      		ret
 300               		.cfi_endproc
 301               	.LFE106:
 303               		.section	.text.set_mods,"ax",@progbits
 304               	.global	set_mods
 306               	set_mods:
 307               	.LFB107:
 111:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 308               		.loc 1 111 0
 309               		.cfi_startproc
 310               	.LVL16:
 311               	/* prologue: function */
 312               	/* frame size = 0 */
 313               	/* stack size = 0 */
 314               	.L__stack_usage = 0
 111:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 315               		.loc 1 111 0
 316 0000 8093 0000 		sts real_mods,r24
 317 0004 0895      		ret
 318               		.cfi_endproc
 319               	.LFE107:
 321               		.section	.text.clear_mods,"ax",@progbits
 322               	.global	clear_mods
 324               	clear_mods:
 325               	.LFB108:
 112:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 326               		.loc 1 112 0
 327               		.cfi_startproc
 328               	/* prologue: function */
 329               	/* frame size = 0 */
 330               	/* stack size = 0 */
 331               	.L__stack_usage = 0
 112:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 332               		.loc 1 112 0
 333 0000 1092 0000 		sts real_mods,__zero_reg__
 334 0004 0895      		ret
 335               		.cfi_endproc
 336               	.LFE108:
 338               		.section	.text.get_weak_mods,"ax",@progbits
 339               	.global	get_weak_mods
 341               	get_weak_mods:
 342               	.LFB109:
 115:../../tmk_core/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 343               		.loc 1 115 0
 344               		.cfi_startproc
 345               	/* prologue: function */
 346               	/* frame size = 0 */
 347               	/* stack size = 0 */
 348               	.L__stack_usage = 0
 115:../../tmk_core/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 349               		.loc 1 115 0
 350 0000 8091 0000 		lds r24,weak_mods
 351 0004 0895      		ret
 352               		.cfi_endproc
 353               	.LFE109:
 355               		.section	.text.add_weak_mods,"ax",@progbits
 356               	.global	add_weak_mods
 358               	add_weak_mods:
 359               	.LFB110:
 116:../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 360               		.loc 1 116 0
 361               		.cfi_startproc
 362               	.LVL17:
 363               	/* prologue: function */
 364               	/* frame size = 0 */
 365               	/* stack size = 0 */
 366               	.L__stack_usage = 0
 116:../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 367               		.loc 1 116 0
 368 0000 9091 0000 		lds r25,weak_mods
 369 0004 982B      		or r25,r24
 370 0006 9093 0000 		sts weak_mods,r25
 371 000a 0895      		ret
 372               		.cfi_endproc
 373               	.LFE110:
 375               		.section	.text.del_weak_mods,"ax",@progbits
 376               	.global	del_weak_mods
 378               	del_weak_mods:
 379               	.LFB111:
 117:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 380               		.loc 1 117 0
 381               		.cfi_startproc
 382               	.LVL18:
 383               	/* prologue: function */
 384               	/* frame size = 0 */
 385               	/* stack size = 0 */
 386               	.L__stack_usage = 0
 117:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 387               		.loc 1 117 0
 388 0000 8095      		com r24
 389               	.LVL19:
 390 0002 9091 0000 		lds r25,weak_mods
 391 0006 9823      		and r25,r24
 392 0008 9093 0000 		sts weak_mods,r25
 393 000c 0895      		ret
 394               		.cfi_endproc
 395               	.LFE111:
 397               		.section	.text.set_weak_mods,"ax",@progbits
 398               	.global	set_weak_mods
 400               	set_weak_mods:
 401               	.LFB112:
 118:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 402               		.loc 1 118 0
 403               		.cfi_startproc
 404               	.LVL20:
 405               	/* prologue: function */
 406               	/* frame size = 0 */
 407               	/* stack size = 0 */
 408               	.L__stack_usage = 0
 118:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 409               		.loc 1 118 0
 410 0000 8093 0000 		sts weak_mods,r24
 411 0004 0895      		ret
 412               		.cfi_endproc
 413               	.LFE112:
 415               		.section	.text.clear_weak_mods,"ax",@progbits
 416               	.global	clear_weak_mods
 418               	clear_weak_mods:
 419               	.LFB113:
 119:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 420               		.loc 1 119 0
 421               		.cfi_startproc
 422               	/* prologue: function */
 423               	/* frame size = 0 */
 424               	/* stack size = 0 */
 425               	.L__stack_usage = 0
 119:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 426               		.loc 1 119 0
 427 0000 1092 0000 		sts weak_mods,__zero_reg__
 428 0004 0895      		ret
 429               		.cfi_endproc
 430               	.LFE113:
 432               		.section	.text.set_oneshot_mods,"ax",@progbits
 433               	.global	set_oneshot_mods
 435               	set_oneshot_mods:
 436               	.LFB114:
 124:../../tmk_core/common/action_util.c **** {
 437               		.loc 1 124 0
 438               		.cfi_startproc
 439               	.LVL21:
 440               	/* prologue: function */
 441               	/* frame size = 0 */
 442               	/* stack size = 0 */
 443               	.L__stack_usage = 0
 125:../../tmk_core/common/action_util.c ****     oneshot_mods = mods;
 444               		.loc 1 125 0
 445 0000 8093 0000 		sts oneshot_mods,r24
 446 0004 0895      		ret
 447               		.cfi_endproc
 448               	.LFE114:
 450               		.section	.text.clear_oneshot_mods,"ax",@progbits
 451               	.global	clear_oneshot_mods
 453               	clear_oneshot_mods:
 454               	.LFB115:
 131:../../tmk_core/common/action_util.c **** {
 455               		.loc 1 131 0
 456               		.cfi_startproc
 457               	/* prologue: function */
 458               	/* frame size = 0 */
 459               	/* stack size = 0 */
 460               	.L__stack_usage = 0
 132:../../tmk_core/common/action_util.c ****     oneshot_mods = 0;
 461               		.loc 1 132 0
 462 0000 1092 0000 		sts oneshot_mods,__zero_reg__
 463 0004 0895      		ret
 464               		.cfi_endproc
 465               	.LFE115:
 467               		.section	.text.has_anykey,"ax",@progbits
 468               	.global	has_anykey
 470               	has_anykey:
 471               	.LFB116:
 146:../../tmk_core/common/action_util.c **** {
 472               		.loc 1 146 0
 473               		.cfi_startproc
 474               	/* prologue: function */
 475               	/* frame size = 0 */
 476               	/* stack size = 0 */
 477               	.L__stack_usage = 0
 478               	.LVL22:
 479               	.LBB22:
 149:../../tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 480               		.loc 1 149 0
 481 0000 4091 0000 		lds r20,keyboard_report
 482 0004 5091 0000 		lds r21,keyboard_report+1
 483 0008 20E0      		ldi r18,0
 484 000a 30E0      		ldi r19,0
 147:../../tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 485               		.loc 1 147 0
 486 000c 80E0      		ldi r24,0
 487               	.LVL23:
 488               	.L48:
 145:../../tmk_core/common/action_util.c **** uint8_t has_anykey(void)
 489               		.loc 1 145 0
 490 000e FA01      		movw r30,r20
 491 0010 E20F      		add r30,r18
 492 0012 F31F      		adc r31,r19
 149:../../tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 493               		.loc 1 149 0
 494 0014 9181      		ldd r25,Z+1
 495 0016 9111      		cpse r25,__zero_reg__
 150:../../tmk_core/common/action_util.c ****             cnt++;
 496               		.loc 1 150 0
 497 0018 8F5F      		subi r24,lo8(-(1))
 498               	.LVL24:
 499               	.L47:
 500 001a 2F5F      		subi r18,-1
 501 001c 3F4F      		sbci r19,-1
 148:../../tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 502               		.loc 1 148 0
 503 001e 2F30      		cpi r18,15
 504 0020 3105      		cpc r19,__zero_reg__
 505 0022 01F4      		brne .L48
 506               	/* epilogue start */
 507               	.LBE22:
 153:../../tmk_core/common/action_util.c **** }
 508               		.loc 1 153 0
 509 0024 0895      		ret
 510               		.cfi_endproc
 511               	.LFE116:
 513               		.section	.text.send_keyboard_report,"ax",@progbits
 514               	.global	send_keyboard_report
 516               	send_keyboard_report:
 517               	.LFB100:
  55:../../tmk_core/common/action_util.c **** void send_keyboard_report(void) {
 518               		.loc 1 55 0
 519               		.cfi_startproc
 520               	/* prologue: function */
 521               	/* frame size = 0 */
 522               	/* stack size = 0 */
 523               	.L__stack_usage = 0
  56:../../tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
 524               		.loc 1 56 0
 525 0000 E091 0000 		lds r30,keyboard_report
 526 0004 F091 0000 		lds r31,keyboard_report+1
 527 0008 8091 0000 		lds r24,real_mods
 528 000c 8083      		st Z,r24
  57:../../tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 529               		.loc 1 57 0
 530 000e E091 0000 		lds r30,keyboard_report
 531 0012 F091 0000 		lds r31,keyboard_report+1
 532 0016 8081      		ld r24,Z
 533 0018 9091 0000 		lds r25,weak_mods
 534 001c 892B      		or r24,r25
 535 001e 8083      		st Z,r24
  59:../../tmk_core/common/action_util.c ****     if (oneshot_mods) {
 536               		.loc 1 59 0
 537 0020 9091 0000 		lds r25,oneshot_mods
 538 0024 9923      		tst r25
 539 0026 01F0      		breq .L55
  66:../../tmk_core/common/action_util.c ****         keyboard_report->mods |= oneshot_mods;
 540               		.loc 1 66 0
 541 0028 E091 0000 		lds r30,keyboard_report
 542 002c F091 0000 		lds r31,keyboard_report+1
 543 0030 8081      		ld r24,Z
 544 0032 892B      		or r24,r25
 545 0034 8083      		st Z,r24
  67:../../tmk_core/common/action_util.c ****         if (has_anykey()) {
 546               		.loc 1 67 0
 547 0036 0E94 0000 		call has_anykey
 548               	.LVL25:
 549 003a 8111      		cpse r24,__zero_reg__
  68:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
 550               		.loc 1 68 0
 551 003c 0E94 0000 		call clear_oneshot_mods
 552               	.LVL26:
 553               	.L55:
  72:../../tmk_core/common/action_util.c ****     host_keyboard_send(keyboard_report);
 554               		.loc 1 72 0
 555 0040 8091 0000 		lds r24,keyboard_report
 556 0044 9091 0000 		lds r25,keyboard_report+1
 557 0048 0C94 0000 		jmp host_keyboard_send
 558               	.LVL27:
 559               		.cfi_endproc
 560               	.LFE100:
 562               		.section	.text.has_anymod,"ax",@progbits
 563               	.global	has_anymod
 565               	has_anymod:
 566               	.LFB117:
 156:../../tmk_core/common/action_util.c **** {
 567               		.loc 1 156 0
 568               		.cfi_startproc
 569               	/* prologue: function */
 570               	/* frame size = 0 */
 571               	/* stack size = 0 */
 572               	.L__stack_usage = 0
 157:../../tmk_core/common/action_util.c ****     return bitpop(real_mods);
 573               		.loc 1 157 0
 574 0000 8091 0000 		lds r24,real_mods
 575 0004 0C94 0000 		jmp bitpop
 576               	.LVL28:
 577               		.cfi_endproc
 578               	.LFE117:
 580               		.section	.text.get_first_key,"ax",@progbits
 581               	.global	get_first_key
 583               	get_first_key:
 584               	.LFB118:
 161:../../tmk_core/common/action_util.c **** {
 585               		.loc 1 161 0
 586               		.cfi_startproc
 587 0000 CF93      		push r28
 588               	.LCFI0:
 589               		.cfi_def_cfa_offset 3
 590               		.cfi_offset 28, -2
 591 0002 DF93      		push r29
 592               	.LCFI1:
 593               		.cfi_def_cfa_offset 4
 594               		.cfi_offset 29, -3
 595               	/* prologue: function */
 596               	/* frame size = 0 */
 597               	/* stack size = 2 */
 598               	.L__stack_usage = 2
 163:../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
 599               		.loc 1 163 0
 600 0004 8091 0000 		lds r24,keyboard_protocol
 601 0008 E091 0000 		lds r30,keyboard_report
 602 000c F091 0000 		lds r31,keyboard_report+1
 603 0010 8823      		tst r24
 604 0012 01F0      		breq .L62
 163:../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
 605               		.loc 1 163 0 is_stmt 0 discriminator 1
 606 0014 8091 0000 		lds r24,keyboard_nkro
 607 0018 8823      		tst r24
 608 001a 01F0      		breq .L62
 609               	.LBB23:
 165:../../tmk_core/common/action_util.c ****         for (; i < KEYBOARD_REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 610               		.loc 1 165 0 is_stmt 1
 611 001c 20E0      		ldi r18,0
 612 001e 30E0      		ldi r19,0
 613 0020 00C0      		rjmp .L63
 614               	.L65:
 615               	.LVL29:
 616 0022 2F5F      		subi r18,-1
 617 0024 3F4F      		sbci r19,-1
 165:../../tmk_core/common/action_util.c ****         for (; i < KEYBOARD_REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 618               		.loc 1 165 0 is_stmt 0 discriminator 1
 619 0026 2F30      		cpi r18,15
 620 0028 3105      		cpc r19,__zero_reg__
 621 002a 01F0      		breq .L67
 622               	.L63:
 623 002c C22F      		mov r28,r18
 160:../../tmk_core/common/action_util.c **** uint8_t get_first_key(void)
 624               		.loc 1 160 0 is_stmt 1 discriminator 2
 625 002e DF01      		movw r26,r30
 626 0030 A20F      		add r26,r18
 627 0032 B31F      		adc r27,r19
 165:../../tmk_core/common/action_util.c ****         for (; i < KEYBOARD_REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 628               		.loc 1 165 0 discriminator 2
 629 0034 1196      		adiw r26,1
 630 0036 8C91      		ld r24,X
 631 0038 8823      		tst r24
 632 003a 01F0      		breq .L65
 633 003c 00C0      		rjmp .L64
 634               	.L67:
 165:../../tmk_core/common/action_util.c ****         for (; i < KEYBOARD_REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 635               		.loc 1 165 0 is_stmt 0
 636 003e CFE0      		ldi r28,lo8(15)
 637               	.L64:
 167:../../tmk_core/common/action_util.c ****         return i<<3 | biton(keyboard_report->nkro.bits[i]);
 638               		.loc 1 167 0 is_stmt 1
 639 0040 D0E0      		ldi r29,0
 640 0042 EC0F      		add r30,r28
 641 0044 FD1F      		adc r31,r29
 642 0046 8181      		ldd r24,Z+1
 643 0048 0E94 0000 		call biton
 644               	.LVL30:
 645 004c 93E0      		ldi r25,3
 646               		1:
 647 004e CC0F      		lsl r28
 648 0050 DD1F      		rol r29
 649 0052 9A95      		dec r25
 650 0054 01F4      		brne 1b
 651 0056 8C2B      		or r24,r28
 652 0058 00C0      		rjmp .L66
 653               	.L62:
 654               	.LBE23:
 180:../../tmk_core/common/action_util.c ****     return keyboard_report->keys[0];
 655               		.loc 1 180 0
 656 005a 8281      		ldd r24,Z+2
 657               	.L66:
 658               	/* epilogue start */
 182:../../tmk_core/common/action_util.c **** }
 659               		.loc 1 182 0
 660 005c DF91      		pop r29
 661 005e CF91      		pop r28
 662 0060 0895      		ret
 663               		.cfi_endproc
 664               	.LFE118:
 666               	.global	keyboard_report
 667               		.section	.data.keyboard_report,"aw",@progbits
 670               	keyboard_report:
 671 0000 0000      		.word	__compound_literal.0
 672               		.section	.bss.real_mods,"aw",@nobits
 675               	real_mods:
 676 0000 00        		.zero	1
 677               		.section	.bss.weak_mods,"aw",@nobits
 680               	weak_mods:
 681 0000 00        		.zero	1
 682               		.section	.bss.oneshot_mods,"aw",@nobits
 685               	oneshot_mods:
 686 0000 00        		.zero	1
 687               		.section	.bss.__compound_literal.0,"aw",@nobits
 690               	__compound_literal.0:
 691 0000 0000 0000 		.zero	16
 691      0000 0000 
 691      0000 0000 
 691      0000 0000 
 692               		.text
 693               	.Letext0:
 694               		.file 2 "d:\\applications\\keyboard\\avr-gcc-4.7.2-mingw32\\bin\\../lib/gcc/avr/4.7.2/../../../../
 695               		.file 3 "../../tmk_core/common/report.h"
 696               		.file 4 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 697               		.file 5 "../../tmk_core/common/host.h"
 698               		.file 6 "../../tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:00000000 action_util.c
C:\Users\tiny\AppData\Local\Temp\cc7kuLFE.s:2      *ABS*:0000003e __SP_H__
C:\Users\tiny\AppData\Local\Temp\cc7kuLFE.s:3      *ABS*:0000003d __SP_L__
C:\Users\tiny\AppData\Local\Temp\cc7kuLFE.s:4      *ABS*:0000003f __SREG__
C:\Users\tiny\AppData\Local\Temp\cc7kuLFE.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\tiny\AppData\Local\Temp\cc7kuLFE.s:6      *ABS*:00000001 __zero_reg__
C:\Users\tiny\AppData\Local\Temp\cc7kuLFE.s:13     .text.add_key:00000000 add_key
C:\Users\tiny\AppData\Local\Temp\cc7kuLFE.s:670    .data.keyboard_report:00000000 keyboard_report
C:\Users\tiny\AppData\Local\Temp\cc7kuLFE.s:122    .text.del_key:00000000 del_key
C:\Users\tiny\AppData\Local\Temp\cc7kuLFE.s:211    .text.clear_keys:00000000 clear_keys
C:\Users\tiny\AppData\Local\Temp\cc7kuLFE.s:247    .text.get_mods:00000000 get_mods
C:\Users\tiny\AppData\Local\Temp\cc7kuLFE.s:675    .bss.real_mods:00000000 real_mods
C:\Users\tiny\AppData\Local\Temp\cc7kuLFE.s:264    .text.add_mods:00000000 add_mods
C:\Users\tiny\AppData\Local\Temp\cc7kuLFE.s:284    .text.del_mods:00000000 del_mods
C:\Users\tiny\AppData\Local\Temp\cc7kuLFE.s:306    .text.set_mods:00000000 set_mods
C:\Users\tiny\AppData\Local\Temp\cc7kuLFE.s:324    .text.clear_mods:00000000 clear_mods
C:\Users\tiny\AppData\Local\Temp\cc7kuLFE.s:341    .text.get_weak_mods:00000000 get_weak_mods
C:\Users\tiny\AppData\Local\Temp\cc7kuLFE.s:680    .bss.weak_mods:00000000 weak_mods
C:\Users\tiny\AppData\Local\Temp\cc7kuLFE.s:358    .text.add_weak_mods:00000000 add_weak_mods
C:\Users\tiny\AppData\Local\Temp\cc7kuLFE.s:378    .text.del_weak_mods:00000000 del_weak_mods
C:\Users\tiny\AppData\Local\Temp\cc7kuLFE.s:400    .text.set_weak_mods:00000000 set_weak_mods
C:\Users\tiny\AppData\Local\Temp\cc7kuLFE.s:418    .text.clear_weak_mods:00000000 clear_weak_mods
C:\Users\tiny\AppData\Local\Temp\cc7kuLFE.s:435    .text.set_oneshot_mods:00000000 set_oneshot_mods
C:\Users\tiny\AppData\Local\Temp\cc7kuLFE.s:685    .bss.oneshot_mods:00000000 oneshot_mods
C:\Users\tiny\AppData\Local\Temp\cc7kuLFE.s:453    .text.clear_oneshot_mods:00000000 clear_oneshot_mods
C:\Users\tiny\AppData\Local\Temp\cc7kuLFE.s:470    .text.has_anykey:00000000 has_anykey
C:\Users\tiny\AppData\Local\Temp\cc7kuLFE.s:516    .text.send_keyboard_report:00000000 send_keyboard_report
C:\Users\tiny\AppData\Local\Temp\cc7kuLFE.s:565    .text.has_anymod:00000000 has_anymod
C:\Users\tiny\AppData\Local\Temp\cc7kuLFE.s:583    .text.get_first_key:00000000 get_first_key
C:\Users\tiny\AppData\Local\Temp\cc7kuLFE.s:690    .bss.__compound_literal.0:00000000 __compound_literal.0

UNDEFINED SYMBOLS
keyboard_protocol
keyboard_nkro
host_keyboard_send
bitpop
biton
__do_copy_data
__do_clear_bss
