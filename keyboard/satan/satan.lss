
satan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00005bd2  00005c66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005bd2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e6  00800160  00800160  00005cc6  2**0
                  ALLOC
  3 .noinit       00000004  00800246  00800246  00005cc6  2**0
                  ALLOC
  4 .stab         00001c38  00000000  00000000  00005cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000006a3  00000000  00000000  00007900  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00007fa3  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d20  00000000  00000000  00007fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00012678  00000000  00000000  00008cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000047f7  00000000  00000000  0001b350  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00006f73  00000000  00000000  0001fb47  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000204c  00000000  00000000  00026abc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000049af  00000000  00000000  00028b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000973e  00000000  00000000  0002d4b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000e98  00000000  00000000  00036bf5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	0c 94 19 04 	jmp	0x832	; 0x832 <__ctors_end>
       4:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
       8:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
       c:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
      10:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
      14:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
      18:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
      1c:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
      20:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
      24:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
      28:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__vector_10>
      2c:	0c 94 b7 16 	jmp	0x2d6e	; 0x2d6e <__vector_11>
      30:	0c 94 02 25 	jmp	0x4a04	; 0x4a04 <__vector_12>
      34:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
      38:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      3c:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      40:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
      44:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__vector_17>
      48:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      4c:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
      50:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
      54:	0c 94 6f 25 	jmp	0x4ade	; 0x4ade <__vector_21>
      58:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      5c:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
      60:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>

	ParserData->TotalDeviceReports = 1;
      64:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
      68:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
      6c:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      70:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
      74:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
      78:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
      7c:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      80:	0c 94 39 0b 	jmp	0x1672	; 0x1672 <__vector_32>
      84:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      88:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      8c:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
      90:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
      94:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
      98:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
      9c:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
      a0:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
      a4:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>
      a8:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__bad_interrupt>

000000ac <fn_actions>:

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      ac:	00 f0 01 f0 02 f0 03 f0 04 f0 05 f0 06 f0 07 f0     ................
      bc:	00 d1 00 d0 f1 a3 f1 a2 00 c0                       ..........

000000c6 <keymaps>:
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
      c6:	00 20 1e 00 1f 00 20 00 21 00 22 00 23 00 24 00     . .... .!.".#.$.

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      d6:	25 00 26 00 27 00 2d 00 2e 00 2a 00 2b 00 14 00     %.&.'.-...*.+...
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
      e6:	1a 00 08 00 15 00 17 00 1c 00 18 00 0c 00 12 00     ................
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
      f6:	13 00 2f 00 30 00 31 00 39 00 04 00 16 00 07 00     ../.0.1.9.......
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     106:	09 00 0a 00 0b 00 0d 00 0e 00 0f 00 33 00 34 00     ............3.4.
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     116:	00 00 28 00 e1 00 00 00 1d 00 1b 00 06 00 19 00     ..(.............
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     126:	05 00 11 00 10 00 36 00 37 00 38 00 00 00 e1 00     ......6.7.8.....
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     136:	e0 00 e3 00 e2 00 00 00 00 00 2c 00 00 00 00 00     ..........,.....
     146:	00 00 00 00 0a 20 50 00 0b 20 4f 00 00 20 1e 00     ..... P.. O.. ..
				ReportSize     -= 2;
     156:	1f 00 20 00 21 00 22 00 23 00 24 00 25 00 26 00     .. .!.".#.$.%.&.
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     166:	27 00 2d 00 2e 00 2a 00 2b 00 14 00 1a 00 08 00     '.-...*.+.......
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     176:	15 00 17 00 1c 00 18 00 0c 00 12 00 13 00 2f 00     ............../.
     186:	30 00 31 00 0b 20 04 00 16 00 07 00 09 00 0a 00     0.1.. ..........
     196:	0b 00 0d 00 0e 00 0f 00 33 00 34 00 00 00 28 00     ........3.4...(.
     1a6:	e1 00 00 00 1d 00 1b 00 06 00 19 00 05 00 11 00     ................
     1b6:	10 00 36 00 37 00 38 00 00 00 e5 00 e0 00 e2 00     ..6.7.8.........
     1c6:	e3 00 00 00 00 00 2c 00 00 00 00 00 00 00 00 00     ......,.........
     1d6:	e7 00 e6 00 e4 00 09 20 35 00 3a 00 3b 00 3c 00     ....... 5.:.;.<.
     1e6:	3d 00 3e 00 3f 00 40 00 41 00 42 00 43 00 44 00     =.>.?.@.A.B.C.D.
     1f6:	45 00 4c 00 01 00 0c 20 52 00 0d 20 01 00 49 00     E.L.... R.. ..I.
     206:	01 00 01 00 01 00 01 00 01 00 01 00 01 00 01 00     ................
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     216:	01 00 50 00 51 00 4f 00 01 00 4a 00 50 00 51 00     ..P.Q.O...J.P.Q.
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     226:	52 00 4f 00 4a 00 01 00 00 00 01 00 01 00 00 00     R.O.J...........

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     236:	aa 00 a9 00 01 00 01 00 01 00 01 00 01 00 01 00     ................

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     246:	01 00 4d 00 00 00 52 00 ac 00 ae 00 ab 00 00 00     ..M...R.........
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     256:	00 00 01 00 00 00 00 00 00 00 00 00 51 00 50 00     ............Q.P.
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     266:	01 00 4f 00 00 00 00 00 00 00 00 00 00 00 00 00     ..O.............
				break;

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     276:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     286:	00 00 00 00 52 00 00 00 00 00 00 00 00 00 00 00     ....R...........
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     296:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2a6:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2b6:	00 00 00 00 00 00 00 00 00 00 00 00 01 20 02 20     ............. . 
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     2c6:	03 20 04 20 05 20 06 20 07 20 08 20 09 20 00 00     . . . . . . . ..
     2d6:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     2e6:	00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00     ................

000002f6 <__m.4692>:

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2f6:	01 1e 02 1e 01 20 02 20 01 23 02 23 01 23 02 23     ..... . .#.#.#.#
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     306:	01 1f 02 1f 01 22 02 22 01 1f 02 1f 01 1e 02 1e     ....."."........
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     316:	01 21 02 21 01 e1 01 1f 02 1f 02 e1 01 14 02 14     .!.!............
					}
				}

				ParserData->UsingReportIDs = true;

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     326:	01 14 02 14 01 37 02 37 01 06 02 06 01 12 02 12     .....7.7........
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     336:	01 10 02 10 00                                      .....

0000033b <__m.4694>:
     33b:	00                                                  .

0000033c <breathing_table>:
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     33c:	00 00 00 00 01 01 01 02 02 03 04 05 05 06 07 09     ................
     34c:	0a 0b 0c 0e 0f 11 12 14 15 17 19 1b 1d 1f 21 23     ..............!#
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     35c:	25 28 2a 2c 2f 31 34 36 39 3b 3e 41 43 46 49 4c     %(*,/1469;>ACFIL

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     36c:	4f 52 55 58 5a 5d 61 64 67 6a 6d 70 73 76 79 7c     ORUXZ]adgjmpsvy|
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     37c:	7f 83 86 89 8c 8f 92 95 98 9b 9e a2 a5 a7 aa ad     ................

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     38c:	b0 b3 b6 b9 bc be c1 c4 c6 c9 cb ce d0 d3 d5 d7     ................
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     39c:	da dc de e0 e2 e4 e6 e8 ea eb ed ee f0 f1 f3 f4     ................
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
				}

				CurrCollectionPath->Type       = ReportItemData;
     3ac:	f5 f6 f8 f9 fa fa fb fc fd fd fe fe fe ff ff ff     ................
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;

				if (UsageListSize)
     3bc:	ff ff ff ff fe fe fe fd fd fc fb fa fa f9 f8 f6     ................
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     3cc:	f5 f4 f3 f1 f0 ee ed eb ea e8 e6 e4 e2 e0 de dc     ................

					for (uint8_t i = 1; i < UsageListSize; i++)
					  UsageList[i - 1] = UsageList[i];
     3dc:	da d7 d5 d3 d0 ce cb c9 c6 c4 c1 be bc b9 b6 b3     ................

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     3ec:	b0 ad aa a7 a5 a2 9e 9b 98 95 92 8f 8c 89 86 83     ................
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     3fc:	80 7c 79 76 73 70 6d 6a 67 64 61 5d 5a 58 55 52     .|yvspmjgda]ZXUR
     40c:	4f 4c 49 46 43 41 3e 3b 39 36 34 31 2f 2c 2a 28     OLIFCA>;9641/,*(
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     41c:	25 23 21 1f 1d 1b 19 17 15 14 12 11 0f 0e 0c 0b     %#!.............

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     42c:	0a 09 07 06 05 05 04 03 02 02 01 01 01 00 00 00     ................

0000043c <RGBLED_KNIGHT_INTERVALS>:
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     43c:	64 32 14                                            d2.

0000043f <RGBLED_SNAKE_INTERVALS>:
     43f:	64 32 14                                            d2.

00000442 <RGBLED_RAINBOW_MOOD_INTERVALS>:
     442:	78 3c 1e                                            x<.

00000445 <RGBLED_BREATHING_INTERVALS>:
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     445:	1e 14 0a 05                                         ....

00000449 <RGBLED_BREATHING_TABLE>:
					NewReportItem.CollectionPath = CurrCollectionPath;
     449:	00 00 00 00 01 01 01 02 02 03 04 05 05 06 07 09     ................
					NewReportItem.ReportID       = CurrStateTable->ReportID;

					if (UsageListSize)
     459:	0a 0b 0c 0e 0f 11 12 14 15 17 19 1b 1d 1f 21 23     ..............!#
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     469:	25 28 2a 2c 2f 31 34 36 39 3b 3e 41 43 46 49 4c     %(*,/1469;>ACFIL

						for (uint8_t i = 1; i < UsageListSize; i++)
     479:	4f 52 55 58 5a 5d 61 64 67 6a 6d 70 73 76 79 7c     ORUXZ]adgjmpsvy|
     489:	7f 83 86 89 8c 8f 92 95 98 9b 9e a2 a5 a7 aa ad     ................
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     499:	b0 b3 b6 b9 bc be c1 c4 c6 c9 cb ce d0 d3 d5 d7     ................
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     4a9:	da dc de e0 e2 e4 e6 e8 ea eb ed ee f0 f1 f3 f4     ................
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     4b9:	f5 f6 f8 f9 fa fa fb fc fd fd fe fe fe ff ff ff     ................
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     4c9:	ff ff ff ff fe fe fe fd fd fc fb fa fa f9 f8 f6     ................
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     4d9:	f5 f4 f3 f1 f0 ee ed eb ea e8 e6 e4 e2 e0 de dc     ................
     4e9:	da d7 d5 d3 d0 ce cb c9 c6 c4 c1 be bc b9 b6 b3     ................

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     4f9:	b0 ad aa a7 a5 a2 9e 9b 98 95 92 8f 8c 89 86 83     ................

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     509:	80 7c 79 76 73 70 6d 6a 67 64 61 5d 5a 58 55 52     .|yvspmjgda]ZXUR
     519:	4f 4c 49 46 43 41 3e 3b 39 36 34 31 2f 2c 2a 28     OLIFCA>;9641/,*(
     529:	25 23 21 1f 1d 1b 19 17 15 14 12 11 0f 0e 0c 0b     %#!.............

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;
     539:	0a 09 07 06 05 05 04 03 02 02 01 01 01 00 00 00     ................

00000549 <DIM_CURVE>:

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     549:	00 01 01 02 02 02 02 02 02 03 03 03 03 03 03 03     ................
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     559:	03 03 03 03 03 03 03 04 04 04 04 04 04 04 04 04     ................
     569:	04 04 04 05 05 05 05 05 05 05 05 05 05 06 06 06     ................
     579:	06 06 06 06 06 07 07 07 07 07 07 07 08 08 08 08     ................
     589:	08 08 09 09 09 09 09 09 0a 0a 0a 0a 0a 0b 0b 0b     ................
     599:	0b 0b 0c 0c 0c 0c 0c 0d 0d 0d 0d 0e 0e 0e 0e 0f     ................
     5a9:	0f 0f 10 10 10 10 11 11 11 12 12 12 13 13 13 14     ................
     5b9:	14 14 15 15 16 16 16 17 17 18 18 19 19 19 1a 1a     ................
     5c9:	1b 1b 1c 1c 1d 1d 1e 1e 1f 20 20 21 21 22 23 23     .........  !!"##
     5d9:	24 24 25 26 26 27 28 28 29 2a 2b 2b 2c 2d 2e 2f     $$%&&'(()*++,-./
     5e9:	30 30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e     00123456789:;<=>
					  ParserData->TotalReportItems++;
     5f9:	3f 40 41 42 44 45 46 47 49 4a 4b 4c 4e 4f 51 52     ?@ABDEFGIJKLNOQR
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     609:	53 55 56 58 5a 5b 5d 5e 60 62 63 65 67 69 6b 6d     SUVXZ[]^`bcegikm
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     619:	6e 70 72 74 76 79 7b 7d 7f 81 84 86 88 8b 8d 90     nprtvy{}........
     629:	92 95 97 9a 9d 9f a2 a5 a8 ab ae b1 b4 b7 ba be     ................
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     639:	c1 c4 c8 cb cf d3 d6 da de e2 e6 ea ee f2 f8 ff     ................

00000649 <ProductString>:

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     649:	1a 03 47 00 48 00 36 00 30 00 20 00 52 00 47 00     ..G.H.6.0. .R.G.
		{
			UsageMinMax.Minimum = 0;
     659:	42 00 20 00 4d 00 4f 00 44 00 00 00                 B. .M.O.D...

00000665 <ManufacturerString>:
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     665:	0c 03 53 00 41 00 54 00 41 00 4e 00 00 00           ..S.A.T.A.N...

00000673 <LanguageString>:
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     673:	04 03 09 04                                         ....

00000677 <ConfigurationDescriptor>:
	  return HID_PARSE_NoUnfilteredReportItems;
     677:	09 02 8d 00 05 01 00 a0 fa 09 04 00 00 01 03 01     ................
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     687:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     697:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6a7:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     6b7:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     6c7:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     6d7:	01 00 01 22 20 00 07 05 84 03 20 00 01 07 05 04     ..." ..... .....
     6e7:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
     6f7:	01 00 01 22 39 00 07 05 85 03 10 00 01              ..."9........

00000704 <DeviceDescriptor>:
     704:	12 01 10 01 00 00 00 08 ed fe 60 60 03 00 01 02     ..........``....
     714:	00 01                                               ..

00000716 <NKROReport>:
     716:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     726:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
     736:	91 02 95 01 75 03 91 01 05 07 19 00 29 77 15 00     ....u.......)w..
     746:	25 01 95 78 75 01 81 02 c0                          %..xu....

0000074f <ConsoleReport>:
     74f:	06 31 ff 09 74 a1 01 09 75 15 00 25 ff 95 20 75     .1..t...u..%.. u
     75f:	08 81 02 09 76 15 00 25 ff 95 20 75 08 91 02 c0     ....v..%.. u....

0000076f <ExtrakeyReport>:
     76f:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
     77f:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     78f:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     79f:	10 95 01 81 00 c0                                   ......

000007a5 <MouseReport>:
     7a5:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     7b5:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     7c5:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     7d5:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     7e5:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

000007f2 <KeyboardReport>:
     7f2:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     802:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     812:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     822:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0 00     ..)...%...u.....

00000832 <__ctors_end>:
     832:	11 24       	eor	r1, r1
     834:	1f be       	out	0x3f, r1	; 63
     836:	cf ef       	ldi	r28, 0xFF	; 255
     838:	da e0       	ldi	r29, 0x0A	; 10
     83a:	de bf       	out	0x3e, r29	; 62
     83c:	cd bf       	out	0x3d, r28	; 61

0000083e <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     83e:	04 b6       	in	r0, 0x34	; 52
     840:	03 fe       	sbrs	r0, 3
     842:	24 c0       	rjmp	.+72     	; 0x88c <__do_copy_data>
     844:	80 91 46 02 	lds	r24, 0x0246
     848:	90 91 47 02 	lds	r25, 0x0247
     84c:	a0 91 48 02 	lds	r26, 0x0248
     850:	b0 91 49 02 	lds	r27, 0x0249
     854:	87 30       	cpi	r24, 0x07	; 7
     856:	90 4b       	sbci	r25, 0xB0	; 176
     858:	a7 40       	sbci	r26, 0x07	; 7
     85a:	b0 4b       	sbci	r27, 0xB0	; 176
     85c:	b9 f4       	brne	.+46     	; 0x88c <__do_copy_data>
        reset_key = 0;
     85e:	10 92 46 02 	sts	0x0246, r1
     862:	10 92 47 02 	sts	0x0247, r1
     866:	10 92 48 02 	sts	0x0248, r1
     86a:	10 92 49 02 	sts	0x0249, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     86e:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     870:	84 b7       	in	r24, 0x34	; 52
     872:	87 7f       	andi	r24, 0xF7	; 247
     874:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     876:	88 e1       	ldi	r24, 0x18	; 24
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	f8 94       	cli
     87c:	80 93 60 00 	sts	0x0060, r24
     880:	10 92 60 00 	sts	0x0060, r1
     884:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     886:	e0 e0       	ldi	r30, 0x00	; 0
     888:	f8 e3       	ldi	r31, 0x38	; 56
     88a:	09 95       	icall

0000088c <__do_copy_data>:
     88c:	11 e0       	ldi	r17, 0x01	; 1
     88e:	a0 e0       	ldi	r26, 0x00	; 0
     890:	b1 e0       	ldi	r27, 0x01	; 1
     892:	e2 ed       	ldi	r30, 0xD2	; 210
     894:	fb e5       	ldi	r31, 0x5B	; 91
     896:	02 c0       	rjmp	.+4      	; 0x89c <__do_copy_data+0x10>
     898:	05 90       	lpm	r0, Z+
     89a:	0d 92       	st	X+, r0
     89c:	a0 36       	cpi	r26, 0x60	; 96
     89e:	b1 07       	cpc	r27, r17
     8a0:	d9 f7       	brne	.-10     	; 0x898 <__do_copy_data+0xc>

000008a2 <__do_clear_bss>:
     8a2:	12 e0       	ldi	r17, 0x02	; 2
     8a4:	a0 e6       	ldi	r26, 0x60	; 96
     8a6:	b1 e0       	ldi	r27, 0x01	; 1
     8a8:	01 c0       	rjmp	.+2      	; 0x8ac <.do_clear_bss_start>

000008aa <.do_clear_bss_loop>:
     8aa:	1d 92       	st	X+, r1

000008ac <.do_clear_bss_start>:
     8ac:	a6 34       	cpi	r26, 0x46	; 70
     8ae:	b1 07       	cpc	r27, r17
     8b0:	e1 f7       	brne	.-8      	; 0x8aa <.do_clear_bss_loop>
     8b2:	0e 94 14 13 	call	0x2628	; 0x2628 <main>
     8b6:	0c 94 e7 2d 	jmp	0x5bce	; 0x5bce <_exit>

000008ba <__bad_interrupt>:
     8ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000008be <action_function>:
};

#define MODS_CTRL_MASK (MOD_BIT( KC_LSHIFT ) | MOD_BIT( KC_RSHIFT ) )

void action_function( keyrecord_t *record, uint8_t id, uint8_t opt )
{
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	ec 01       	movw	r28, r24
	static uint8_t shift_esc_shift_mask;
	switch ( id )
     8c4:	64 30       	cpi	r22, 0x04	; 4
     8c6:	09 f4       	brne	.+2      	; 0x8ca <action_function+0xc>
     8c8:	44 c0       	rjmp	.+136    	; 0x952 <action_function+0x94>
     8ca:	50 f4       	brcc	.+20     	; 0x8e0 <action_function+0x22>
     8cc:	61 30       	cpi	r22, 0x01	; 1
     8ce:	d1 f1       	breq	.+116    	; 0x944 <action_function+0x86>
     8d0:	c0 f0       	brcs	.+48     	; 0x902 <action_function+0x44>
     8d2:	62 30       	cpi	r22, 0x02	; 2
     8d4:	09 f4       	brne	.+2      	; 0x8d8 <action_function+0x1a>
     8d6:	67 c0       	rjmp	.+206    	; 0x9a6 <action_function+0xe8>
     8d8:	63 30       	cpi	r22, 0x03	; 3
     8da:	09 f0       	breq	.+2      	; 0x8de <action_function+0x20>
     8dc:	72 c0       	rjmp	.+228    	; 0x9c2 <action_function+0x104>
     8de:	6a c0       	rjmp	.+212    	; 0x9b4 <action_function+0xf6>
     8e0:	67 30       	cpi	r22, 0x07	; 7
     8e2:	09 f4       	brne	.+2      	; 0x8e6 <action_function+0x28>
     8e4:	4b c0       	rjmp	.+150    	; 0x97c <action_function+0xbe>
     8e6:	30 f4       	brcc	.+12     	; 0x8f4 <action_function+0x36>
     8e8:	65 30       	cpi	r22, 0x05	; 5
     8ea:	d1 f1       	breq	.+116    	; 0x960 <action_function+0xa2>
     8ec:	66 30       	cpi	r22, 0x06	; 6
     8ee:	09 f0       	breq	.+2      	; 0x8f2 <action_function+0x34>
     8f0:	68 c0       	rjmp	.+208    	; 0x9c2 <action_function+0x104>
     8f2:	3d c0       	rjmp	.+122    	; 0x96e <action_function+0xb0>
     8f4:	68 30       	cpi	r22, 0x08	; 8
     8f6:	09 f4       	brne	.+2      	; 0x8fa <action_function+0x3c>
     8f8:	48 c0       	rjmp	.+144    	; 0x98a <action_function+0xcc>
     8fa:	69 30       	cpi	r22, 0x09	; 9
     8fc:	09 f0       	breq	.+2      	; 0x900 <action_function+0x42>
     8fe:	61 c0       	rjmp	.+194    	; 0x9c2 <action_function+0x104>
     900:	4b c0       	rjmp	.+150    	; 0x998 <action_function+0xda>
	{
	case SHIFT_ESC:
		shift_esc_shift_mask = get_mods() & MODS_CTRL_MASK;
     902:	0e 94 5f 24 	call	0x48be	; 0x48be <get_mods>
     906:	82 72       	andi	r24, 0x22	; 34
     908:	99 27       	eor	r25, r25
     90a:	98 2f       	mov	r25, r24
     90c:	80 93 60 01 	sts	0x0160, r24
		if ( record->event.pressed)
     910:	8a 81       	ldd	r24, Y+2	; 0x02
     912:	88 23       	and	r24, r24
     914:	69 f0       	breq	.+26     	; 0x930 <action_function+0x72>
		{
			if ( shift_esc_shift_mask )
     916:	99 23       	and	r25, r25
     918:	19 f0       	breq	.+6      	; 0x920 <action_function+0x62>
			{
				add_key( KC_GRV );
     91a:	85 e3       	ldi	r24, 0x35	; 53
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	02 c0       	rjmp	.+4      	; 0x924 <action_function+0x66>
				send_keyboard_report();
			} else {
				add_key( KC_ESC );
     920:	89 e2       	ldi	r24, 0x29	; 41
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	0e 94 dd 23 	call	0x47ba	; 0x47ba <add_key>
	if ( record->event.pressed ){
		rgblight_pre();
	}
		break;
	}
}
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
			{
				add_key( KC_GRV );
				send_keyboard_report();
			} else {
				add_key( KC_ESC );
				send_keyboard_report();
     92c:	0c 94 9b 24 	jmp	0x4936	; 0x4936 <send_keyboard_report>
			}
		} else {
			if ( shift_esc_shift_mask )
     930:	99 23       	and	r25, r25
     932:	19 f0       	breq	.+6      	; 0x93a <action_function+0x7c>
			{
				del_key( KC_GRV );
     934:	85 e3       	ldi	r24, 0x35	; 53
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	02 c0       	rjmp	.+4      	; 0x93e <action_function+0x80>
				send_keyboard_report();
			} else {
				del_key( KC_ESC );
     93a:	89 e2       	ldi	r24, 0x29	; 41
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	0e 94 1e 24 	call	0x483c	; 0x483c <del_key>
     942:	f2 cf       	rjmp	.-28     	; 0x928 <action_function+0x6a>
			}
		}
		break;
	case RGBLED_TOGGLE:
		/* led operations */
		if ( record->event.pressed )
     944:	8a 81       	ldd	r24, Y+2	; 0x02
     946:	88 23       	and	r24, r24
     948:	e1 f1       	breq	.+120    	; 0x9c2 <action_function+0x104>
	if ( record->event.pressed ){
		rgblight_pre();
	}
		break;
	}
}
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
		break;
	case RGBLED_TOGGLE:
		/* led operations */
		if ( record->event.pressed )
		{
			rgblight_toggle();
     94e:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <rgblight_toggle>
		}

		break;
	case RGBLED_INCREASE_HUE:
		if ( record->event.pressed )
     952:	8a 81       	ldd	r24, Y+2	; 0x02
     954:	88 23       	and	r24, r24
     956:	a9 f1       	breq	.+106    	; 0x9c2 <action_function+0x104>
	if ( record->event.pressed ){
		rgblight_pre();
	}
		break;
	}
}
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28

		break;
	case RGBLED_INCREASE_HUE:
		if ( record->event.pressed )
		{
			rgblight_increase_hue();
     95c:	0c 94 23 08 	jmp	0x1046	; 0x1046 <rgblight_increase_hue>
		}
		break;
	case RGBLED_DECREASE_HUE:
		if ( record->event.pressed )
     960:	8a 81       	ldd	r24, Y+2	; 0x02
     962:	88 23       	and	r24, r24
     964:	71 f1       	breq	.+92     	; 0x9c2 <action_function+0x104>
	if ( record->event.pressed ){
		rgblight_pre();
	}
		break;
	}
}
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
		}
		break;
	case RGBLED_DECREASE_HUE:
		if ( record->event.pressed )
		{
			rgblight_decrease_hue();
     96a:	0c 94 04 08 	jmp	0x1008	; 0x1008 <rgblight_decrease_hue>
		}
		break;
	case RGBLED_INCREASE_SAT:
		if ( record->event.pressed )
     96e:	8a 81       	ldd	r24, Y+2	; 0x02
     970:	88 23       	and	r24, r24
     972:	39 f1       	breq	.+78     	; 0x9c2 <action_function+0x104>
	if ( record->event.pressed ){
		rgblight_pre();
	}
		break;
	}
}
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
		}
		break;
	case RGBLED_INCREASE_SAT:
		if ( record->event.pressed )
		{
			rgblight_increase_sat();
     978:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <rgblight_increase_sat>
		}
		break;
	case RGBLED_DECREASE_SAT:
		if ( record->event.pressed )
     97c:	8a 81       	ldd	r24, Y+2	; 0x02
     97e:	88 23       	and	r24, r24
     980:	01 f1       	breq	.+64     	; 0x9c2 <action_function+0x104>
	if ( record->event.pressed ){
		rgblight_pre();
	}
		break;
	}
}
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
		}
		break;
	case RGBLED_DECREASE_SAT:
		if ( record->event.pressed )
		{
			rgblight_decrease_sat();
     986:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <rgblight_decrease_sat>
		}
		break;
	case RGBLED_INCREASE_VAL:
		if ( record->event.pressed )
     98a:	8a 81       	ldd	r24, Y+2	; 0x02
     98c:	88 23       	and	r24, r24
     98e:	c9 f0       	breq	.+50     	; 0x9c2 <action_function+0x104>
	if ( record->event.pressed ){
		rgblight_pre();
	}
		break;
	}
}
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
		}
		break;
	case RGBLED_INCREASE_VAL:
		if ( record->event.pressed )
		{
			rgblight_increase_val();
     994:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <rgblight_increase_val>
		}
		break;
	case RGBLED_DECREASE_VAL:
		if ( record->event.pressed )
     998:	8a 81       	ldd	r24, Y+2	; 0x02
     99a:	88 23       	and	r24, r24
     99c:	91 f0       	breq	.+36     	; 0x9c2 <action_function+0x104>
	if ( record->event.pressed ){
		rgblight_pre();
	}
		break;
	}
}
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
		}
		break;
	case RGBLED_DECREASE_VAL:
		if ( record->event.pressed )
		{
			rgblight_decrease_val();
     9a2:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <rgblight_decrease_val>
		}
		break;
	case RGBLED_STEP_MODE:
		if ( record->event.pressed )
     9a6:	8a 81       	ldd	r24, Y+2	; 0x02
     9a8:	88 23       	and	r24, r24
     9aa:	59 f0       	breq	.+22     	; 0x9c2 <action_function+0x104>
	if ( record->event.pressed ){
		rgblight_pre();
	}
		break;
	}
}
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
		}
		break;
	case RGBLED_STEP_MODE:
		if ( record->event.pressed )
		{
			rgblight_step();
     9b0:	0c 94 9e 08 	jmp	0x113c	; 0x113c <rgblight_step>
		}
		break;
	case RGBLED_PRE_MODE:
	if ( record->event.pressed ){
     9b4:	8a 81       	ldd	r24, Y+2	; 0x02
     9b6:	88 23       	and	r24, r24
     9b8:	21 f0       	breq	.+8      	; 0x9c2 <action_function+0x104>
		rgblight_pre();
	}
		break;
	}
}
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
			rgblight_step();
		}
		break;
	case RGBLED_PRE_MODE:
	if ( record->event.pressed ){
		rgblight_pre();
     9be:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <rgblight_pre>
	}
		break;
	}
}
     9c2:	df 91       	pop	r29
     9c4:	cf 91       	pop	r28
     9c6:	08 95       	ret

000009c8 <action_get_macro>:


const macro_t *action_get_macro( keyrecord_t *record, uint8_t id, uint8_t opt )
{
	switch ( id )
     9c8:	61 11       	cpse	r22, r1
     9ca:	07 c0       	rjmp	.+14     	; 0x9da <action_get_macro+0x12>
		 */
		return(record->event.pressed
		 ? MACRO( T( 1 ), T( 3 ), T( 6 ), T( 6 ), T( 2 ), T( 5 ), T( 2 ), T( 1 ), T( 4 ),
				D( LSFT ), T( 2 ), U( LSFT ), T( Q ), T( Q ), T( DOT ), T( C ),
				T( O ), T( M ), END )
		 : MACRO( END ) );
     9cc:	fc 01       	movw	r30, r24
     9ce:	82 81       	ldd	r24, Z+2	; 0x02
     9d0:	88 23       	and	r24, r24
     9d2:	31 f0       	breq	.+12     	; 0x9e0 <action_get_macro+0x18>
     9d4:	26 ef       	ldi	r18, 0xF6	; 246
     9d6:	32 e0       	ldi	r19, 0x02	; 2
     9d8:	05 c0       	rjmp	.+10     	; 0x9e4 <action_get_macro+0x1c>
		break;
	}

	return(MACRO_NONE);
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	02 c0       	rjmp	.+4      	; 0x9e4 <action_get_macro+0x1c>
		 */
		return(record->event.pressed
		 ? MACRO( T( 1 ), T( 3 ), T( 6 ), T( 6 ), T( 2 ), T( 5 ), T( 2 ), T( 1 ), T( 4 ),
				D( LSFT ), T( 2 ), U( LSFT ), T( Q ), T( Q ), T( DOT ), T( C ),
				T( O ), T( M ), END )
		 : MACRO( END ) );
     9e0:	2b e3       	ldi	r18, 0x3B	; 59
     9e2:	33 e0       	ldi	r19, 0x03	; 3
		break;
	}

	return(MACRO_NONE);
};
     9e4:	c9 01       	movw	r24, r18
     9e6:	08 95       	ret

000009e8 <matrix_init_user>:
#include "satan.h"

__attribute__ ((weak))
void * matrix_init_user(void) {
	// leave these blank
};
     9e8:	08 95       	ret

000009ea <matrix_scan_user>:

__attribute__ ((weak))
void * matrix_scan_user(void) {
	// leave these blank
};
     9ea:	08 95       	ret

000009ec <matrix_init_kb>:

void * matrix_init_kb(void) {
	// put your keyboard start-up code here
	// runs once when the firmware starts up
	#ifdef BACKLIGHT_ENABLE
    	pwm_led_init();
     9ec:	0e 94 0f 05 	call	0xa1e	; 0xa1e <pwm_led_init>
	#endif

	#ifdef RGBLIGHT_ENABLE
	    rgblight_init();
     9f0:	0e 94 af 08 	call	0x115e	; 0x115e <rgblight_init>
	#endif



	if (matrix_init_user) {
     9f4:	84 ef       	ldi	r24, 0xF4	; 244
     9f6:	94 e0       	ldi	r25, 0x04	; 4
     9f8:	89 2b       	or	r24, r25
     9fa:	11 f0       	breq	.+4      	; 0xa00 <matrix_init_kb+0x14>
		(*matrix_init_user)();
     9fc:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <matrix_init_user>
	}
};
     a00:	08 95       	ret

00000a02 <matrix_scan_kb>:

void * matrix_scan_kb(void) {
	// put your looping keyboard code here
	// runs every cycle (a lot)

	if (matrix_scan_user) {
     a02:	85 ef       	ldi	r24, 0xF5	; 245
     a04:	94 e0       	ldi	r25, 0x04	; 4
     a06:	89 2b       	or	r24, r25
     a08:	11 f0       	breq	.+4      	; 0xa0e <matrix_scan_kb+0xc>
		(*matrix_scan_user)();
     a0a:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <matrix_scan_user>
	}
};
     a0e:	08 95       	ret

00000a10 <led_set>:
#include "led.h"


void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
     a10:	81 ff       	sbrs	r24, 1
     a12:	02 c0       	rjmp	.+4      	; 0xa18 <led_set+0x8>
        // output low
        DDRB |= (1<<2);
     a14:	22 9a       	sbi	0x04, 2	; 4
     a16:	01 c0       	rjmp	.+2      	; 0xa1a <led_set+0xa>
        PORTB &= ~(1<<2);
    } else {
        // Hi-Z
        DDRB &= ~(1<<2);
     a18:	22 98       	cbi	0x04, 2	; 4
        PORTB &= ~(1<<2);
     a1a:	2a 98       	cbi	0x05, 2	; 5
     a1c:	08 95       	ret

00000a1e <pwm_led_init>:
uint8_t pos = 0;


void pwm_led_init(void)
{
    if(is_init){
     a1e:	80 91 64 01 	lds	r24, 0x0164
     a22:	81 11       	cpse	r24, r1
     a24:	16 c0       	rjmp	.+44     	; 0xa52 <pwm_led_init+0x34>
        return;
    }
    is_init = true;
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	80 93 64 01 	sts	0x0164, r24
    /* Timer1 setup */
    /* CTC mode */
    TCCR1B |= _BV(WGM12);
     a2c:	80 91 81 00 	lds	r24, 0x0081
     a30:	88 60       	ori	r24, 0x08	; 8
     a32:	80 93 81 00 	sts	0x0081, r24
    /* Clock selelct: clk/1 */
    TCCR1B |= _BV(CS10);
     a36:	80 91 81 00 	lds	r24, 0x0081
     a3a:	81 60       	ori	r24, 0x01	; 1
     a3c:	80 93 81 00 	sts	0x0081, r24
    /* Set TOP value */
    uint8_t sreg = SREG;
     a40:	8f b7       	in	r24, 0x3f	; 63
    cli();
     a42:	f8 94       	cli
    OCR1AH = (PWM_LED_TIMER_TOP>>8)&0xff;
     a44:	93 e0       	ldi	r25, 0x03	; 3
     a46:	90 93 89 00 	sts	0x0089, r25
    OCR1AL = PWM_LED_TIMER_TOP&0xff;
     a4a:	90 ed       	ldi	r25, 0xD0	; 208
     a4c:	90 93 88 00 	sts	0x0088, r25
    SREG = sreg;
     a50:	8f bf       	out	0x3f, r24	; 63
     a52:	08 95       	ret

00000a54 <open_led>:
}
void open_led(void)
{
    PORTB |= (1<<6);
     a54:	2e 9a       	sbi	0x05, 6	; 5
     a56:	08 95       	ret

00000a58 <close_led>:
}
void close_led(void)
{
    PORTB &= ~(1<<6);
     a58:	2e 98       	cbi	0x05, 6	; 5
     a5a:	08 95       	ret

00000a5c <pwm_led_enable>:
}
void pwm_led_enable(void)
{
    /* Enable Compare Match Interrupt */
    TIMSK1 |= _BV(OCIE1A);
     a5c:	ef e6       	ldi	r30, 0x6F	; 111
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	80 81       	ld	r24, Z
     a62:	82 60       	ori	r24, 0x02	; 2
     a64:	80 83       	st	Z, r24
     a66:	08 95       	ret

00000a68 <pwm_led_disable>:
}

void pwm_led_disable(void)
{
    /* Disable Compare Match Interrupt */
    TIMSK1 &= ~_BV(OCIE1A);
     a68:	ef e6       	ldi	r30, 0x6F	; 111
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	80 81       	ld	r24, Z
     a6e:	8d 7f       	andi	r24, 0xFD	; 253
     a70:	80 83       	st	Z, r24
     a72:	08 95       	ret

00000a74 <backlight_set>:
}
void backlight_set(uint8_t level)
{
    //uart_transmit(level);
    current_level = level;
     a74:	80 93 63 01 	sts	0x0163, r24
    DDRB |= (1<<6);
     a78:	26 9a       	sbi	0x04, 6	; 4
    //PORTB |= (1<<6);
    //pwm_led_init();
   // pwm_led_enable();

    if(level > 0)
     a7a:	81 11       	cpse	r24, r1
    {
        pwm_led_enable();
     a7c:	0c 94 2e 05 	jmp	0xa5c	; 0xa5c <pwm_led_enable>
    }
    else
    {

        pwm_led_disable();
     a80:	0e 94 34 05 	call	0xa68	; 0xa68 <pwm_led_disable>
        close_led();
     a84:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <close_led>

00000a88 <tick>:
}


void tick(void)
{
    if(current_level == 1)
     a88:	80 91 63 01 	lds	r24, 0x0163
     a8c:	81 30       	cpi	r24, 0x01	; 1
     a8e:	11 f4       	brne	.+4      	; 0xa94 <tick+0xc>
    {
        duty_cycle = 85;
     a90:	85 e5       	ldi	r24, 0x55	; 85
     a92:	03 c0       	rjmp	.+6      	; 0xa9a <tick+0x12>
    }
    else if(current_level == 2)
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	21 f4       	brne	.+8      	; 0xaa0 <tick+0x18>
    {
        duty_cycle = 130;
     a98:	82 e8       	ldi	r24, 0x82	; 130
     a9a:	80 93 62 01 	sts	0x0162, r24
     a9e:	08 95       	ret
    }
    else if(current_level == 3)
     aa0:	83 30       	cpi	r24, 0x03	; 3
     aa2:	11 f4       	brne	.+4      	; 0xaa8 <tick+0x20>
    {
        duty_cycle = 190;
     aa4:	8e eb       	ldi	r24, 0xBE	; 190
     aa6:	f9 cf       	rjmp	.-14     	; 0xa9a <tick+0x12>
    }
    else if(current_level == 4)
     aa8:	84 30       	cpi	r24, 0x04	; 4
     aaa:	11 f4       	brne	.+4      	; 0xab0 <tick+0x28>
    {
        duty_cycle = 255;
     aac:	8f ef       	ldi	r24, 0xFF	; 255
     aae:	f5 cf       	rjmp	.-22     	; 0xa9a <tick+0x12>
    }
    else if(current_level == 5)
     ab0:	85 30       	cpi	r24, 0x05	; 5
     ab2:	81 f4       	brne	.+32     	; 0xad4 <tick+0x4c>
    {
        pos++;
     ab4:	80 91 61 01 	lds	r24, 0x0161
     ab8:	8f 5f       	subi	r24, 0xFF	; 255
     aba:	80 93 61 01 	sts	0x0161, r24
        duty_cycle = pgm_read_byte(&breathing_table[0][pos]);
     abe:	e8 2f       	mov	r30, r24
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	e4 5c       	subi	r30, 0xC4	; 196
     ac4:	fc 4f       	sbci	r31, 0xFC	; 252
     ac6:	e4 91       	lpm	r30, Z
     ac8:	e0 93 62 01 	sts	0x0162, r30
        if(pos >= 0xff){
     acc:	8f 3f       	cpi	r24, 0xFF	; 255
     ace:	11 f4       	brne	.+4      	; 0xad4 <tick+0x4c>
            pos = 0;
     ad0:	10 92 61 01 	sts	0x0161, r1
     ad4:	08 95       	ret

00000ad6 <__vector_17>:
        }
    }
}

ISR(TIMER1_COMPA_vect)
{
     ad6:	1f 92       	push	r1
     ad8:	0f 92       	push	r0
     ada:	0f b6       	in	r0, 0x3f	; 63
     adc:	0f 92       	push	r0
     ade:	11 24       	eor	r1, r1
     ae0:	2f 93       	push	r18
     ae2:	3f 93       	push	r19
     ae4:	4f 93       	push	r20
     ae6:	5f 93       	push	r21
     ae8:	6f 93       	push	r22
     aea:	7f 93       	push	r23
     aec:	8f 93       	push	r24
     aee:	9f 93       	push	r25
     af0:	af 93       	push	r26
     af2:	bf 93       	push	r27
     af4:	ef 93       	push	r30
     af6:	ff 93       	push	r31
    acc++;
     af8:	80 91 65 01 	lds	r24, 0x0165
     afc:	8f 5f       	subi	r24, 0xFF	; 255
     afe:	80 93 65 01 	sts	0x0165, r24
    if(acc == accuracy)
     b02:	90 91 00 01 	lds	r25, 0x0100
     b06:	89 13       	cpse	r24, r25
     b08:	06 c0       	rjmp	.+12     	; 0xb16 <__stack+0x17>
    {
        acc=0;
     b0a:	10 92 65 01 	sts	0x0165, r1
        open_led();
     b0e:	0e 94 2a 05 	call	0xa54	; 0xa54 <open_led>
        tick();
     b12:	0e 94 44 05 	call	0xa88	; 0xa88 <tick>
    }
    if (acc == duty_cycle)
     b16:	90 91 65 01 	lds	r25, 0x0165
     b1a:	80 91 62 01 	lds	r24, 0x0162
     b1e:	98 13       	cpse	r25, r24
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <__stack+0x27>
    {
        close_led();
     b22:	0e 94 2c 05 	call	0xa58	; 0xa58 <close_led>
    }
}
     b26:	ff 91       	pop	r31
     b28:	ef 91       	pop	r30
     b2a:	bf 91       	pop	r27
     b2c:	af 91       	pop	r26
     b2e:	9f 91       	pop	r25
     b30:	8f 91       	pop	r24
     b32:	7f 91       	pop	r23
     b34:	6f 91       	pop	r22
     b36:	5f 91       	pop	r21
     b38:	4f 91       	pop	r20
     b3a:	3f 91       	pop	r19
     b3c:	2f 91       	pop	r18
     b3e:	0f 90       	pop	r0
     b40:	0f be       	out	0x3f, r0	; 63
     b42:	0f 90       	pop	r0
     b44:	1f 90       	pop	r1
     b46:	18 95       	reti

00000b48 <ws2812_sendarray_mask>:
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;

  masklo	=~maskhi&ws2812_PORTREG;
     b48:	3e b1       	in	r19, 0x0e	; 14
     b4a:	24 2f       	mov	r18, r20
     b4c:	20 95       	com	r18
     b4e:	23 23       	and	r18, r19
  maskhi |=        ws2812_PORTREG;
     b50:	3e b1       	in	r19, 0x0e	; 14
     b52:	34 2b       	or	r19, r20
  sreg_prev=SREG;
     b54:	4f b7       	in	r20, 0x3f	; 63
  cli();
     b56:	f8 94       	cli
#define w_nop2  "rjmp .+0 \n\t"
#define w_nop4  w_nop2 w_nop2
#define w_nop8  w_nop4 w_nop4
#define w_nop16 w_nop8 w_nop8

void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
     b58:	68 0f       	add	r22, r24
     b5a:	79 1f       	adc	r23, r25
  masklo	=~maskhi&ws2812_PORTREG;
  maskhi |=        ws2812_PORTREG;
  sreg_prev=SREG;
  cli();

  while (datlen--) {
     b5c:	12 c0       	rjmp	.+36     	; 0xb82 <loop34+0x1c>
    curbyte=*data++;
     b5e:	fc 01       	movw	r30, r24
     b60:	51 91       	ld	r21, Z+
     b62:	cf 01       	movw	r24, r30

    asm volatile(
     b64:	e8 e0       	ldi	r30, 0x08	; 8

00000b66 <loop34>:
     b66:	3e b9       	out	0x0e, r19	; 14
     b68:	00 00       	nop
     b6a:	00 c0       	rjmp	.+0      	; 0xb6c <loop34+0x6>
     b6c:	57 ff       	sbrs	r21, 7
     b6e:	2e b9       	out	0x0e, r18	; 14
     b70:	55 0f       	add	r21, r21
     b72:	00 00       	nop
     b74:	00 c0       	rjmp	.+0      	; 0xb76 <loop34+0x10>
     b76:	00 c0       	rjmp	.+0      	; 0xb78 <loop34+0x12>
     b78:	00 c0       	rjmp	.+0      	; 0xb7a <loop34+0x14>
     b7a:	2e b9       	out	0x0e, r18	; 14
     b7c:	00 c0       	rjmp	.+0      	; 0xb7e <loop34+0x18>
     b7e:	ea 95       	dec	r30
     b80:	91 f7       	brne	.-28     	; 0xb66 <loop34>
  masklo	=~maskhi&ws2812_PORTREG;
  maskhi |=        ws2812_PORTREG;
  sreg_prev=SREG;
  cli();

  while (datlen--) {
     b82:	86 17       	cp	r24, r22
     b84:	97 07       	cpc	r25, r23
     b86:	59 f7       	brne	.-42     	; 0xb5e <ws2812_sendarray_mask+0x16>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }

  SREG=sreg_prev;
     b88:	4f bf       	out	0x3f, r20	; 63
     b8a:	08 95       	ret

00000b8c <ws2812_setleds_pin>:
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_DDRREG |= pinmask; // Enable DDR
     b8c:	2d b1       	in	r18, 0x0d	; 13
     b8e:	24 2b       	or	r18, r20
     b90:	2d b9       	out	0x0d, r18	; 13
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
     b92:	9b 01       	movw	r18, r22
     b94:	22 0f       	add	r18, r18
     b96:	33 1f       	adc	r19, r19
     b98:	26 0f       	add	r18, r22
     b9a:	37 1f       	adc	r19, r23
     b9c:	b9 01       	movw	r22, r18
     b9e:	0e 94 a4 05 	call	0xb48	; 0xb48 <ws2812_sendarray_mask>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ba2:	87 ec       	ldi	r24, 0xC7	; 199
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	01 97       	sbiw	r24, 0x01	; 1
     ba8:	f1 f7       	brne	.-4      	; 0xba6 <ws2812_setleds_pin+0x1a>
     baa:	00 c0       	rjmp	.+0      	; 0xbac <ws2812_setleds_pin+0x20>
     bac:	00 00       	nop
     bae:	08 95       	ret

00000bb0 <ws2812_setleds>:
#include "debug.h"

// Setleds for standard RGB
void inline ws2812_setleds(struct cRGB *ledarray, uint16_t leds)
{
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
     bb0:	44 e0       	ldi	r20, 0x04	; 4
     bb2:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <ws2812_setleds_pin>

00000bb6 <setrgb>:
		}
	}
  setrgb(r,g,b, led1);
}

void setrgb(uint8_t r, uint8_t g, uint8_t b, struct cRGB *led1) {
     bb6:	f9 01       	movw	r30, r18
  (*led1).r = r;
     bb8:	81 83       	std	Z+1, r24	; 0x01
  (*led1).g = g;
     bba:	60 83       	st	Z, r22
  (*led1).b = b;
     bbc:	42 83       	std	Z+2, r20	; 0x02
     bbe:	08 95       	ret

00000bc0 <sethsv>:
rgblight_config_t inmem_config;
struct cRGB led[RGBLED_NUM];
uint8_t rgblight_inited = 0;


void sethsv(uint16_t hue, uint8_t sat, uint8_t val, struct cRGB *led1) {
     bc0:	7f 92       	push	r7
     bc2:	8f 92       	push	r8
     bc4:	9f 92       	push	r9
     bc6:	af 92       	push	r10
     bc8:	bf 92       	push	r11
     bca:	cf 92       	push	r12
     bcc:	df 92       	push	r13
     bce:	ef 92       	push	r14
     bd0:	ff 92       	push	r15
     bd2:	0f 93       	push	r16
     bd4:	1f 93       	push	r17
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	5c 01       	movw	r10, r24
	The DIM_CURVE is used only on brightness/value and on saturation (inverted).
	This looks the most natural.
	*/
  uint8_t r, g, b;

  val = pgm_read_byte(&DIM_CURVE[val]);
     bdc:	e4 2f       	mov	r30, r20
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	e7 5b       	subi	r30, 0xB7	; 183
     be2:	fa 4f       	sbci	r31, 0xFA	; 250
     be4:	44 91       	lpm	r20, Z
	sat = 255 - pgm_read_byte(&DIM_CURVE[255 - sat]);
     be6:	8f ef       	ldi	r24, 0xFF	; 255
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	fc 01       	movw	r30, r24
     bec:	e6 1b       	sub	r30, r22
     bee:	f1 09       	sbc	r31, r1
     bf0:	e7 5b       	subi	r30, 0xB7	; 183
     bf2:	fa 4f       	sbci	r31, 0xFA	; 250
     bf4:	e4 91       	lpm	r30, Z
     bf6:	e0 95       	com	r30

	uint8_t base;

	if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
     bf8:	09 f4       	brne	.+2      	; 0xbfc <sethsv+0x3c>
     bfa:	98 c0       	rjmp	.+304    	; 0xd2c <sethsv+0x16c>
		r = val;
		g = val;
		b = val;
	} else  {
		base = ((255 - sat) * val) >> 8;
     bfc:	e4 2e       	mov	r14, r20
     bfe:	f1 2c       	mov	r15, r1
     c00:	8e 1b       	sub	r24, r30
     c02:	91 09       	sbc	r25, r1
     c04:	8e 9d       	mul	r24, r14
     c06:	e0 01       	movw	r28, r0
     c08:	8f 9d       	mul	r24, r15
     c0a:	d0 0d       	add	r29, r0
     c0c:	9e 9d       	mul	r25, r14
     c0e:	d0 0d       	add	r29, r0
     c10:	11 24       	eor	r1, r1
     c12:	cd 2f       	mov	r28, r29
     c14:	dd 0f       	add	r29, r29
     c16:	dd 0b       	sbc	r29, r29

		switch (hue / 60) {
     c18:	0c e3       	ldi	r16, 0x3C	; 60
     c1a:	10 e0       	ldi	r17, 0x00	; 0
     c1c:	c5 01       	movw	r24, r10
     c1e:	b8 01       	movw	r22, r16
     c20:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <__udivmodhi4>
     c24:	6c 01       	movw	r12, r24
     c26:	62 30       	cpi	r22, 0x02	; 2
     c28:	71 05       	cpc	r23, r1
     c2a:	b9 f1       	breq	.+110    	; 0xc9a <sethsv+0xda>
     c2c:	40 f4       	brcc	.+16     	; 0xc3e <sethsv+0x7e>
     c2e:	61 15       	cp	r22, r1
     c30:	71 05       	cpc	r23, r1
     c32:	79 f0       	breq	.+30     	; 0xc52 <sethsv+0x92>
     c34:	61 30       	cpi	r22, 0x01	; 1
     c36:	71 05       	cpc	r23, r1
     c38:	09 f0       	breq	.+2      	; 0xc3c <sethsv+0x7c>
     c3a:	7b c0       	rjmp	.+246    	; 0xd32 <sethsv+0x172>
     c3c:	1a c0       	rjmp	.+52     	; 0xc72 <sethsv+0xb2>
     c3e:	64 30       	cpi	r22, 0x04	; 4
     c40:	71 05       	cpc	r23, r1
     c42:	09 f4       	brne	.+2      	; 0xc46 <sethsv+0x86>
     c44:	4e c0       	rjmp	.+156    	; 0xce2 <sethsv+0x122>
     c46:	c8 f1       	brcs	.+114    	; 0xcba <sethsv+0xfa>
     c48:	65 30       	cpi	r22, 0x05	; 5
     c4a:	71 05       	cpc	r23, r1
     c4c:	09 f0       	breq	.+2      	; 0xc50 <sethsv+0x90>
     c4e:	71 c0       	rjmp	.+226    	; 0xd32 <sethsv+0x172>
     c50:	59 c0       	rjmp	.+178    	; 0xd04 <sethsv+0x144>
		case 0:
			r = val;
			g = (((val - base)*hue) / 60) + base;
     c52:	ec 1a       	sub	r14, r28
     c54:	f1 08       	sbc	r15, r1
     c56:	ea 9c       	mul	r14, r10
     c58:	c0 01       	movw	r24, r0
     c5a:	eb 9c       	mul	r14, r11
     c5c:	90 0d       	add	r25, r0
     c5e:	fa 9c       	mul	r15, r10
     c60:	90 0d       	add	r25, r0
     c62:	11 24       	eor	r1, r1
     c64:	b8 01       	movw	r22, r16
     c66:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <__udivmodhi4>
     c6a:	7c 2e       	mov	r7, r28
     c6c:	76 0e       	add	r7, r22
			b = base;
     c6e:	9c 2e       	mov	r9, r28
     c70:	5b c0       	rjmp	.+182    	; 0xd28 <sethsv+0x168>
			break;

		case 1:
			r = (((val - base)*(60 - (hue % 60))) / 60) + base;
     c72:	ec 1a       	sub	r14, r28
     c74:	f1 08       	sbc	r15, r1
     c76:	b8 01       	movw	r22, r16
     c78:	6c 19       	sub	r22, r12
     c7a:	7d 09       	sbc	r23, r13
     c7c:	e6 9e       	mul	r14, r22
     c7e:	c0 01       	movw	r24, r0
     c80:	e7 9e       	mul	r14, r23
     c82:	90 0d       	add	r25, r0
     c84:	f6 9e       	mul	r15, r22
     c86:	90 0d       	add	r25, r0
     c88:	11 24       	eor	r1, r1
     c8a:	b8 01       	movw	r22, r16
     c8c:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <__udivmodhi4>
     c90:	8c 2e       	mov	r8, r28
     c92:	86 0e       	add	r8, r22
			g = val;
			b = base;
     c94:	9c 2e       	mov	r9, r28
			b = base;
			break;

		case 1:
			r = (((val - base)*(60 - (hue % 60))) / 60) + base;
			g = val;
     c96:	74 2e       	mov	r7, r20
			b = base;
			break;
     c98:	4c c0       	rjmp	.+152    	; 0xd32 <sethsv+0x172>

		case 2:
			r = base;
			g = val;
			b = (((val - base)*(hue % 60)) / 60) + base;
     c9a:	ec 1a       	sub	r14, r28
     c9c:	f1 08       	sbc	r15, r1
     c9e:	ec 9c       	mul	r14, r12
     ca0:	c0 01       	movw	r24, r0
     ca2:	ed 9c       	mul	r14, r13
     ca4:	90 0d       	add	r25, r0
     ca6:	fc 9c       	mul	r15, r12
     ca8:	90 0d       	add	r25, r0
     caa:	11 24       	eor	r1, r1
     cac:	b8 01       	movw	r22, r16
     cae:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <__udivmodhi4>
     cb2:	9c 2e       	mov	r9, r28
     cb4:	96 0e       	add	r9, r22
			b = base;
			break;

		case 2:
			r = base;
			g = val;
     cb6:	74 2e       	mov	r7, r20
     cb8:	12 c0       	rjmp	.+36     	; 0xcde <sethsv+0x11e>
			b = (((val - base)*(hue % 60)) / 60) + base;
			break;

		case 3:
			r = base;
			g = (((val - base)*(60 - (hue % 60))) / 60) + base;
     cba:	ec 1a       	sub	r14, r28
     cbc:	f1 08       	sbc	r15, r1
     cbe:	b8 01       	movw	r22, r16
     cc0:	6c 19       	sub	r22, r12
     cc2:	7d 09       	sbc	r23, r13
     cc4:	e6 9e       	mul	r14, r22
     cc6:	c0 01       	movw	r24, r0
     cc8:	e7 9e       	mul	r14, r23
     cca:	90 0d       	add	r25, r0
     ccc:	f6 9e       	mul	r15, r22
     cce:	90 0d       	add	r25, r0
     cd0:	11 24       	eor	r1, r1
     cd2:	b8 01       	movw	r22, r16
     cd4:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <__udivmodhi4>
     cd8:	7c 2e       	mov	r7, r28
     cda:	76 0e       	add	r7, r22
			b = val;
     cdc:	94 2e       	mov	r9, r20
			g = val;
			b = (((val - base)*(hue % 60)) / 60) + base;
			break;

		case 3:
			r = base;
     cde:	8c 2e       	mov	r8, r28
			g = (((val - base)*(60 - (hue % 60))) / 60) + base;
			b = val;
			break;
     ce0:	28 c0       	rjmp	.+80     	; 0xd32 <sethsv+0x172>

		case 4:
			r = (((val - base)*(hue % 60)) / 60) + base;
     ce2:	ec 1a       	sub	r14, r28
     ce4:	f1 08       	sbc	r15, r1
     ce6:	ec 9c       	mul	r14, r12
     ce8:	c0 01       	movw	r24, r0
     cea:	ed 9c       	mul	r14, r13
     cec:	90 0d       	add	r25, r0
     cee:	fc 9c       	mul	r15, r12
     cf0:	90 0d       	add	r25, r0
     cf2:	11 24       	eor	r1, r1
     cf4:	b8 01       	movw	r22, r16
     cf6:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <__udivmodhi4>
     cfa:	8c 2e       	mov	r8, r28
     cfc:	86 0e       	add	r8, r22
			g = base;
			b = val;
     cfe:	94 2e       	mov	r9, r20
			b = val;
			break;

		case 4:
			r = (((val - base)*(hue % 60)) / 60) + base;
			g = base;
     d00:	7c 2e       	mov	r7, r28
			b = val;
			break;
     d02:	17 c0       	rjmp	.+46     	; 0xd32 <sethsv+0x172>

		case 5:
			r = val;
			g = base;
			b = (((val - base)*(60 - (hue % 60))) / 60) + base;
     d04:	ec 1a       	sub	r14, r28
     d06:	f1 08       	sbc	r15, r1
     d08:	b8 01       	movw	r22, r16
     d0a:	6c 19       	sub	r22, r12
     d0c:	7d 09       	sbc	r23, r13
     d0e:	e6 9e       	mul	r14, r22
     d10:	c0 01       	movw	r24, r0
     d12:	e7 9e       	mul	r14, r23
     d14:	90 0d       	add	r25, r0
     d16:	f6 9e       	mul	r15, r22
     d18:	90 0d       	add	r25, r0
     d1a:	11 24       	eor	r1, r1
     d1c:	b8 01       	movw	r22, r16
     d1e:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <__udivmodhi4>
     d22:	9c 2e       	mov	r9, r28
     d24:	96 0e       	add	r9, r22
			b = val;
			break;

		case 5:
			r = val;
			g = base;
     d26:	7c 2e       	mov	r7, r28
			g = base;
			b = val;
			break;

		case 5:
			r = val;
     d28:	84 2e       	mov	r8, r20
			g = base;
			b = (((val - base)*(60 - (hue % 60))) / 60) + base;
			break;
     d2a:	03 c0       	rjmp	.+6      	; 0xd32 <sethsv+0x172>
	uint8_t base;

	if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
		r = val;
		g = val;
		b = val;
     d2c:	94 2e       	mov	r9, r20

	uint8_t base;

	if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
		r = val;
		g = val;
     d2e:	74 2e       	mov	r7, r20
	sat = 255 - pgm_read_byte(&DIM_CURVE[255 - sat]);

	uint8_t base;

	if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
		r = val;
     d30:	84 2e       	mov	r8, r20
			g = base;
			b = (((val - base)*(60 - (hue % 60))) / 60) + base;
			break;
		}
	}
  setrgb(r,g,b, led1);
     d32:	49 2d       	mov	r20, r9
     d34:	67 2d       	mov	r22, r7
     d36:	88 2d       	mov	r24, r8
}
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	cf 90       	pop	r12
     d48:	bf 90       	pop	r11
     d4a:	af 90       	pop	r10
     d4c:	9f 90       	pop	r9
     d4e:	8f 90       	pop	r8
     d50:	7f 90       	pop	r7
			g = base;
			b = (((val - base)*(60 - (hue % 60))) / 60) + base;
			break;
		}
	}
  setrgb(r,g,b, led1);
     d52:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <setrgb>

00000d56 <eeconfig_read_rgblight>:
  (*led1).b = b;
}


uint32_t eeconfig_read_rgblight(void) {
  return eeprom_read_dword(EECONFIG_RGBLIGHT);
     d56:	87 e0       	ldi	r24, 0x07	; 7
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	0c 94 b0 2d 	jmp	0x5b60	; 0x5b60 <__eerd_dword_m32u4>

00000d5e <eeconfig_write_rgblight>:
}
void eeconfig_write_rgblight(uint32_t val) {
     d5e:	ab 01       	movw	r20, r22
     d60:	bc 01       	movw	r22, r24
  eeprom_write_dword(EECONFIG_RGBLIGHT, val);
     d62:	87 e0       	ldi	r24, 0x07	; 7
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0c 94 ca 2d 	jmp	0x5b94	; 0x5b94 <__eewr_dword_m32u4>

00000d6a <eeconfig_write_rgblight_default>:
}
void eeconfig_write_rgblight_default(void) {
	dprintf("eeconfig_write_rgblight_default\n");
	rgblight_config.enable = 1;
	rgblight_config.mode = 1;
	rgblight_config.hue = 200;
     d6a:	83 e0       	ldi	r24, 0x03	; 3
     d6c:	80 93 18 02 	sts	0x0218, r24
     d70:	e9 e1       	ldi	r30, 0x19	; 25
     d72:	f2 e0       	ldi	r31, 0x02	; 2
     d74:	80 81       	ld	r24, Z
     d76:	80 78       	andi	r24, 0x80	; 128
     d78:	84 66       	ori	r24, 0x64	; 100
     d7a:	8f 77       	andi	r24, 0x7F	; 127
     d7c:	80 83       	st	Z, r24
	rgblight_config.sat = 204;
     d7e:	8c ec       	ldi	r24, 0xCC	; 204
     d80:	80 93 1a 02 	sts	0x021A, r24
	rgblight_config.val = 204;
     d84:	80 93 1b 02 	sts	0x021B, r24
	eeconfig_write_rgblight(rgblight_config.raw);
     d88:	60 91 18 02 	lds	r22, 0x0218
     d8c:	70 91 19 02 	lds	r23, 0x0219
     d90:	80 91 1a 02 	lds	r24, 0x021A
     d94:	90 91 1b 02 	lds	r25, 0x021B
     d98:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <eeconfig_write_rgblight>

00000d9c <rgblight_set>:
  rgblight_set();

}

void rgblight_set(void) {
	if (rgblight_config.enable) {
     d9c:	80 91 18 02 	lds	r24, 0x0218
     da0:	80 ff       	sbrs	r24, 0
     da2:	06 c0       	rjmp	.+12     	; 0xdb0 <rgblight_set+0x14>
		ws2812_setleds(led, RGBLED_NUM);
     da4:	68 e0       	ldi	r22, 0x08	; 8
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	80 e2       	ldi	r24, 0x20	; 32
     daa:	92 e0       	ldi	r25, 0x02	; 2
     dac:	0c 94 d8 05 	jmp	0xbb0	; 0xbb0 <ws2812_setleds>
     db0:	e2 e2       	ldi	r30, 0x22	; 34
     db2:	f2 e0       	ldi	r31, 0x02	; 2
  }
  rgblight_set();

}

void rgblight_set(void) {
     db4:	df 01       	movw	r26, r30
     db6:	11 97       	sbiw	r26, 0x01	; 1
	if (rgblight_config.enable) {
		ws2812_setleds(led, RGBLED_NUM);
	} else {
		for (uint8_t i=0;i<RGBLED_NUM;i++) {
	    led[i].r = 0;
     db8:	1c 92       	st	X, r1
  }
  rgblight_set();

}

void rgblight_set(void) {
     dba:	df 01       	movw	r26, r30
     dbc:	12 97       	sbiw	r26, 0x02	; 2
	if (rgblight_config.enable) {
		ws2812_setleds(led, RGBLED_NUM);
	} else {
		for (uint8_t i=0;i<RGBLED_NUM;i++) {
	    led[i].r = 0;
	    led[i].g = 0;
     dbe:	1c 92       	st	X, r1
	    led[i].b = 0;
     dc0:	10 82       	st	Z, r1
     dc2:	33 96       	adiw	r30, 0x03	; 3

void rgblight_set(void) {
	if (rgblight_config.enable) {
		ws2812_setleds(led, RGBLED_NUM);
	} else {
		for (uint8_t i=0;i<RGBLED_NUM;i++) {
     dc4:	82 e0       	ldi	r24, 0x02	; 2
     dc6:	ea 33       	cpi	r30, 0x3A	; 58
     dc8:	f8 07       	cpc	r31, r24
     dca:	a1 f7       	brne	.-24     	; 0xdb4 <rgblight_set+0x18>
     dcc:	eb cf       	rjmp	.-42     	; 0xda4 <rgblight_set+0x8>

00000dce <rgblight_setrgb>:
		eeconfig_write_rgblight(rgblight_config.raw);
		dprintf("rgblight set hsv [EEPROM]: %u,%u,%u\n", rgblight_config.hue, rgblight_config.sat, rgblight_config.val);
  }
}

void rgblight_setrgb(uint8_t r, uint8_t g, uint8_t b){
     dce:	e2 e2       	ldi	r30, 0x22	; 34
     dd0:	f2 e0       	ldi	r31, 0x02	; 2
     dd2:	df 01       	movw	r26, r30
     dd4:	11 97       	sbiw	r26, 0x01	; 1
  // dprintf("rgblight set rgb: %u,%u,%u\n", r,g,b);
  for (uint8_t i=0;i<RGBLED_NUM;i++) {
    led[i].r = r;
     dd6:	8c 93       	st	X, r24
		eeconfig_write_rgblight(rgblight_config.raw);
		dprintf("rgblight set hsv [EEPROM]: %u,%u,%u\n", rgblight_config.hue, rgblight_config.sat, rgblight_config.val);
  }
}

void rgblight_setrgb(uint8_t r, uint8_t g, uint8_t b){
     dd8:	df 01       	movw	r26, r30
     dda:	12 97       	sbiw	r26, 0x02	; 2
  // dprintf("rgblight set rgb: %u,%u,%u\n", r,g,b);
  for (uint8_t i=0;i<RGBLED_NUM;i++) {
    led[i].r = r;
    led[i].g = g;
     ddc:	6c 93       	st	X, r22
    led[i].b = b;
     dde:	40 83       	st	Z, r20
     de0:	33 96       	adiw	r30, 0x03	; 3
  }
}

void rgblight_setrgb(uint8_t r, uint8_t g, uint8_t b){
  // dprintf("rgblight set rgb: %u,%u,%u\n", r,g,b);
  for (uint8_t i=0;i<RGBLED_NUM;i++) {
     de2:	92 e0       	ldi	r25, 0x02	; 2
     de4:	ea 33       	cpi	r30, 0x3A	; 58
     de6:	f9 07       	cpc	r31, r25
     de8:	a1 f7       	brne	.-24     	; 0xdd2 <rgblight_setrgb+0x4>
    led[i].r = r;
    led[i].g = g;
    led[i].b = b;
  }
  rgblight_set();
     dea:	0c 94 ce 06 	jmp	0xd9c	; 0xd9c <rgblight_set>

00000dee <rgblight_sethsv_noeeprom>:
    val = rgblight_config.val-RGBLIGHT_VAL_STEP;
  }
  rgblight_sethsv(rgblight_config.hue, rgblight_config.sat, val);
}

void rgblight_sethsv_noeeprom(uint16_t hue, uint8_t sat, uint8_t val){
     dee:	cf 92       	push	r12
     df0:	df 92       	push	r13
     df2:	ef 92       	push	r14
     df4:	ff 92       	push	r15
     df6:	0f 93       	push	r16
     df8:	1f 93       	push	r17
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <rgblight_sethsv_noeeprom+0x12>
     e00:	1f 92       	push	r1
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	f8 2e       	mov	r15, r24
     e08:	c9 2e       	mov	r12, r25
     e0a:	d6 2e       	mov	r13, r22
     e0c:	e4 2e       	mov	r14, r20
	inmem_config.raw = rgblight_config.raw;
     e0e:	00 91 18 02 	lds	r16, 0x0218
     e12:	10 91 19 02 	lds	r17, 0x0219
     e16:	20 91 1a 02 	lds	r18, 0x021A
     e1a:	30 91 1b 02 	lds	r19, 0x021B
     e1e:	00 93 1c 02 	sts	0x021C, r16
     e22:	10 93 1d 02 	sts	0x021D, r17
     e26:	20 93 1e 02 	sts	0x021E, r18
     e2a:	30 93 1f 02 	sts	0x021F, r19
  if (rgblight_config.enable) {
     e2e:	80 91 18 02 	lds	r24, 0x0218
     e32:	80 ff       	sbrs	r24, 0
     e34:	1e c0       	rjmp	.+60     	; 0xe72 <rgblight_sethsv_noeeprom+0x84>
    struct cRGB tmp_led;
    sethsv(hue, sat, val, &tmp_led);
     e36:	9e 01       	movw	r18, r28
     e38:	2f 5f       	subi	r18, 0xFF	; 255
     e3a:	3f 4f       	sbci	r19, 0xFF	; 255
     e3c:	8f 2d       	mov	r24, r15
     e3e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <sethsv>
		inmem_config.hue = hue;
     e42:	80 91 1c 02 	lds	r24, 0x021C
     e46:	f0 fa       	bst	r15, 0
     e48:	87 f9       	bld	r24, 7
     e4a:	80 93 1c 02 	sts	0x021C, r24
     e4e:	f6 94       	lsr	r15
     e50:	20 91 1d 02 	lds	r18, 0x021D
     e54:	20 78       	andi	r18, 0x80	; 128
     e56:	2f 29       	or	r18, r15
     e58:	c0 fa       	bst	r12, 0
     e5a:	27 f9       	bld	r18, 7
     e5c:	20 93 1d 02 	sts	0x021D, r18
		inmem_config.sat = sat;
     e60:	d0 92 1e 02 	sts	0x021E, r13
		inmem_config.val = val;
     e64:	e0 92 1f 02 	sts	0x021F, r14
    // dprintf("rgblight set hue [MEMORY]: %u,%u,%u\n", inmem_config.hue, inmem_config.sat, inmem_config.val);
    rgblight_setrgb(tmp_led.r, tmp_led.g, tmp_led.b);
     e68:	4b 81       	ldd	r20, Y+3	; 0x03
     e6a:	69 81       	ldd	r22, Y+1	; 0x01
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	0e 94 e7 06 	call	0xdce	; 0xdce <rgblight_setrgb>
  }
}
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	1f 91       	pop	r17
     e7e:	0f 91       	pop	r16
     e80:	ff 90       	pop	r15
     e82:	ef 90       	pop	r14
     e84:	df 90       	pop	r13
     e86:	cf 90       	pop	r12
     e88:	08 95       	ret

00000e8a <rgblight_sethsv>:
void rgblight_sethsv(uint16_t hue, uint8_t sat, uint8_t val){
     e8a:	0f 93       	push	r16
     e8c:	1f 93       	push	r17
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29
     e92:	c8 2f       	mov	r28, r24
     e94:	19 2f       	mov	r17, r25
     e96:	06 2f       	mov	r16, r22
     e98:	d4 2f       	mov	r29, r20
  if (rgblight_config.enable) {
     e9a:	80 91 18 02 	lds	r24, 0x0218
     e9e:	80 ff       	sbrs	r24, 0
     ea0:	44 c0       	rjmp	.+136    	; 0xf2a <rgblight_sethsv+0xa0>
		if (rgblight_config.mode == 1) {
     ea2:	98 2f       	mov	r25, r24
     ea4:	9e 77       	andi	r25, 0x7E	; 126
     ea6:	92 30       	cpi	r25, 0x02	; 2
     ea8:	29 f4       	brne	.+10     	; 0xeb4 <rgblight_sethsv+0x2a>
			// same static color
			rgblight_sethsv_noeeprom(hue, sat, val);
     eaa:	8c 2f       	mov	r24, r28
     eac:	91 2f       	mov	r25, r17
     eae:	0e 94 f7 06 	call	0xdee	; 0xdee <rgblight_sethsv_noeeprom>
     eb2:	1a c0       	rjmp	.+52     	; 0xee8 <rgblight_sethsv+0x5e>
		} else {
			// all LEDs in same color
			if (rgblight_config.mode >= 2 && rgblight_config.mode <= 5) {
     eb4:	28 2f       	mov	r18, r24
     eb6:	26 95       	lsr	r18
     eb8:	2f 73       	andi	r18, 0x3F	; 63
     eba:	92 2f       	mov	r25, r18
     ebc:	92 5c       	subi	r25, 0xC2	; 194
     ebe:	9f 73       	andi	r25, 0x3F	; 63
     ec0:	94 30       	cpi	r25, 0x04	; 4
     ec2:	18 f4       	brcc	.+6      	; 0xeca <rgblight_sethsv+0x40>
				// breathing mode, ignore the change of val, use in memory value instead
				val = rgblight_config.val;
     ec4:	d0 91 1b 02 	lds	r29, 0x021B
     ec8:	0f c0       	rjmp	.+30     	; 0xee8 <rgblight_sethsv+0x5e>
			} else if (rgblight_config.mode >= 6 && rgblight_config.mode <= 14) {
     eca:	26 5c       	subi	r18, 0xC6	; 198
     ecc:	2f 73       	andi	r18, 0x3F	; 63
     ece:	29 30       	cpi	r18, 0x09	; 9
     ed0:	58 f4       	brcc	.+22     	; 0xee8 <rgblight_sethsv+0x5e>
				// rainbow mood and rainbow swirl, ignore the change of hue
				hue = rgblight_config.hue;
     ed2:	88 1f       	adc	r24, r24
     ed4:	88 27       	eor	r24, r24
     ed6:	88 1f       	adc	r24, r24
     ed8:	10 91 19 02 	lds	r17, 0x0219
     edc:	c1 2f       	mov	r28, r17
     ede:	cc 0f       	add	r28, r28
     ee0:	c8 2b       	or	r28, r24
     ee2:	17 fb       	bst	r17, 7
     ee4:	11 27       	eor	r17, r17
     ee6:	10 f9       	bld	r17, 0
			}
		}
		rgblight_config.hue = hue;
     ee8:	80 91 18 02 	lds	r24, 0x0218
     eec:	c0 fb       	bst	r28, 0
     eee:	87 f9       	bld	r24, 7
     ef0:	80 93 18 02 	sts	0x0218, r24
     ef4:	c6 95       	lsr	r28
     ef6:	80 91 19 02 	lds	r24, 0x0219
     efa:	80 78       	andi	r24, 0x80	; 128
     efc:	8c 2b       	or	r24, r28
     efe:	10 fb       	bst	r17, 0
     f00:	87 f9       	bld	r24, 7
     f02:	80 93 19 02 	sts	0x0219, r24
		rgblight_config.sat = sat;
     f06:	00 93 1a 02 	sts	0x021A, r16
		rgblight_config.val = val;
     f0a:	d0 93 1b 02 	sts	0x021B, r29
		eeconfig_write_rgblight(rgblight_config.raw);
     f0e:	60 91 18 02 	lds	r22, 0x0218
     f12:	70 91 19 02 	lds	r23, 0x0219
     f16:	80 91 1a 02 	lds	r24, 0x021A
     f1a:	90 91 1b 02 	lds	r25, 0x021B
		dprintf("rgblight set hsv [EEPROM]: %u,%u,%u\n", rgblight_config.hue, rgblight_config.sat, rgblight_config.val);
  }
}
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	1f 91       	pop	r17
     f24:	0f 91       	pop	r16
			}
		}
		rgblight_config.hue = hue;
		rgblight_config.sat = sat;
		rgblight_config.val = val;
		eeconfig_write_rgblight(rgblight_config.raw);
     f26:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <eeconfig_write_rgblight>
		dprintf("rgblight set hsv [EEPROM]: %u,%u,%u\n", rgblight_config.hue, rgblight_config.sat, rgblight_config.val);
  }
}
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	1f 91       	pop	r17
     f30:	0f 91       	pop	r16
     f32:	08 95       	ret

00000f34 <rgblight_decrease_val>:
  }
  rgblight_sethsv(rgblight_config.hue, rgblight_config.sat, val);
}
void rgblight_decrease_val(void) {
	uint8_t val;
  if (rgblight_config.val - RGBLIGHT_VAL_STEP < 0) {
     f34:	40 91 1b 02 	lds	r20, 0x021B
     f38:	84 2f       	mov	r24, r20
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	41 97       	sbiw	r24, 0x11	; 17
     f3e:	14 f0       	brlt	.+4      	; 0xf44 <rgblight_decrease_val+0x10>
    val = 0;
  } else {
    val = rgblight_config.val-RGBLIGHT_VAL_STEP;
     f40:	41 51       	subi	r20, 0x11	; 17
     f42:	01 c0       	rjmp	.+2      	; 0xf46 <rgblight_decrease_val+0x12>
  rgblight_sethsv(rgblight_config.hue, rgblight_config.sat, val);
}
void rgblight_decrease_val(void) {
	uint8_t val;
  if (rgblight_config.val - RGBLIGHT_VAL_STEP < 0) {
    val = 0;
     f44:	40 e0       	ldi	r20, 0x00	; 0
  } else {
    val = rgblight_config.val-RGBLIGHT_VAL_STEP;
  }
  rgblight_sethsv(rgblight_config.hue, rgblight_config.sat, val);
     f46:	80 91 18 02 	lds	r24, 0x0218
     f4a:	88 1f       	adc	r24, r24
     f4c:	88 27       	eor	r24, r24
     f4e:	88 1f       	adc	r24, r24
     f50:	90 91 19 02 	lds	r25, 0x0219
     f54:	29 2f       	mov	r18, r25
     f56:	22 0f       	add	r18, r18
     f58:	97 fb       	bst	r25, 7
     f5a:	99 27       	eor	r25, r25
     f5c:	90 f9       	bld	r25, 0
     f5e:	60 91 1a 02 	lds	r22, 0x021A
     f62:	82 2b       	or	r24, r18
     f64:	0c 94 45 07 	jmp	0xe8a	; 0xe8a <rgblight_sethsv>

00000f68 <rgblight_increase_val>:
  }
  rgblight_sethsv(rgblight_config.hue, sat, rgblight_config.val);
}
void rgblight_increase_val(void){
	uint8_t val;
  if (rgblight_config.val + RGBLIGHT_VAL_STEP > 255) {
     f68:	40 91 1b 02 	lds	r20, 0x021B
     f6c:	84 2f       	mov	r24, r20
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	8f 3e       	cpi	r24, 0xEF	; 239
     f72:	91 05       	cpc	r25, r1
     f74:	14 f4       	brge	.+4      	; 0xf7a <rgblight_increase_val+0x12>
    val = 255;
  } else {
    val = rgblight_config.val+RGBLIGHT_VAL_STEP;
     f76:	4f 5e       	subi	r20, 0xEF	; 239
     f78:	01 c0       	rjmp	.+2      	; 0xf7c <rgblight_increase_val+0x14>
  rgblight_sethsv(rgblight_config.hue, sat, rgblight_config.val);
}
void rgblight_increase_val(void){
	uint8_t val;
  if (rgblight_config.val + RGBLIGHT_VAL_STEP > 255) {
    val = 255;
     f7a:	4f ef       	ldi	r20, 0xFF	; 255
  } else {
    val = rgblight_config.val+RGBLIGHT_VAL_STEP;
  }
  rgblight_sethsv(rgblight_config.hue, rgblight_config.sat, val);
     f7c:	80 91 18 02 	lds	r24, 0x0218
     f80:	88 1f       	adc	r24, r24
     f82:	88 27       	eor	r24, r24
     f84:	88 1f       	adc	r24, r24
     f86:	90 91 19 02 	lds	r25, 0x0219
     f8a:	29 2f       	mov	r18, r25
     f8c:	22 0f       	add	r18, r18
     f8e:	97 fb       	bst	r25, 7
     f90:	99 27       	eor	r25, r25
     f92:	90 f9       	bld	r25, 0
     f94:	60 91 1a 02 	lds	r22, 0x021A
     f98:	82 2b       	or	r24, r18
     f9a:	0c 94 45 07 	jmp	0xe8a	; 0xe8a <rgblight_sethsv>

00000f9e <rgblight_decrease_sat>:
  }
  rgblight_sethsv(rgblight_config.hue, sat, rgblight_config.val);
}
void rgblight_decrease_sat(void){
	uint8_t sat;
  if (rgblight_config.sat - RGBLIGHT_SAT_STEP < 0) {
     f9e:	60 91 1a 02 	lds	r22, 0x021A
     fa2:	86 2f       	mov	r24, r22
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	41 97       	sbiw	r24, 0x11	; 17
     fa8:	14 f0       	brlt	.+4      	; 0xfae <rgblight_decrease_sat+0x10>
    sat = 0;
  } else {
    sat = rgblight_config.sat-RGBLIGHT_SAT_STEP;
     faa:	61 51       	subi	r22, 0x11	; 17
     fac:	01 c0       	rjmp	.+2      	; 0xfb0 <rgblight_decrease_sat+0x12>
  rgblight_sethsv(rgblight_config.hue, sat, rgblight_config.val);
}
void rgblight_decrease_sat(void){
	uint8_t sat;
  if (rgblight_config.sat - RGBLIGHT_SAT_STEP < 0) {
    sat = 0;
     fae:	60 e0       	ldi	r22, 0x00	; 0
  } else {
    sat = rgblight_config.sat-RGBLIGHT_SAT_STEP;
  }
  rgblight_sethsv(rgblight_config.hue, sat, rgblight_config.val);
     fb0:	80 91 18 02 	lds	r24, 0x0218
     fb4:	88 1f       	adc	r24, r24
     fb6:	88 27       	eor	r24, r24
     fb8:	88 1f       	adc	r24, r24
     fba:	90 91 19 02 	lds	r25, 0x0219
     fbe:	29 2f       	mov	r18, r25
     fc0:	22 0f       	add	r18, r18
     fc2:	97 fb       	bst	r25, 7
     fc4:	99 27       	eor	r25, r25
     fc6:	90 f9       	bld	r25, 0
     fc8:	40 91 1b 02 	lds	r20, 0x021B
     fcc:	82 2b       	or	r24, r18
     fce:	0c 94 45 07 	jmp	0xe8a	; 0xe8a <rgblight_sethsv>

00000fd2 <rgblight_increase_sat>:
	}
  rgblight_sethsv(hue, rgblight_config.sat, rgblight_config.val);
}
void rgblight_increase_sat(void) {
	uint8_t sat;
  if (rgblight_config.sat + RGBLIGHT_SAT_STEP > 255) {
     fd2:	60 91 1a 02 	lds	r22, 0x021A
     fd6:	86 2f       	mov	r24, r22
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	8f 3e       	cpi	r24, 0xEF	; 239
     fdc:	91 05       	cpc	r25, r1
     fde:	14 f4       	brge	.+4      	; 0xfe4 <rgblight_increase_sat+0x12>
    sat = 255;
  } else {
    sat = rgblight_config.sat+RGBLIGHT_SAT_STEP;
     fe0:	6f 5e       	subi	r22, 0xEF	; 239
     fe2:	01 c0       	rjmp	.+2      	; 0xfe6 <rgblight_increase_sat+0x14>
  rgblight_sethsv(hue, rgblight_config.sat, rgblight_config.val);
}
void rgblight_increase_sat(void) {
	uint8_t sat;
  if (rgblight_config.sat + RGBLIGHT_SAT_STEP > 255) {
    sat = 255;
     fe4:	6f ef       	ldi	r22, 0xFF	; 255
  } else {
    sat = rgblight_config.sat+RGBLIGHT_SAT_STEP;
  }
  rgblight_sethsv(rgblight_config.hue, sat, rgblight_config.val);
     fe6:	80 91 18 02 	lds	r24, 0x0218
     fea:	88 1f       	adc	r24, r24
     fec:	88 27       	eor	r24, r24
     fee:	88 1f       	adc	r24, r24
     ff0:	90 91 19 02 	lds	r25, 0x0219
     ff4:	29 2f       	mov	r18, r25
     ff6:	22 0f       	add	r18, r18
     ff8:	97 fb       	bst	r25, 7
     ffa:	99 27       	eor	r25, r25
     ffc:	90 f9       	bld	r25, 0
     ffe:	40 91 1b 02 	lds	r20, 0x021B
    1002:	82 2b       	or	r24, r18
    1004:	0c 94 45 07 	jmp	0xe8a	; 0xe8a <rgblight_sethsv>

00001008 <rgblight_decrease_hue>:
  hue = (rgblight_config.hue+RGBLIGHT_HUE_STEP) % 360;
  rgblight_sethsv(hue, rgblight_config.sat, rgblight_config.val);
}
void rgblight_decrease_hue(void){
	uint16_t hue;
	if (rgblight_config.hue-RGBLIGHT_HUE_STEP <0 ) {
    1008:	20 91 18 02 	lds	r18, 0x0218
    100c:	22 1f       	adc	r18, r18
    100e:	22 27       	eor	r18, r18
    1010:	22 1f       	adc	r18, r18
    1012:	30 91 19 02 	lds	r19, 0x0219
    1016:	43 2f       	mov	r20, r19
    1018:	44 0f       	add	r20, r20
    101a:	84 2f       	mov	r24, r20
    101c:	82 2b       	or	r24, r18
    101e:	37 fb       	bst	r19, 7
    1020:	99 27       	eor	r25, r25
    1022:	90 f9       	bld	r25, 0
    1024:	8a 30       	cpi	r24, 0x0A	; 10
    1026:	91 05       	cpc	r25, r1
    1028:	1c f4       	brge	.+6      	; 0x1030 <rgblight_decrease_hue+0x28>
		hue = (rgblight_config.hue+360-RGBLIGHT_HUE_STEP) % 360;
    102a:	82 5a       	subi	r24, 0xA2	; 162
    102c:	9e 4f       	sbci	r25, 0xFE	; 254
    102e:	01 c0       	rjmp	.+2      	; 0x1032 <rgblight_decrease_hue+0x2a>
	} else {
		hue = (rgblight_config.hue-RGBLIGHT_HUE_STEP) % 360;
    1030:	0a 97       	sbiw	r24, 0x0a	; 10
    1032:	68 e6       	ldi	r22, 0x68	; 104
    1034:	71 e0       	ldi	r23, 0x01	; 1
    1036:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <__divmodhi4>
	}
  rgblight_sethsv(hue, rgblight_config.sat, rgblight_config.val);
    103a:	40 91 1b 02 	lds	r20, 0x021B
    103e:	60 91 1a 02 	lds	r22, 0x021A
    1042:	0c 94 45 07 	jmp	0xe8a	; 0xe8a <rgblight_sethsv>

00001046 <rgblight_increase_hue>:
}


void rgblight_increase_hue(void){
	uint16_t hue;
  hue = (rgblight_config.hue+RGBLIGHT_HUE_STEP) % 360;
    1046:	20 91 18 02 	lds	r18, 0x0218
    104a:	22 1f       	adc	r18, r18
    104c:	22 27       	eor	r18, r18
    104e:	22 1f       	adc	r18, r18
    1050:	30 91 19 02 	lds	r19, 0x0219
    1054:	43 2f       	mov	r20, r19
    1056:	44 0f       	add	r20, r20
    1058:	84 2f       	mov	r24, r20
    105a:	82 2b       	or	r24, r18
    105c:	37 fb       	bst	r19, 7
    105e:	99 27       	eor	r25, r25
    1060:	90 f9       	bld	r25, 0
    1062:	0a 96       	adiw	r24, 0x0a	; 10
    1064:	68 e6       	ldi	r22, 0x68	; 104
    1066:	71 e0       	ldi	r23, 0x01	; 1
    1068:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <__divmodhi4>
  rgblight_sethsv(hue, rgblight_config.sat, rgblight_config.val);
    106c:	40 91 1b 02 	lds	r20, 0x021B
    1070:	60 91 1a 02 	lds	r22, 0x021A
    1074:	0c 94 45 07 	jmp	0xe8a	; 0xe8a <rgblight_sethsv>

00001078 <rgblight_timer_init>:
}

// Animation timer -- AVR Timer3
void rgblight_timer_init(void) {
	static uint8_t rgblight_timer_is_init = 0;
	if (rgblight_timer_is_init) {
    1078:	80 91 67 01 	lds	r24, 0x0167
    107c:	81 11       	cpse	r24, r1
    107e:	0f c0       	rjmp	.+30     	; 0x109e <rgblight_timer_init+0x26>
		return;
	}
	rgblight_timer_is_init = 1;
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	80 93 67 01 	sts	0x0167, r24
	/* Timer 3 setup */
	TCCR3B = _BV(WGM32) //CTC mode OCR3A as TOP
    1086:	89 e0       	ldi	r24, 0x09	; 9
    1088:	80 93 91 00 	sts	0x0091, r24
	      | _BV(CS30); //Clock selelct: clk/1
	/* Set TOP value */
	uint8_t sreg = SREG;
    108c:	8f b7       	in	r24, 0x3f	; 63
	cli();
    108e:	f8 94       	cli
	OCR3AH = (RGBLED_TIMER_TOP>>8)&0xff;
    1090:	93 e0       	ldi	r25, 0x03	; 3
    1092:	90 93 99 00 	sts	0x0099, r25
	OCR3AL = RGBLED_TIMER_TOP&0xff;
    1096:	90 ed       	ldi	r25, 0xD0	; 208
    1098:	90 93 98 00 	sts	0x0098, r25
	SREG = sreg;
    109c:	8f bf       	out	0x3f, r24	; 63
    109e:	08 95       	ret

000010a0 <rgblight_timer_enable>:
}
void rgblight_timer_enable(void) {
	TIMSK3 |= _BV(OCIE3A);
    10a0:	e1 e7       	ldi	r30, 0x71	; 113
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	82 60       	ori	r24, 0x02	; 2
    10a8:	80 83       	st	Z, r24
    10aa:	08 95       	ret

000010ac <rgblight_timer_disable>:
	dprintf("TIMER3 enabled.\n");
}
void rgblight_timer_disable(void) {
	TIMSK3 &= ~_BV(OCIE3A);
    10ac:	e1 e7       	ldi	r30, 0x71	; 113
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	8d 7f       	andi	r24, 0xFD	; 253
    10b4:	80 83       	st	Z, r24
    10b6:	08 95       	ret

000010b8 <rgblight_mode>:
  }
	rgblight_mode(mode);
}

void rgblight_mode(uint8_t mode) {
	if (!rgblight_config.enable) {
    10b8:	90 91 18 02 	lds	r25, 0x0218
    10bc:	90 ff       	sbrs	r25, 0
    10be:	3d c0       	rjmp	.+122    	; 0x113a <rgblight_mode+0x82>
    10c0:	91 78       	andi	r25, 0x81	; 129
		return;
	}
  if (mode<1) {
    10c2:	81 11       	cpse	r24, r1
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <rgblight_mode+0x12>
		rgblight_config.mode = 1;
    10c6:	92 60       	ori	r25, 0x02	; 2
    10c8:	03 c0       	rjmp	.+6      	; 0x10d0 <rgblight_mode+0x18>
	} else if (mode > RGBLIGHT_MODES) {
    10ca:	88 31       	cpi	r24, 0x18	; 24
    10cc:	20 f0       	brcs	.+8      	; 0x10d6 <rgblight_mode+0x1e>
		rgblight_config.mode = RGBLIGHT_MODES;
    10ce:	9e 62       	ori	r25, 0x2E	; 46
    10d0:	90 93 18 02 	sts	0x0218, r25
    10d4:	05 c0       	rjmp	.+10     	; 0x10e0 <rgblight_mode+0x28>
	} else {
		rgblight_config.mode = mode;
    10d6:	8f 73       	andi	r24, 0x3F	; 63
    10d8:	88 0f       	add	r24, r24
    10da:	89 2b       	or	r24, r25
    10dc:	80 93 18 02 	sts	0x0218, r24
	}
  eeconfig_write_rgblight(rgblight_config.raw);
    10e0:	60 91 18 02 	lds	r22, 0x0218
    10e4:	70 91 19 02 	lds	r23, 0x0219
    10e8:	80 91 1a 02 	lds	r24, 0x021A
    10ec:	90 91 1b 02 	lds	r25, 0x021B
    10f0:	0e 94 af 06 	call	0xd5e	; 0xd5e <eeconfig_write_rgblight>
  dprintf("rgblight mode: %u\n", rgblight_config.mode);
	if (rgblight_config.mode == 1) {
    10f4:	80 91 18 02 	lds	r24, 0x0218
    10f8:	98 2f       	mov	r25, r24
    10fa:	9e 77       	andi	r25, 0x7E	; 126
    10fc:	92 30       	cpi	r25, 0x02	; 2
    10fe:	19 f4       	brne	.+6      	; 0x1106 <rgblight_mode+0x4e>
		rgblight_timer_disable();
    1100:	0e 94 56 08 	call	0x10ac	; 0x10ac <rgblight_timer_disable>
    1104:	07 c0       	rjmp	.+14     	; 0x1114 <rgblight_mode+0x5c>
	} else if (rgblight_config.mode >=2 && rgblight_config.mode <=23) {
    1106:	86 95       	lsr	r24
    1108:	82 5c       	subi	r24, 0xC2	; 194
    110a:	8f 73       	andi	r24, 0x3F	; 63
    110c:	86 31       	cpi	r24, 0x16	; 22
    110e:	10 f4       	brcc	.+4      	; 0x1114 <rgblight_mode+0x5c>
		// MODE 2-5, breathing
		// MODE 6-8, rainbow mood
		// MODE 9-14, rainbow swirl
		// MODE 15-20, snake
		// MODE 21-23, knight
		rgblight_timer_enable();
    1110:	0e 94 50 08 	call	0x10a0	; 0x10a0 <rgblight_timer_enable>
	}
  rgblight_sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val);
    1114:	80 91 18 02 	lds	r24, 0x0218
    1118:	88 1f       	adc	r24, r24
    111a:	88 27       	eor	r24, r24
    111c:	88 1f       	adc	r24, r24
    111e:	90 91 19 02 	lds	r25, 0x0219
    1122:	29 2f       	mov	r18, r25
    1124:	22 0f       	add	r18, r18
    1126:	97 fb       	bst	r25, 7
    1128:	99 27       	eor	r25, r25
    112a:	90 f9       	bld	r25, 0
    112c:	40 91 1b 02 	lds	r20, 0x021B
    1130:	60 91 1a 02 	lds	r22, 0x021A
    1134:	82 2b       	or	r24, r18
    1136:	0c 94 45 07 	jmp	0xe8a	; 0xe8a <rgblight_sethsv>
    113a:	08 95       	ret

0000113c <rgblight_step>:
	rgblight_mode(mode);
}

void rgblight_step(void) {
	uint8_t mode;
  mode = rgblight_config.mode + 1;
    113c:	80 91 18 02 	lds	r24, 0x0218
    1140:	86 95       	lsr	r24
    1142:	8f 73       	andi	r24, 0x3F	; 63
    1144:	8f 5f       	subi	r24, 0xFF	; 255
  if (mode > RGBLIGHT_MODES) {
    1146:	88 31       	cpi	r24, 0x18	; 24
    1148:	08 f0       	brcs	.+2      	; 0x114c <rgblight_step+0x10>
    mode = 1;
    114a:	81 e0       	ldi	r24, 0x01	; 1
  }
	rgblight_mode(mode);
    114c:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <rgblight_mode>

00001150 <rgblight_pre>:
	rgblight_mode(mode);
}

void rgblight_pre(void) {
	uint8_t mode;
  mode = rgblight_config.mode - 1;
    1150:	80 91 18 02 	lds	r24, 0x0218
    1154:	86 95       	lsr	r24
    1156:	8f 73       	andi	r24, 0x3F	; 63
  if (mode < 0) {
    mode = 0;
  }
	rgblight_mode(mode);
    1158:	81 50       	subi	r24, 0x01	; 1
    115a:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <rgblight_mode>

0000115e <rgblight_init>:
	dprintf("rgblight_config.sat = %d\n", rgblight_config.sat);
	dprintf("rgblight_config.val = %d\n", rgblight_config.val);
}

void rgblight_init(void) {
  debug_enable = 1; // Debug ON!
    115e:	80 91 05 02 	lds	r24, 0x0205
    1162:	81 60       	ori	r24, 0x01	; 1
    1164:	80 93 05 02 	sts	0x0205, r24
	dprintf("rgblight_init called.\n");
  rgblight_inited = 1;
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	80 93 66 01 	sts	0x0166, r24
	dprintf("rgblight_init start!\n");
  if (!eeconfig_is_enabled()) {
    116e:	0e 94 49 27 	call	0x4e92	; 0x4e92 <eeconfig_is_enabled>
    1172:	81 11       	cpse	r24, r1
    1174:	04 c0       	rjmp	.+8      	; 0x117e <rgblight_init+0x20>
		dprintf("rgblight_init eeconfig is not enabled.\n");
    eeconfig_init();
    1176:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <eeconfig_init>
		eeconfig_write_rgblight_default();
    117a:	0e 94 b5 06 	call	0xd6a	; 0xd6a <eeconfig_write_rgblight_default>
  }
  rgblight_config.raw = eeconfig_read_rgblight();
    117e:	0e 94 ab 06 	call	0xd56	; 0xd56 <eeconfig_read_rgblight>
    1182:	60 93 18 02 	sts	0x0218, r22
    1186:	70 93 19 02 	sts	0x0219, r23
    118a:	80 93 1a 02 	sts	0x021A, r24
    118e:	90 93 1b 02 	sts	0x021B, r25
	if (!rgblight_config.mode) {
    1192:	6e 77       	andi	r22, 0x7E	; 126
    1194:	61 f4       	brne	.+24     	; 0x11ae <rgblight_init+0x50>
		dprintf("rgblight_init rgblight_config.mode = 0. Write default values to EEPROM.\n");
		eeconfig_write_rgblight_default();
    1196:	0e 94 b5 06 	call	0xd6a	; 0xd6a <eeconfig_write_rgblight_default>
		rgblight_config.raw = eeconfig_read_rgblight();
    119a:	0e 94 ab 06 	call	0xd56	; 0xd56 <eeconfig_read_rgblight>
    119e:	60 93 18 02 	sts	0x0218, r22
    11a2:	70 93 19 02 	sts	0x0219, r23
    11a6:	80 93 1a 02 	sts	0x021A, r24
    11aa:	90 93 1b 02 	sts	0x021B, r25
	}
	eeconfig_debug_rgblight(); // display current eeprom values

	rgblight_timer_init(); // setup the timer
    11ae:	0e 94 3c 08 	call	0x1078	; 0x1078 <rgblight_timer_init>

  if (rgblight_config.enable) {
    11b2:	80 91 18 02 	lds	r24, 0x0218
    11b6:	80 ff       	sbrs	r24, 0
    11b8:	04 c0       	rjmp	.+8      	; 0x11c2 <rgblight_init+0x64>
    rgblight_mode(rgblight_config.mode);
    11ba:	86 95       	lsr	r24
    11bc:	8f 73       	andi	r24, 0x3F	; 63
    11be:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <rgblight_mode>
    11c2:	08 95       	ret

000011c4 <rgblight_toggle>:
	}
  rgblight_sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val);
}

void rgblight_toggle(void) {
  rgblight_config.enable ^= 1;
    11c4:	80 91 18 02 	lds	r24, 0x0218
    11c8:	98 2f       	mov	r25, r24
    11ca:	90 95       	com	r25
    11cc:	90 fb       	bst	r25, 0
    11ce:	80 f9       	bld	r24, 0
    11d0:	80 93 18 02 	sts	0x0218, r24
  eeconfig_write_rgblight(rgblight_config.raw);
    11d4:	60 91 18 02 	lds	r22, 0x0218
    11d8:	70 91 19 02 	lds	r23, 0x0219
    11dc:	80 91 1a 02 	lds	r24, 0x021A
    11e0:	90 91 1b 02 	lds	r25, 0x021B
    11e4:	0e 94 af 06 	call	0xd5e	; 0xd5e <eeconfig_write_rgblight>
  dprintf("rgblight toggle: rgblight_config.enable = %u\n", rgblight_config.enable);
	if (rgblight_config.enable) {
    11e8:	80 91 18 02 	lds	r24, 0x0218
    11ec:	80 ff       	sbrs	r24, 0
    11ee:	04 c0       	rjmp	.+8      	; 0x11f8 <rgblight_toggle+0x34>
		rgblight_mode(rgblight_config.mode);
    11f0:	86 95       	lsr	r24
    11f2:	8f 73       	andi	r24, 0x3F	; 63
    11f4:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <rgblight_mode>
	} else {
		rgblight_timer_disable();
    11f8:	0e 94 56 08 	call	0x10ac	; 0x10ac <rgblight_timer_disable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11fc:	2f ef       	ldi	r18, 0xFF	; 255
    11fe:	80 e7       	ldi	r24, 0x70	; 112
    1200:	92 e0       	ldi	r25, 0x02	; 2
    1202:	21 50       	subi	r18, 0x01	; 1
    1204:	80 40       	sbci	r24, 0x00	; 0
    1206:	90 40       	sbci	r25, 0x00	; 0
    1208:	e1 f7       	brne	.-8      	; 0x1202 <rgblight_toggle+0x3e>
    120a:	00 c0       	rjmp	.+0      	; 0x120c <rgblight_toggle+0x48>
    120c:	00 00       	nop
		_delay_ms(50);
		rgblight_set();
    120e:	0c 94 ce 06 	jmp	0xd9c	; 0xd9c <rgblight_set>

00001212 <rgblight_effect_breathing>:
		rgblight_effect_knight(rgblight_config.mode-21);
	}
}

// effects
void rgblight_effect_breathing(uint8_t interval) {
    1212:	cf 93       	push	r28
    1214:	c8 2f       	mov	r28, r24
	static uint8_t pos = 0;
	static uint16_t last_timer = 0;

	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_BREATHING_INTERVALS[interval])) return;
    1216:	80 91 68 01 	lds	r24, 0x0168
    121a:	90 91 69 01 	lds	r25, 0x0169
    121e:	0e 94 41 25 	call	0x4a82	; 0x4a82 <timer_elapsed>
    1222:	ec 2f       	mov	r30, r28
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	eb 5b       	subi	r30, 0xBB	; 187
    1228:	fb 4f       	sbci	r31, 0xFB	; 251
    122a:	e4 91       	lpm	r30, Z
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	8e 17       	cp	r24, r30
    1230:	9f 07       	cpc	r25, r31
    1232:	10 f1       	brcs	.+68     	; 0x1278 <rgblight_effect_breathing+0x66>
	last_timer = timer_read();
    1234:	0e 94 34 25 	call	0x4a68	; 0x4a68 <timer_read>
    1238:	90 93 69 01 	sts	0x0169, r25
    123c:	80 93 68 01 	sts	0x0168, r24

	rgblight_sethsv_noeeprom(rgblight_config.hue, rgblight_config.sat, pgm_read_byte(&RGBLED_BREATHING_TABLE[pos]));
    1240:	e0 91 6a 01 	lds	r30, 0x016A
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	e7 5b       	subi	r30, 0xB7	; 183
    1248:	fb 4f       	sbci	r31, 0xFB	; 251
    124a:	44 91       	lpm	r20, Z
    124c:	80 91 18 02 	lds	r24, 0x0218
    1250:	88 1f       	adc	r24, r24
    1252:	88 27       	eor	r24, r24
    1254:	88 1f       	adc	r24, r24
    1256:	90 91 19 02 	lds	r25, 0x0219
    125a:	29 2f       	mov	r18, r25
    125c:	22 0f       	add	r18, r18
    125e:	97 fb       	bst	r25, 7
    1260:	99 27       	eor	r25, r25
    1262:	90 f9       	bld	r25, 0
    1264:	60 91 1a 02 	lds	r22, 0x021A
    1268:	82 2b       	or	r24, r18
    126a:	0e 94 f7 06 	call	0xdee	; 0xdee <rgblight_sethsv_noeeprom>
	pos = (pos+1) % 256;
    126e:	80 91 6a 01 	lds	r24, 0x016A
    1272:	8f 5f       	subi	r24, 0xFF	; 255
    1274:	80 93 6a 01 	sts	0x016A, r24
}
    1278:	cf 91       	pop	r28
    127a:	08 95       	ret

0000127c <rgblight_effect_rainbow_mood>:

void rgblight_effect_rainbow_mood(uint8_t interval) {
    127c:	cf 93       	push	r28
    127e:	c8 2f       	mov	r28, r24
	static uint16_t current_hue=0;
	static uint16_t last_timer = 0;

	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_RAINBOW_MOOD_INTERVALS[interval])) return;
    1280:	80 91 6b 01 	lds	r24, 0x016B
    1284:	90 91 6c 01 	lds	r25, 0x016C
    1288:	0e 94 41 25 	call	0x4a82	; 0x4a82 <timer_elapsed>
    128c:	ec 2f       	mov	r30, r28
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	ee 5b       	subi	r30, 0xBE	; 190
    1292:	fb 4f       	sbci	r31, 0xFB	; 251
    1294:	e4 91       	lpm	r30, Z
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	8e 17       	cp	r24, r30
    129a:	9f 07       	cpc	r25, r31
    129c:	e8 f0       	brcs	.+58     	; 0x12d8 <rgblight_effect_rainbow_mood+0x5c>
	last_timer = timer_read();
    129e:	0e 94 34 25 	call	0x4a68	; 0x4a68 <timer_read>
    12a2:	90 93 6c 01 	sts	0x016C, r25
    12a6:	80 93 6b 01 	sts	0x016B, r24
	rgblight_sethsv_noeeprom(current_hue, rgblight_config.sat, rgblight_config.val);
    12aa:	40 91 1b 02 	lds	r20, 0x021B
    12ae:	60 91 1a 02 	lds	r22, 0x021A
    12b2:	80 91 6d 01 	lds	r24, 0x016D
    12b6:	90 91 6e 01 	lds	r25, 0x016E
    12ba:	0e 94 f7 06 	call	0xdee	; 0xdee <rgblight_sethsv_noeeprom>
	current_hue = (current_hue+1) % 360;
    12be:	80 91 6d 01 	lds	r24, 0x016D
    12c2:	90 91 6e 01 	lds	r25, 0x016E
    12c6:	01 96       	adiw	r24, 0x01	; 1
    12c8:	68 e6       	ldi	r22, 0x68	; 104
    12ca:	71 e0       	ldi	r23, 0x01	; 1
    12cc:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <__udivmodhi4>
    12d0:	90 93 6e 01 	sts	0x016E, r25
    12d4:	80 93 6d 01 	sts	0x016D, r24
}
    12d8:	cf 91       	pop	r28
    12da:	08 95       	ret

000012dc <rgblight_effect_rainbow_swirl>:

void rgblight_effect_rainbow_swirl(uint8_t interval) {
    12dc:	df 92       	push	r13
    12de:	ef 92       	push	r14
    12e0:	ff 92       	push	r15
    12e2:	0f 93       	push	r16
    12e4:	1f 93       	push	r17
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	d8 2e       	mov	r13, r24
	static uint16_t current_hue=0;
	static uint16_t last_timer = 0;
	uint16_t hue;
	uint8_t i;
	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_RAINBOW_MOOD_INTERVALS[interval/2])) return;
    12ec:	80 91 6f 01 	lds	r24, 0x016F
    12f0:	90 91 70 01 	lds	r25, 0x0170
    12f4:	0e 94 41 25 	call	0x4a82	; 0x4a82 <timer_elapsed>
    12f8:	ed 2d       	mov	r30, r13
    12fa:	e6 95       	lsr	r30
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	ee 5b       	subi	r30, 0xBE	; 190
    1300:	fb 4f       	sbci	r31, 0xFB	; 251
    1302:	e4 91       	lpm	r30, Z
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	8e 17       	cp	r24, r30
    1308:	9f 07       	cpc	r25, r31
    130a:	08 f4       	brcc	.+2      	; 0x130e <rgblight_effect_rainbow_swirl+0x32>
    130c:	43 c0       	rjmp	.+134    	; 0x1394 <rgblight_effect_rainbow_swirl+0xb8>
	last_timer = timer_read();
    130e:	0e 94 34 25 	call	0x4a68	; 0x4a68 <timer_read>
    1312:	90 93 70 01 	sts	0x0170, r25
    1316:	80 93 6f 01 	sts	0x016F, r24
    131a:	00 e0       	ldi	r16, 0x00	; 0
    131c:	10 e0       	ldi	r17, 0x00	; 0
    131e:	c0 e0       	ldi	r28, 0x00	; 0
    1320:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<RGBLED_NUM; i++) {
		hue = (360/RGBLED_NUM*i+current_hue)%360;
    1322:	28 e6       	ldi	r18, 0x68	; 104
    1324:	e2 2e       	mov	r14, r18
    1326:	ff 24       	eor	r15, r15
    1328:	f3 94       	inc	r15
		sethsv(hue, rgblight_config.sat, rgblight_config.val, &led[i]);
    132a:	9e 01       	movw	r18, r28
    132c:	22 0f       	add	r18, r18
    132e:	33 1f       	adc	r19, r19
    1330:	2c 0f       	add	r18, r28
    1332:	3d 1f       	adc	r19, r29
    1334:	20 5e       	subi	r18, 0xE0	; 224
    1336:	3d 4f       	sbci	r19, 0xFD	; 253
	uint16_t hue;
	uint8_t i;
	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_RAINBOW_MOOD_INTERVALS[interval/2])) return;
	last_timer = timer_read();
	for (i=0; i<RGBLED_NUM; i++) {
		hue = (360/RGBLED_NUM*i+current_hue)%360;
    1338:	80 91 71 01 	lds	r24, 0x0171
    133c:	90 91 72 01 	lds	r25, 0x0172
    1340:	80 0f       	add	r24, r16
    1342:	91 1f       	adc	r25, r17
    1344:	b7 01       	movw	r22, r14
    1346:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <__udivmodhi4>
		sethsv(hue, rgblight_config.sat, rgblight_config.val, &led[i]);
    134a:	40 91 1b 02 	lds	r20, 0x021B
    134e:	60 91 1a 02 	lds	r22, 0x021A
    1352:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <sethsv>
    1356:	21 96       	adiw	r28, 0x01	; 1
    1358:	03 5d       	subi	r16, 0xD3	; 211
    135a:	1f 4f       	sbci	r17, 0xFF	; 255
	static uint16_t last_timer = 0;
	uint16_t hue;
	uint8_t i;
	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_RAINBOW_MOOD_INTERVALS[interval/2])) return;
	last_timer = timer_read();
	for (i=0; i<RGBLED_NUM; i++) {
    135c:	c8 30       	cpi	r28, 0x08	; 8
    135e:	d1 05       	cpc	r29, r1
    1360:	21 f7       	brne	.-56     	; 0x132a <rgblight_effect_rainbow_swirl+0x4e>
		hue = (360/RGBLED_NUM*i+current_hue)%360;
		sethsv(hue, rgblight_config.sat, rgblight_config.val, &led[i]);
	}
	rgblight_set();
    1362:	0e 94 ce 06 	call	0xd9c	; 0xd9c <rgblight_set>
    1366:	20 91 71 01 	lds	r18, 0x0171
    136a:	30 91 72 01 	lds	r19, 0x0172

	if (interval % 2) {
    136e:	d0 fe       	sbrs	r13, 0
    1370:	0b c0       	rjmp	.+22     	; 0x1388 <rgblight_effect_rainbow_swirl+0xac>
		current_hue = (current_hue+1) % 360;
    1372:	c9 01       	movw	r24, r18
    1374:	01 96       	adiw	r24, 0x01	; 1
    1376:	68 e6       	ldi	r22, 0x68	; 104
    1378:	71 e0       	ldi	r23, 0x01	; 1
    137a:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <__udivmodhi4>
    137e:	90 93 72 01 	sts	0x0172, r25
    1382:	80 93 71 01 	sts	0x0171, r24
    1386:	06 c0       	rjmp	.+12     	; 0x1394 <rgblight_effect_rainbow_swirl+0xb8>
	} else {
		if (current_hue -1 < 0) {
			current_hue = 359;
		} else {
			current_hue = current_hue - 1;
    1388:	21 50       	subi	r18, 0x01	; 1
    138a:	31 09       	sbc	r19, r1
    138c:	30 93 72 01 	sts	0x0172, r19
    1390:	20 93 71 01 	sts	0x0171, r18
		}

	}
}
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	1f 91       	pop	r17
    139a:	0f 91       	pop	r16
    139c:	ff 90       	pop	r15
    139e:	ef 90       	pop	r14
    13a0:	df 90       	pop	r13
    13a2:	08 95       	ret

000013a4 <rgblight_effect_snake>:
void rgblight_effect_snake(uint8_t interval) {
    13a4:	8f 92       	push	r8
    13a6:	9f 92       	push	r9
    13a8:	af 92       	push	r10
    13aa:	bf 92       	push	r11
    13ac:	cf 92       	push	r12
    13ae:	df 92       	push	r13
    13b0:	ef 92       	push	r14
    13b2:	ff 92       	push	r15
    13b4:	0f 93       	push	r16
    13b6:	1f 93       	push	r17
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	c8 2f       	mov	r28, r24
	static uint8_t pos=0;
	static uint16_t last_timer = 0;
	uint8_t i,j;
	int8_t k;
	int8_t increament = 1;
	if (interval%2) increament = -1;
    13be:	80 ff       	sbrs	r24, 0
    13c0:	03 c0       	rjmp	.+6      	; 0x13c8 <rgblight_effect_snake+0x24>
    13c2:	99 24       	eor	r9, r9
    13c4:	9a 94       	dec	r9
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <rgblight_effect_snake+0x28>
void rgblight_effect_snake(uint8_t interval) {
	static uint8_t pos=0;
	static uint16_t last_timer = 0;
	uint8_t i,j;
	int8_t k;
	int8_t increament = 1;
    13c8:	99 24       	eor	r9, r9
    13ca:	93 94       	inc	r9
	if (interval%2) increament = -1;
	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_SNAKE_INTERVALS[interval/2])) return;
    13cc:	80 91 73 01 	lds	r24, 0x0173
    13d0:	90 91 74 01 	lds	r25, 0x0174
    13d4:	0e 94 41 25 	call	0x4a82	; 0x4a82 <timer_elapsed>
    13d8:	c6 95       	lsr	r28
    13da:	ec 2f       	mov	r30, r28
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	e1 5c       	subi	r30, 0xC1	; 193
    13e0:	fb 4f       	sbci	r31, 0xFB	; 251
    13e2:	e4 91       	lpm	r30, Z
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	8e 17       	cp	r24, r30
    13e8:	9f 07       	cpc	r25, r31
    13ea:	08 f4       	brcc	.+2      	; 0x13ee <rgblight_effect_snake+0x4a>
    13ec:	69 c0       	rjmp	.+210    	; 0x14c0 <rgblight_effect_snake+0x11c>
	last_timer = timer_read();
    13ee:	0e 94 34 25 	call	0x4a68	; 0x4a68 <timer_read>
    13f2:	90 93 74 01 	sts	0x0174, r25
    13f6:	80 93 73 01 	sts	0x0173, r24
    13fa:	02 e2       	ldi	r16, 0x22	; 34
    13fc:	12 e0       	ldi	r17, 0x02	; 2
    13fe:	c0 e0       	ldi	r28, 0x00	; 0
    1400:	d0 e0       	ldi	r29, 0x00	; 0
			current_hue = current_hue - 1;
		}

	}
}
void rgblight_effect_snake(uint8_t interval) {
    1402:	57 e0       	ldi	r21, 0x07	; 7
    1404:	a5 2e       	mov	r10, r21
    1406:	b1 2c       	mov	r11, r1
    1408:	f8 01       	movw	r30, r16
    140a:	31 97       	sbiw	r30, 0x01	; 1
	int8_t increament = 1;
	if (interval%2) increament = -1;
	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_SNAKE_INTERVALS[interval/2])) return;
	last_timer = timer_read();
	for (i=0;i<RGBLED_NUM;i++) {
		led[i].r=0;
    140c:	10 82       	st	Z, r1
			current_hue = current_hue - 1;
		}

	}
}
void rgblight_effect_snake(uint8_t interval) {
    140e:	f8 01       	movw	r30, r16
    1410:	32 97       	sbiw	r30, 0x02	; 2
	if (interval%2) increament = -1;
	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_SNAKE_INTERVALS[interval/2])) return;
	last_timer = timer_read();
	for (i=0;i<RGBLED_NUM;i++) {
		led[i].r=0;
		led[i].g=0;
    1412:	10 82       	st	Z, r1
		led[i].b=0;
    1414:	f8 01       	movw	r30, r16
    1416:	10 82       	st	Z, r1
			current_hue = current_hue - 1;
		}

	}
}
void rgblight_effect_snake(uint8_t interval) {
    1418:	37 e0       	ldi	r19, 0x07	; 7
    141a:	c3 2e       	mov	r12, r19
    141c:	d1 2c       	mov	r13, r1
    141e:	81 2c       	mov	r8, r1
		led[i].b=0;
		for (j=0;j<RGBLIGHT_EFFECT_SNAKE_LENGTH;j++) {
			k = pos+j*increament;
			if (k<0) k = k+RGBLED_NUM;
			if (i==k) {
				sethsv(rgblight_config.hue, rgblight_config.sat, (uint8_t)(rgblight_config.val*(RGBLIGHT_EFFECT_SNAKE_LENGTH-j)/RGBLIGHT_EFFECT_SNAKE_LENGTH), &led[i]);
    1420:	7e 01       	movw	r14, r28
    1422:	ee 0c       	add	r14, r14
    1424:	ff 1c       	adc	r15, r15
    1426:	ec 0e       	add	r14, r28
    1428:	fd 1e       	adc	r15, r29
    142a:	80 e2       	ldi	r24, 0x20	; 32
    142c:	92 e0       	ldi	r25, 0x02	; 2
    142e:	e8 0e       	add	r14, r24
    1430:	f9 1e       	adc	r15, r25
	for (i=0;i<RGBLED_NUM;i++) {
		led[i].r=0;
		led[i].g=0;
		led[i].b=0;
		for (j=0;j<RGBLIGHT_EFFECT_SNAKE_LENGTH;j++) {
			k = pos+j*increament;
    1432:	80 91 75 01 	lds	r24, 0x0175
    1436:	88 0d       	add	r24, r8
			if (k<0) k = k+RGBLED_NUM;
    1438:	87 fd       	sbrc	r24, 7
    143a:	88 5f       	subi	r24, 0xF8	; 248
			if (i==k) {
    143c:	99 27       	eor	r25, r25
    143e:	87 fd       	sbrc	r24, 7
    1440:	90 95       	com	r25
    1442:	c8 17       	cp	r28, r24
    1444:	d9 07       	cpc	r29, r25
    1446:	e9 f4       	brne	.+58     	; 0x1482 <rgblight_effect_snake+0xde>
				sethsv(rgblight_config.hue, rgblight_config.sat, (uint8_t)(rgblight_config.val*(RGBLIGHT_EFFECT_SNAKE_LENGTH-j)/RGBLIGHT_EFFECT_SNAKE_LENGTH), &led[i]);
    1448:	20 91 1b 02 	lds	r18, 0x021B
    144c:	2c 9d       	mul	r18, r12
    144e:	c0 01       	movw	r24, r0
    1450:	2d 9d       	mul	r18, r13
    1452:	90 0d       	add	r25, r0
    1454:	11 24       	eor	r1, r1
    1456:	b5 01       	movw	r22, r10
    1458:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <__divmodhi4>
    145c:	46 2f       	mov	r20, r22
    145e:	80 91 18 02 	lds	r24, 0x0218
    1462:	88 1f       	adc	r24, r24
    1464:	88 27       	eor	r24, r24
    1466:	88 1f       	adc	r24, r24
    1468:	90 91 19 02 	lds	r25, 0x0219
    146c:	59 2f       	mov	r21, r25
    146e:	55 0f       	add	r21, r21
    1470:	97 fb       	bst	r25, 7
    1472:	99 27       	eor	r25, r25
    1474:	90 f9       	bld	r25, 0
    1476:	97 01       	movw	r18, r14
    1478:	60 91 1a 02 	lds	r22, 0x021A
    147c:	85 2b       	or	r24, r21
    147e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <sethsv>
    1482:	89 0c       	add	r8, r9
    1484:	91 e0       	ldi	r25, 0x01	; 1
    1486:	c9 1a       	sub	r12, r25
    1488:	d1 08       	sbc	r13, r1
	last_timer = timer_read();
	for (i=0;i<RGBLED_NUM;i++) {
		led[i].r=0;
		led[i].g=0;
		led[i].b=0;
		for (j=0;j<RGBLIGHT_EFFECT_SNAKE_LENGTH;j++) {
    148a:	99 f6       	brne	.-90     	; 0x1432 <rgblight_effect_snake+0x8e>
    148c:	21 96       	adiw	r28, 0x01	; 1
    148e:	0d 5f       	subi	r16, 0xFD	; 253
    1490:	1f 4f       	sbci	r17, 0xFF	; 255
	int8_t k;
	int8_t increament = 1;
	if (interval%2) increament = -1;
	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_SNAKE_INTERVALS[interval/2])) return;
	last_timer = timer_read();
	for (i=0;i<RGBLED_NUM;i++) {
    1492:	c8 30       	cpi	r28, 0x08	; 8
    1494:	d1 05       	cpc	r29, r1
    1496:	09 f0       	breq	.+2      	; 0x149a <rgblight_effect_snake+0xf6>
    1498:	b7 cf       	rjmp	.-146    	; 0x1408 <rgblight_effect_snake+0x64>
			if (i==k) {
				sethsv(rgblight_config.hue, rgblight_config.sat, (uint8_t)(rgblight_config.val*(RGBLIGHT_EFFECT_SNAKE_LENGTH-j)/RGBLIGHT_EFFECT_SNAKE_LENGTH), &led[i]);
			}
		}
	}
	rgblight_set();
    149a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <rgblight_set>
    149e:	80 91 75 01 	lds	r24, 0x0175
	if (increament == 1) {
    14a2:	e1 e0       	ldi	r30, 0x01	; 1
    14a4:	9e 12       	cpse	r9, r30
    14a6:	06 c0       	rjmp	.+12     	; 0x14b4 <rgblight_effect_snake+0x110>
		if (pos - 1 < 0) {
    14a8:	81 11       	cpse	r24, r1
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <rgblight_effect_snake+0x10c>
			pos = 13;
    14ac:	8d e0       	ldi	r24, 0x0D	; 13
    14ae:	06 c0       	rjmp	.+12     	; 0x14bc <rgblight_effect_snake+0x118>
		} else {
			pos -= 1;
    14b0:	81 50       	subi	r24, 0x01	; 1
    14b2:	04 c0       	rjmp	.+8      	; 0x14bc <rgblight_effect_snake+0x118>
		}
	} else {
		pos = (pos+1)%RGBLED_NUM;
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	01 96       	adiw	r24, 0x01	; 1
    14b8:	87 70       	andi	r24, 0x07	; 7
    14ba:	99 27       	eor	r25, r25
    14bc:	80 93 75 01 	sts	0x0175, r24
	}

}
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	1f 91       	pop	r17
    14c6:	0f 91       	pop	r16
    14c8:	ff 90       	pop	r15
    14ca:	ef 90       	pop	r14
    14cc:	df 90       	pop	r13
    14ce:	cf 90       	pop	r12
    14d0:	bf 90       	pop	r11
    14d2:	af 90       	pop	r10
    14d4:	9f 90       	pop	r9
    14d6:	8f 90       	pop	r8
    14d8:	08 95       	ret

000014da <rgblight_effect_knight>:

void rgblight_effect_knight(uint8_t interval) {
    14da:	bf 92       	push	r11
    14dc:	cf 92       	push	r12
    14de:	df 92       	push	r13
    14e0:	ef 92       	push	r14
    14e2:	ff 92       	push	r15
    14e4:	0f 93       	push	r16
    14e6:	1f 93       	push	r17
    14e8:	cf 93       	push	r28
    14ea:	df 93       	push	r29
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	68 97       	sbiw	r28, 0x18	; 24
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	f8 94       	cli
    14f6:	de bf       	out	0x3e, r29	; 62
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	cd bf       	out	0x3d, r28	; 61
    14fc:	18 2f       	mov	r17, r24
	static uint16_t last_timer = 0;
	uint8_t i,j,cur;
	int8_t k;
	struct cRGB preled[RGBLED_NUM];
	static int8_t increament = -1;
	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_KNIGHT_INTERVALS[interval])) return;
    14fe:	80 91 76 01 	lds	r24, 0x0176
    1502:	90 91 77 01 	lds	r25, 0x0177
    1506:	0e 94 41 25 	call	0x4a82	; 0x4a82 <timer_elapsed>
    150a:	e1 2f       	mov	r30, r17
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	e4 5c       	subi	r30, 0xC4	; 196
    1510:	fb 4f       	sbci	r31, 0xFB	; 251
    1512:	e4 91       	lpm	r30, Z
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	8e 17       	cp	r24, r30
    1518:	9f 07       	cpc	r25, r31
    151a:	08 f4       	brcc	.+2      	; 0x151e <rgblight_effect_knight+0x44>
    151c:	9a c0       	rjmp	.+308    	; 0x1652 <rgblight_effect_knight+0x178>
	last_timer = timer_read();
    151e:	0e 94 34 25 	call	0x4a68	; 0x4a68 <timer_read>
    1522:	90 93 77 01 	sts	0x0177, r25
    1526:	80 93 76 01 	sts	0x0176, r24
    152a:	7e 01       	movw	r14, r28
    152c:	23 e0       	ldi	r18, 0x03	; 3
    152e:	e2 0e       	add	r14, r18
    1530:	f1 1c       	adc	r15, r1
    1532:	00 e0       	ldi	r16, 0x00	; 0
    1534:	10 e0       	ldi	r17, 0x00	; 0
		pos = (pos+1)%RGBLED_NUM;
	}

}

void rgblight_effect_knight(uint8_t interval) {
    1536:	f7 01       	movw	r30, r14
    1538:	31 97       	sbiw	r30, 0x01	; 1
	struct cRGB preled[RGBLED_NUM];
	static int8_t increament = -1;
	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_KNIGHT_INTERVALS[interval])) return;
	last_timer = timer_read();
	for (i=0;i<RGBLED_NUM;i++) {
		preled[i].r=0;
    153a:	10 82       	st	Z, r1
		pos = (pos+1)%RGBLED_NUM;
	}

}

void rgblight_effect_knight(uint8_t interval) {
    153c:	f7 01       	movw	r30, r14
    153e:	32 97       	sbiw	r30, 0x02	; 2
	static int8_t increament = -1;
	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_KNIGHT_INTERVALS[interval])) return;
	last_timer = timer_read();
	for (i=0;i<RGBLED_NUM;i++) {
		preled[i].r=0;
		preled[i].g=0;
    1540:	10 82       	st	Z, r1
		preled[i].b=0;
    1542:	d7 01       	movw	r26, r14
    1544:	1c 92       	st	X, r1
		for (j=0;j<RGBLIGHT_EFFECT_KNIGHT_LENGTH;j++) {
    1546:	b1 2c       	mov	r11, r1
			k = pos+j*increament;
			if (k<0) k = 0;
			if (k>=RGBLED_NUM) k=RGBLED_NUM-1;
			if (i==k) {
				sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val, &preled[i]);
    1548:	68 01       	movw	r12, r16
    154a:	cc 0c       	add	r12, r12
    154c:	dd 1c       	adc	r13, r13
    154e:	c0 0e       	add	r12, r16
    1550:	d1 1e       	adc	r13, r17
    1552:	e1 e0       	ldi	r30, 0x01	; 1
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	ec 0f       	add	r30, r28
    1558:	fd 1f       	adc	r31, r29
    155a:	ce 0e       	add	r12, r30
    155c:	df 1e       	adc	r13, r31
	for (i=0;i<RGBLED_NUM;i++) {
		preled[i].r=0;
		preled[i].g=0;
		preled[i].b=0;
		for (j=0;j<RGBLIGHT_EFFECT_KNIGHT_LENGTH;j++) {
			k = pos+j*increament;
    155e:	90 91 01 01 	lds	r25, 0x0101
    1562:	80 91 78 01 	lds	r24, 0x0178
    1566:	b9 9e       	mul	r11, r25
    1568:	80 0d       	add	r24, r0
    156a:	11 24       	eor	r1, r1
			if (k<0) k = 0;
    156c:	87 fd       	sbrc	r24, 7
    156e:	03 c0       	rjmp	.+6      	; 0x1576 <rgblight_effect_knight+0x9c>
			if (k>=RGBLED_NUM) k=RGBLED_NUM-1;
    1570:	88 30       	cpi	r24, 0x08	; 8
    1572:	1c f4       	brge	.+6      	; 0x157a <rgblight_effect_knight+0xa0>
    1574:	03 c0       	rjmp	.+6      	; 0x157c <rgblight_effect_knight+0xa2>
		preled[i].r=0;
		preled[i].g=0;
		preled[i].b=0;
		for (j=0;j<RGBLIGHT_EFFECT_KNIGHT_LENGTH;j++) {
			k = pos+j*increament;
			if (k<0) k = 0;
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	01 c0       	rjmp	.+2      	; 0x157c <rgblight_effect_knight+0xa2>
			if (k>=RGBLED_NUM) k=RGBLED_NUM-1;
    157a:	87 e0       	ldi	r24, 0x07	; 7
			if (i==k) {
    157c:	99 27       	eor	r25, r25
    157e:	87 fd       	sbrc	r24, 7
    1580:	90 95       	com	r25
    1582:	08 17       	cp	r16, r24
    1584:	19 07       	cpc	r17, r25
    1586:	a1 f4       	brne	.+40     	; 0x15b0 <rgblight_effect_knight+0xd6>
				sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val, &preled[i]);
    1588:	80 91 18 02 	lds	r24, 0x0218
    158c:	88 1f       	adc	r24, r24
    158e:	88 27       	eor	r24, r24
    1590:	88 1f       	adc	r24, r24
    1592:	90 91 19 02 	lds	r25, 0x0219
    1596:	59 2f       	mov	r21, r25
    1598:	55 0f       	add	r21, r21
    159a:	97 fb       	bst	r25, 7
    159c:	99 27       	eor	r25, r25
    159e:	90 f9       	bld	r25, 0
    15a0:	96 01       	movw	r18, r12
    15a2:	40 91 1b 02 	lds	r20, 0x021B
    15a6:	60 91 1a 02 	lds	r22, 0x021A
    15aa:	85 2b       	or	r24, r21
    15ac:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <sethsv>
	last_timer = timer_read();
	for (i=0;i<RGBLED_NUM;i++) {
		preled[i].r=0;
		preled[i].g=0;
		preled[i].b=0;
		for (j=0;j<RGBLIGHT_EFFECT_KNIGHT_LENGTH;j++) {
    15b0:	b3 94       	inc	r11
    15b2:	f7 e0       	ldi	r31, 0x07	; 7
    15b4:	bf 12       	cpse	r11, r31
    15b6:	d3 cf       	rjmp	.-90     	; 0x155e <rgblight_effect_knight+0x84>
    15b8:	0f 5f       	subi	r16, 0xFF	; 255
    15ba:	1f 4f       	sbci	r17, 0xFF	; 255
    15bc:	23 e0       	ldi	r18, 0x03	; 3
    15be:	e2 0e       	add	r14, r18
    15c0:	f1 1c       	adc	r15, r1
	int8_t k;
	struct cRGB preled[RGBLED_NUM];
	static int8_t increament = -1;
	if (timer_elapsed(last_timer)<pgm_read_byte(&RGBLED_KNIGHT_INTERVALS[interval])) return;
	last_timer = timer_read();
	for (i=0;i<RGBLED_NUM;i++) {
    15c2:	08 30       	cpi	r16, 0x08	; 8
    15c4:	11 05       	cpc	r17, r1
    15c6:	09 f0       	breq	.+2      	; 0x15ca <rgblight_effect_knight+0xf0>
    15c8:	b6 cf       	rjmp	.-148    	; 0x1536 <rgblight_effect_knight+0x5c>
    15ca:	62 e2       	ldi	r22, 0x22	; 34
    15cc:	72 e0       	ldi	r23, 0x02	; 2
    15ce:	8b e0       	ldi	r24, 0x0B	; 11
    15d0:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	}
	if (RGBLIGHT_EFFECT_KNIGHT_OFFSET) {
		for (i=0;i<RGBLED_NUM;i++) {
			cur = (i+RGBLIGHT_EFFECT_KNIGHT_OFFSET) % RGBLED_NUM;
    15d2:	9c 01       	movw	r18, r24
    15d4:	27 70       	andi	r18, 0x07	; 7
    15d6:	33 27       	eor	r19, r19
		pos = (pos+1)%RGBLED_NUM;
	}

}

void rgblight_effect_knight(uint8_t interval) {
    15d8:	ab 01       	movw	r20, r22
    15da:	41 50       	subi	r20, 0x01	; 1
    15dc:	51 09       	sbc	r21, r1
		}
	}
	if (RGBLIGHT_EFFECT_KNIGHT_OFFSET) {
		for (i=0;i<RGBLED_NUM;i++) {
			cur = (i+RGBLIGHT_EFFECT_KNIGHT_OFFSET) % RGBLED_NUM;
			led[i].r = preled[cur].r;
    15de:	f9 01       	movw	r30, r18
    15e0:	ee 0f       	add	r30, r30
    15e2:	ff 1f       	adc	r31, r31
    15e4:	e2 0f       	add	r30, r18
    15e6:	f3 1f       	adc	r31, r19
    15e8:	a1 e0       	ldi	r26, 0x01	; 1
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	ac 0f       	add	r26, r28
    15ee:	bd 1f       	adc	r27, r29
    15f0:	ea 0f       	add	r30, r26
    15f2:	fb 1f       	adc	r31, r27
    15f4:	21 81       	ldd	r18, Z+1	; 0x01
    15f6:	da 01       	movw	r26, r20
    15f8:	2c 93       	st	X, r18
		pos = (pos+1)%RGBLED_NUM;
	}

}

void rgblight_effect_knight(uint8_t interval) {
    15fa:	9b 01       	movw	r18, r22
    15fc:	22 50       	subi	r18, 0x02	; 2
    15fe:	31 09       	sbc	r19, r1
	}
	if (RGBLIGHT_EFFECT_KNIGHT_OFFSET) {
		for (i=0;i<RGBLED_NUM;i++) {
			cur = (i+RGBLIGHT_EFFECT_KNIGHT_OFFSET) % RGBLED_NUM;
			led[i].r = preled[cur].r;
			led[i].g = preled[cur].g;
    1600:	40 81       	ld	r20, Z
    1602:	d9 01       	movw	r26, r18
    1604:	4c 93       	st	X, r20
			led[i].b = preled[cur].b;
    1606:	22 81       	ldd	r18, Z+2	; 0x02
    1608:	fb 01       	movw	r30, r22
    160a:	20 83       	st	Z, r18
    160c:	01 96       	adiw	r24, 0x01	; 1
    160e:	6d 5f       	subi	r22, 0xFD	; 253
    1610:	7f 4f       	sbci	r23, 0xFF	; 255
				sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val, &preled[i]);
			}
		}
	}
	if (RGBLIGHT_EFFECT_KNIGHT_OFFSET) {
		for (i=0;i<RGBLED_NUM;i++) {
    1612:	83 31       	cpi	r24, 0x13	; 19
    1614:	91 05       	cpc	r25, r1
    1616:	e9 f6       	brne	.-70     	; 0x15d2 <rgblight_effect_knight+0xf8>
			led[i].r = preled[cur].r;
			led[i].g = preled[cur].g;
			led[i].b = preled[cur].b;
		}
	}
	rgblight_set();
    1618:	0e 94 ce 06 	call	0xd9c	; 0xd9c <rgblight_set>
	if (increament == 1) {
    161c:	90 91 01 01 	lds	r25, 0x0101
    1620:	80 91 78 01 	lds	r24, 0x0178
    1624:	91 30       	cpi	r25, 0x01	; 1
    1626:	49 f4       	brne	.+18     	; 0x163a <rgblight_effect_knight+0x160>
		if (pos - 1 < 0 - RGBLIGHT_EFFECT_KNIGHT_LENGTH) {
    1628:	8a 3f       	cpi	r24, 0xFA	; 250
    162a:	2c f4       	brge	.+10     	; 0x1636 <rgblight_effect_knight+0x15c>
			pos = 0- RGBLIGHT_EFFECT_KNIGHT_LENGTH;
    162c:	89 ef       	ldi	r24, 0xF9	; 249
    162e:	80 93 78 01 	sts	0x0178, r24
			increament = -1;
    1632:	8f ef       	ldi	r24, 0xFF	; 255
    1634:	08 c0       	rjmp	.+16     	; 0x1646 <rgblight_effect_knight+0x16c>
		} else {
			pos -= 1;
    1636:	81 50       	subi	r24, 0x01	; 1
    1638:	0a c0       	rjmp	.+20     	; 0x164e <rgblight_effect_knight+0x174>
		}
	} else {
		if (pos+1>RGBLED_NUM+RGBLIGHT_EFFECT_KNIGHT_LENGTH) {
    163a:	8f 30       	cpi	r24, 0x0F	; 15
    163c:	3c f0       	brlt	.+14     	; 0x164c <rgblight_effect_knight+0x172>
			pos = RGBLED_NUM+RGBLIGHT_EFFECT_KNIGHT_LENGTH-1;
    163e:	8e e0       	ldi	r24, 0x0E	; 14
    1640:	80 93 78 01 	sts	0x0178, r24
			increament = 1;
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	80 93 01 01 	sts	0x0101, r24
    164a:	03 c0       	rjmp	.+6      	; 0x1652 <rgblight_effect_knight+0x178>
		} else {
			pos += 1;
    164c:	8f 5f       	subi	r24, 0xFF	; 255
    164e:	80 93 78 01 	sts	0x0178, r24
		}
	}

}
    1652:	68 96       	adiw	r28, 0x18	; 24
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	cd bf       	out	0x3d, r28	; 61
    165e:	df 91       	pop	r29
    1660:	cf 91       	pop	r28
    1662:	1f 91       	pop	r17
    1664:	0f 91       	pop	r16
    1666:	ff 90       	pop	r15
    1668:	ef 90       	pop	r14
    166a:	df 90       	pop	r13
    166c:	cf 90       	pop	r12
    166e:	bf 90       	pop	r11
    1670:	08 95       	ret

00001672 <__vector_32>:
void rgblight_timer_toggle(void) {
	TIMSK3 ^= _BV(OCIE3A);
	dprintf("TIMER3 toggled.\n");
}

ISR(TIMER3_COMPA_vect) {
    1672:	1f 92       	push	r1
    1674:	0f 92       	push	r0
    1676:	0f b6       	in	r0, 0x3f	; 63
    1678:	0f 92       	push	r0
    167a:	11 24       	eor	r1, r1
    167c:	2f 93       	push	r18
    167e:	3f 93       	push	r19
    1680:	4f 93       	push	r20
    1682:	5f 93       	push	r21
    1684:	6f 93       	push	r22
    1686:	7f 93       	push	r23
    1688:	8f 93       	push	r24
    168a:	9f 93       	push	r25
    168c:	af 93       	push	r26
    168e:	bf 93       	push	r27
    1690:	ef 93       	push	r30
    1692:	ff 93       	push	r31
	// Mode = 1, static light, do nothing here
	if (rgblight_config.mode>=2 && rgblight_config.mode<=5) {
    1694:	80 91 18 02 	lds	r24, 0x0218
    1698:	86 95       	lsr	r24
    169a:	8f 73       	andi	r24, 0x3F	; 63
    169c:	98 2f       	mov	r25, r24
    169e:	92 5c       	subi	r25, 0xC2	; 194
    16a0:	9f 73       	andi	r25, 0x3F	; 63
    16a2:	94 30       	cpi	r25, 0x04	; 4
    16a4:	20 f4       	brcc	.+8      	; 0x16ae <__vector_32+0x3c>
		// mode = 2 to 5, breathing mode
		rgblight_effect_breathing(rgblight_config.mode-2);
    16a6:	82 50       	subi	r24, 0x02	; 2
    16a8:	0e 94 09 09 	call	0x1212	; 0x1212 <rgblight_effect_breathing>
    16ac:	23 c0       	rjmp	.+70     	; 0x16f4 <__vector_32+0x82>

	} else if (rgblight_config.mode>=6 && rgblight_config.mode<=8) {
    16ae:	98 2f       	mov	r25, r24
    16b0:	96 5c       	subi	r25, 0xC6	; 198
    16b2:	9f 73       	andi	r25, 0x3F	; 63
    16b4:	93 30       	cpi	r25, 0x03	; 3
    16b6:	20 f4       	brcc	.+8      	; 0x16c0 <__vector_32+0x4e>
		rgblight_effect_rainbow_mood(rgblight_config.mode-6);
    16b8:	86 50       	subi	r24, 0x06	; 6
    16ba:	0e 94 3e 09 	call	0x127c	; 0x127c <rgblight_effect_rainbow_mood>
    16be:	1a c0       	rjmp	.+52     	; 0x16f4 <__vector_32+0x82>
	} else if (rgblight_config.mode>=9 && rgblight_config.mode<=14) {
    16c0:	98 2f       	mov	r25, r24
    16c2:	99 5c       	subi	r25, 0xC9	; 201
    16c4:	9f 73       	andi	r25, 0x3F	; 63
    16c6:	96 30       	cpi	r25, 0x06	; 6
    16c8:	20 f4       	brcc	.+8      	; 0x16d2 <__vector_32+0x60>
		rgblight_effect_rainbow_swirl(rgblight_config.mode-9);
    16ca:	89 50       	subi	r24, 0x09	; 9
    16cc:	0e 94 6e 09 	call	0x12dc	; 0x12dc <rgblight_effect_rainbow_swirl>
    16d0:	11 c0       	rjmp	.+34     	; 0x16f4 <__vector_32+0x82>
	} else if (rgblight_config.mode>=15 && rgblight_config.mode<=20) {
    16d2:	98 2f       	mov	r25, r24
    16d4:	9f 5c       	subi	r25, 0xCF	; 207
    16d6:	9f 73       	andi	r25, 0x3F	; 63
    16d8:	96 30       	cpi	r25, 0x06	; 6
    16da:	20 f4       	brcc	.+8      	; 0x16e4 <__vector_32+0x72>
		rgblight_effect_snake(rgblight_config.mode-15);
    16dc:	8f 50       	subi	r24, 0x0F	; 15
    16de:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <rgblight_effect_snake>
    16e2:	08 c0       	rjmp	.+16     	; 0x16f4 <__vector_32+0x82>
	} else if (rgblight_config.mode>=21 && rgblight_config.mode<=23) {
    16e4:	98 2f       	mov	r25, r24
    16e6:	95 5d       	subi	r25, 0xD5	; 213
    16e8:	9f 73       	andi	r25, 0x3F	; 63
    16ea:	93 30       	cpi	r25, 0x03	; 3
    16ec:	18 f4       	brcc	.+6      	; 0x16f4 <__vector_32+0x82>
		rgblight_effect_knight(rgblight_config.mode-21);
    16ee:	85 51       	subi	r24, 0x15	; 21
    16f0:	0e 94 6d 0a 	call	0x14da	; 0x14da <rgblight_effect_knight>
	}
}
    16f4:	ff 91       	pop	r31
    16f6:	ef 91       	pop	r30
    16f8:	bf 91       	pop	r27
    16fa:	af 91       	pop	r26
    16fc:	9f 91       	pop	r25
    16fe:	8f 91       	pop	r24
    1700:	7f 91       	pop	r23
    1702:	6f 91       	pop	r22
    1704:	5f 91       	pop	r21
    1706:	4f 91       	pop	r20
    1708:	3f 91       	pop	r19
    170a:	2f 91       	pop	r18
    170c:	0f 90       	pop	r0
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	0f 90       	pop	r0
    1712:	1f 90       	pop	r1
    1714:	18 95       	reti

00001716 <keycode_to_action>:

/* translates keycode to action */
static action_t keycode_to_action(uint16_t keycode)
{
    action_t action;
    switch (keycode) {
    1716:	8b 3b       	cpi	r24, 0xBB	; 187
    1718:	91 05       	cpc	r25, r1
    171a:	68 f4       	brcc	.+26     	; 0x1736 <keycode_to_action+0x20>
    171c:	88 3a       	cpi	r24, 0xA8	; 168
    171e:	91 05       	cpc	r25, r1
    1720:	30 f5       	brcc	.+76     	; 0x176e <keycode_to_action+0x58>
    1722:	85 3a       	cpi	r24, 0xA5	; 165
    1724:	91 05       	cpc	r25, r1
    1726:	c0 f4       	brcc	.+48     	; 0x1758 <keycode_to_action+0x42>
    1728:	84 30       	cpi	r24, 0x04	; 4
    172a:	91 05       	cpc	r25, r1
    172c:	98 f4       	brcc	.+38     	; 0x1754 <keycode_to_action+0x3e>
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	09 f0       	breq	.+2      	; 0x1734 <keycode_to_action+0x1e>
    1732:	6f c0       	rjmp	.+222    	; 0x1812 <keycode_to_action+0xfc>
    1734:	71 c0       	rjmp	.+226    	; 0x1818 <keycode_to_action+0x102>
    1736:	80 3e       	cpi	r24, 0xE0	; 224
    1738:	91 05       	cpc	r25, r1
    173a:	08 f4       	brcc	.+2      	; 0x173e <keycode_to_action+0x28>
    173c:	6a c0       	rjmp	.+212    	; 0x1812 <keycode_to_action+0xfc>
    173e:	88 3e       	cpi	r24, 0xE8	; 232
    1740:	91 05       	cpc	r25, r1
    1742:	40 f0       	brcs	.+16     	; 0x1754 <keycode_to_action+0x3e>
    1744:	9c 01       	movw	r18, r24
    1746:	20 5f       	subi	r18, 0xF0	; 240
    1748:	31 09       	sbc	r19, r1
    174a:	20 31       	cpi	r18, 0x10	; 16
    174c:	31 05       	cpc	r19, r1
    174e:	08 f0       	brcs	.+2      	; 0x1752 <keycode_to_action+0x3c>
    1750:	60 c0       	rjmp	.+192    	; 0x1812 <keycode_to_action+0xfc>
    1752:	5c c0       	rjmp	.+184    	; 0x180c <keycode_to_action+0xf6>
    1754:	9c 01       	movw	r18, r24
    1756:	a1 c0       	rjmp	.+322    	; 0x189a <keycode_to_action+0x184>
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    1758:	85 3a       	cpi	r24, 0xA5	; 165
    175a:	91 05       	cpc	r25, r1
    175c:	09 f4       	brne	.+2      	; 0x1760 <keycode_to_action+0x4a>
    175e:	5f c0       	rjmp	.+190    	; 0x181e <keycode_to_action+0x108>
    1760:	86 3a       	cpi	r24, 0xA6	; 166
    1762:	91 05       	cpc	r25, r1
    1764:	09 f4       	brne	.+2      	; 0x1768 <keycode_to_action+0x52>
    1766:	5e c0       	rjmp	.+188    	; 0x1824 <keycode_to_action+0x10e>
    1768:	23 e8       	ldi	r18, 0x83	; 131
    176a:	30 e4       	ldi	r19, 0x40	; 64
    176c:	96 c0       	rjmp	.+300    	; 0x189a <keycode_to_action+0x184>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    176e:	88 3a       	cpi	r24, 0xA8	; 168
    1770:	91 05       	cpc	r25, r1
    1772:	09 f4       	brne	.+2      	; 0x1776 <keycode_to_action+0x60>
    1774:	5a c0       	rjmp	.+180    	; 0x182a <keycode_to_action+0x114>
    1776:	89 3a       	cpi	r24, 0xA9	; 169
    1778:	91 05       	cpc	r25, r1
    177a:	09 f4       	brne	.+2      	; 0x177e <keycode_to_action+0x68>
    177c:	59 c0       	rjmp	.+178    	; 0x1830 <keycode_to_action+0x11a>
    177e:	8a 3a       	cpi	r24, 0xAA	; 170
    1780:	91 05       	cpc	r25, r1
    1782:	09 f4       	brne	.+2      	; 0x1786 <keycode_to_action+0x70>
    1784:	58 c0       	rjmp	.+176    	; 0x1836 <keycode_to_action+0x120>
    1786:	8b 3a       	cpi	r24, 0xAB	; 171
    1788:	91 05       	cpc	r25, r1
    178a:	09 f4       	brne	.+2      	; 0x178e <keycode_to_action+0x78>
    178c:	57 c0       	rjmp	.+174    	; 0x183c <keycode_to_action+0x126>
    178e:	8c 3a       	cpi	r24, 0xAC	; 172
    1790:	91 05       	cpc	r25, r1
    1792:	09 f4       	brne	.+2      	; 0x1796 <keycode_to_action+0x80>
    1794:	56 c0       	rjmp	.+172    	; 0x1842 <keycode_to_action+0x12c>
    1796:	8d 3a       	cpi	r24, 0xAD	; 173
    1798:	91 05       	cpc	r25, r1
    179a:	09 f4       	brne	.+2      	; 0x179e <keycode_to_action+0x88>
    179c:	55 c0       	rjmp	.+170    	; 0x1848 <keycode_to_action+0x132>
    179e:	80 3b       	cpi	r24, 0xB0	; 176
    17a0:	91 05       	cpc	r25, r1
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <keycode_to_action+0x90>
    17a4:	54 c0       	rjmp	.+168    	; 0x184e <keycode_to_action+0x138>
    17a6:	8e 3a       	cpi	r24, 0xAE	; 174
    17a8:	91 05       	cpc	r25, r1
    17aa:	09 f4       	brne	.+2      	; 0x17ae <keycode_to_action+0x98>
    17ac:	53 c0       	rjmp	.+166    	; 0x1854 <keycode_to_action+0x13e>
    17ae:	8f 3a       	cpi	r24, 0xAF	; 175
    17b0:	91 05       	cpc	r25, r1
    17b2:	09 f4       	brne	.+2      	; 0x17b6 <keycode_to_action+0xa0>
    17b4:	52 c0       	rjmp	.+164    	; 0x185a <keycode_to_action+0x144>
    17b6:	81 3b       	cpi	r24, 0xB1	; 177
    17b8:	91 05       	cpc	r25, r1
    17ba:	09 f4       	brne	.+2      	; 0x17be <keycode_to_action+0xa8>
    17bc:	51 c0       	rjmp	.+162    	; 0x1860 <keycode_to_action+0x14a>
    17be:	82 3b       	cpi	r24, 0xB2	; 178
    17c0:	91 05       	cpc	r25, r1
    17c2:	09 f4       	brne	.+2      	; 0x17c6 <keycode_to_action+0xb0>
    17c4:	50 c0       	rjmp	.+160    	; 0x1866 <keycode_to_action+0x150>
    17c6:	83 3b       	cpi	r24, 0xB3	; 179
    17c8:	91 05       	cpc	r25, r1
    17ca:	09 f4       	brne	.+2      	; 0x17ce <keycode_to_action+0xb8>
    17cc:	4f c0       	rjmp	.+158    	; 0x186c <keycode_to_action+0x156>
    17ce:	84 3b       	cpi	r24, 0xB4	; 180
    17d0:	91 05       	cpc	r25, r1
    17d2:	09 f4       	brne	.+2      	; 0x17d6 <keycode_to_action+0xc0>
    17d4:	4e c0       	rjmp	.+156    	; 0x1872 <keycode_to_action+0x15c>
    17d6:	85 3b       	cpi	r24, 0xB5	; 181
    17d8:	91 05       	cpc	r25, r1
    17da:	09 f4       	brne	.+2      	; 0x17de <keycode_to_action+0xc8>
    17dc:	4d c0       	rjmp	.+154    	; 0x1878 <keycode_to_action+0x162>
    17de:	86 3b       	cpi	r24, 0xB6	; 182
    17e0:	91 05       	cpc	r25, r1
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <keycode_to_action+0xd0>
    17e4:	4c c0       	rjmp	.+152    	; 0x187e <keycode_to_action+0x168>
    17e6:	87 3b       	cpi	r24, 0xB7	; 183
    17e8:	91 05       	cpc	r25, r1
    17ea:	09 f4       	brne	.+2      	; 0x17ee <keycode_to_action+0xd8>
    17ec:	4b c0       	rjmp	.+150    	; 0x1884 <keycode_to_action+0x16e>
    17ee:	88 3b       	cpi	r24, 0xB8	; 184
    17f0:	91 05       	cpc	r25, r1
    17f2:	09 f4       	brne	.+2      	; 0x17f6 <keycode_to_action+0xe0>
    17f4:	4a c0       	rjmp	.+148    	; 0x188a <keycode_to_action+0x174>
    17f6:	89 3b       	cpi	r24, 0xB9	; 185
    17f8:	91 05       	cpc	r25, r1
    17fa:	09 f4       	brne	.+2      	; 0x17fe <keycode_to_action+0xe8>
    17fc:	49 c0       	rjmp	.+146    	; 0x1890 <keycode_to_action+0x17a>
    17fe:	8a 3b       	cpi	r24, 0xBA	; 186
    1800:	91 05       	cpc	r25, r1
    1802:	09 f0       	breq	.+2      	; 0x1806 <keycode_to_action+0xf0>
    1804:	48 c0       	rjmp	.+144    	; 0x1896 <keycode_to_action+0x180>
    1806:	2a e2       	ldi	r18, 0x2A	; 42
    1808:	36 e4       	ldi	r19, 0x46	; 70
    180a:	47 c0       	rjmp	.+142    	; 0x189a <keycode_to_action+0x184>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    180c:	9c 01       	movw	r18, r24
    180e:	30 65       	ori	r19, 0x50	; 80
            break;
    1810:	44 c0       	rjmp	.+136    	; 0x189a <keycode_to_action+0x184>
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
            break;
        default:
            action.code = ACTION_NO;
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
            break;
    1816:	41 c0       	rjmp	.+130    	; 0x189a <keycode_to_action+0x184>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    1818:	21 e0       	ldi	r18, 0x01	; 1
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	3e c0       	rjmp	.+124    	; 0x189a <keycode_to_action+0x184>
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    181e:	21 e8       	ldi	r18, 0x81	; 129
    1820:	30 e4       	ldi	r19, 0x40	; 64
    1822:	3b c0       	rjmp	.+118    	; 0x189a <keycode_to_action+0x184>
    1824:	22 e8       	ldi	r18, 0x82	; 130
    1826:	30 e4       	ldi	r19, 0x40	; 64
    1828:	38 c0       	rjmp	.+112    	; 0x189a <keycode_to_action+0x184>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    182a:	22 ee       	ldi	r18, 0xE2	; 226
    182c:	34 e4       	ldi	r19, 0x44	; 68
    182e:	35 c0       	rjmp	.+106    	; 0x189a <keycode_to_action+0x184>
    1830:	29 ee       	ldi	r18, 0xE9	; 233
    1832:	34 e4       	ldi	r19, 0x44	; 68
    1834:	32 c0       	rjmp	.+100    	; 0x189a <keycode_to_action+0x184>
    1836:	2a ee       	ldi	r18, 0xEA	; 234
    1838:	34 e4       	ldi	r19, 0x44	; 68
    183a:	2f c0       	rjmp	.+94     	; 0x189a <keycode_to_action+0x184>
    183c:	25 eb       	ldi	r18, 0xB5	; 181
    183e:	34 e4       	ldi	r19, 0x44	; 68
    1840:	2c c0       	rjmp	.+88     	; 0x189a <keycode_to_action+0x184>
    1842:	26 eb       	ldi	r18, 0xB6	; 182
    1844:	34 e4       	ldi	r19, 0x44	; 68
    1846:	29 c0       	rjmp	.+82     	; 0x189a <keycode_to_action+0x184>
    1848:	27 eb       	ldi	r18, 0xB7	; 183
    184a:	34 e4       	ldi	r19, 0x44	; 68
    184c:	26 c0       	rjmp	.+76     	; 0x189a <keycode_to_action+0x184>
    184e:	2c ec       	ldi	r18, 0xCC	; 204
    1850:	34 e4       	ldi	r19, 0x44	; 68
    1852:	23 c0       	rjmp	.+70     	; 0x189a <keycode_to_action+0x184>
    1854:	2d ec       	ldi	r18, 0xCD	; 205
    1856:	34 e4       	ldi	r19, 0x44	; 68
    1858:	20 c0       	rjmp	.+64     	; 0x189a <keycode_to_action+0x184>
    185a:	23 e8       	ldi	r18, 0x83	; 131
    185c:	35 e4       	ldi	r19, 0x45	; 69
    185e:	1d c0       	rjmp	.+58     	; 0x189a <keycode_to_action+0x184>
    1860:	2a e8       	ldi	r18, 0x8A	; 138
    1862:	35 e4       	ldi	r19, 0x45	; 69
    1864:	1a c0       	rjmp	.+52     	; 0x189a <keycode_to_action+0x184>
    1866:	22 e9       	ldi	r18, 0x92	; 146
    1868:	35 e4       	ldi	r19, 0x45	; 69
    186a:	17 c0       	rjmp	.+46     	; 0x189a <keycode_to_action+0x184>
    186c:	24 e9       	ldi	r18, 0x94	; 148
    186e:	35 e4       	ldi	r19, 0x45	; 69
    1870:	14 c0       	rjmp	.+40     	; 0x189a <keycode_to_action+0x184>
    1872:	21 e2       	ldi	r18, 0x21	; 33
    1874:	36 e4       	ldi	r19, 0x46	; 70
    1876:	11 c0       	rjmp	.+34     	; 0x189a <keycode_to_action+0x184>
    1878:	23 e2       	ldi	r18, 0x23	; 35
    187a:	36 e4       	ldi	r19, 0x46	; 70
    187c:	0e c0       	rjmp	.+28     	; 0x189a <keycode_to_action+0x184>
    187e:	24 e2       	ldi	r18, 0x24	; 36
    1880:	36 e4       	ldi	r19, 0x46	; 70
    1882:	0b c0       	rjmp	.+22     	; 0x189a <keycode_to_action+0x184>
    1884:	25 e2       	ldi	r18, 0x25	; 37
    1886:	36 e4       	ldi	r19, 0x46	; 70
    1888:	08 c0       	rjmp	.+16     	; 0x189a <keycode_to_action+0x184>
    188a:	26 e2       	ldi	r18, 0x26	; 38
    188c:	36 e4       	ldi	r19, 0x46	; 70
    188e:	05 c0       	rjmp	.+10     	; 0x189a <keycode_to_action+0x184>
    1890:	27 e2       	ldi	r18, 0x27	; 39
    1892:	36 e4       	ldi	r19, 0x46	; 70
    1894:	02 c0       	rjmp	.+4      	; 0x189a <keycode_to_action+0x184>
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	34 e4       	ldi	r19, 0x44	; 68
        default:
            action.code = ACTION_NO;
            break;
    }
    return action;
}
    189a:	c9 01       	movw	r24, r18
    189c:	08 95       	ret

0000189e <keymap_key_to_keycode>:

/* translates key to keycode */
uint16_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
	// Read entire word (16bits)
    return pgm_read_word(&keymaps[(layer)][(key.row)][(key.col)]);
    189e:	9e e0       	ldi	r25, 0x0E	; 14
    18a0:	79 9f       	mul	r23, r25
    18a2:	f0 01       	movw	r30, r0
    18a4:	11 24       	eor	r1, r1
    18a6:	96 e4       	ldi	r25, 0x46	; 70
    18a8:	89 9f       	mul	r24, r25
    18aa:	e0 0d       	add	r30, r0
    18ac:	f1 1d       	adc	r31, r1
    18ae:	11 24       	eor	r1, r1
    18b0:	e6 0f       	add	r30, r22
    18b2:	f1 1d       	adc	r31, r1
    18b4:	ee 0f       	add	r30, r30
    18b6:	ff 1f       	adc	r31, r31
    18b8:	ea 53       	subi	r30, 0x3A	; 58
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	25 91       	lpm	r18, Z+
    18be:	34 91       	lpm	r19, Z
}
    18c0:	c9 01       	movw	r24, r18
    18c2:	08 95       	ret

000018c4 <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint16_t keycode)
{
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	84 5d       	subi	r24, 0xD4	; 212
    18ca:	90 40       	sbci	r25, 0x00	; 0
    18cc:	fc 01       	movw	r30, r24
    18ce:	25 91       	lpm	r18, Z+
    18d0:	34 91       	lpm	r19, Z
}
    18d2:	c9 01       	movw	r24, r18
    18d4:	08 95       	ret

000018d6 <keymap_func_to_action>:

action_t keymap_func_to_action(uint16_t keycode)
{
	// For FUNC without 8bit limit
    return (action_t){ .code = pgm_read_word(&fn_actions[(int)keycode]) };
    18d6:	88 0f       	add	r24, r24
    18d8:	99 1f       	adc	r25, r25
    18da:	84 55       	subi	r24, 0x54	; 84
    18dc:	9f 4f       	sbci	r25, 0xFF	; 255
    18de:	fc 01       	movw	r30, r24
    18e0:	25 91       	lpm	r18, Z+
    18e2:	34 91       	lpm	r19, Z
}
    18e4:	c9 01       	movw	r24, r18
    18e6:	08 95       	ret

000018e8 <action_for_key>:

/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
	// 16bit keycodes - important
    uint16_t keycode = keymap_key_to_keycode(layer, key);
    18e8:	0e 94 4f 0c 	call	0x189e	; 0x189e <keymap_key_to_keycode>
    18ec:	9c 01       	movw	r18, r24

    if (keycode >= 0x0100 && keycode < 0x2000) {
    18ee:	9a 95       	dec	r25
    18f0:	81 15       	cp	r24, r1
    18f2:	9f 41       	sbci	r25, 0x1F	; 31
    18f4:	10 f4       	brcc	.+4      	; 0x18fa <action_for_key+0x12>
    	// Has a modifier
    	action_t action;
    	// Split it up
    	action.code = ACTION_MODS_KEY(keycode >> 8, keycode & 0xFF); // adds modifier to key
    	return action;
    18f6:	c9 01       	movw	r24, r18
    18f8:	08 95       	ret
	} else if (keycode >= 0x2000 && keycode < 0x3000) {
    18fa:	c9 01       	movw	r24, r18
    18fc:	90 52       	subi	r25, 0x20	; 32
    18fe:	81 15       	cp	r24, r1
    1900:	90 41       	sbci	r25, 0x10	; 16
    1902:	28 f4       	brcc	.+10     	; 0x190e <action_for_key+0x26>
        // Is a shortcut for function layer, pull last 12bits
        // This means we have 4,096 FN macros at our disposal
        return keymap_func_to_action(keycode & 0xFFF);
    1904:	c9 01       	movw	r24, r18
    1906:	9f 70       	andi	r25, 0x0F	; 15
    1908:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <keymap_func_to_action>
    190c:	08 95       	ret
	} else if (keycode >= 0x3000 && keycode < 0x4000) {
    190e:	c9 01       	movw	r24, r18
    1910:	90 53       	subi	r25, 0x30	; 48
    1912:	81 15       	cp	r24, r1
    1914:	90 41       	sbci	r25, 0x10	; 16
    1916:	20 f4       	brcc	.+8      	; 0x1920 <action_for_key+0x38>
      // When the code starts with 3, it's an action macro.
    	action_t action;
    	action.code = ACTION_MACRO(keycode & 0xFF);
    1918:	c9 01       	movw	r24, r18
    191a:	99 27       	eor	r25, r25
    	return action;
    191c:	90 6c       	ori	r25, 0xC0	; 192
    191e:	08 95       	ret
#ifdef BACKLIGHT_ENABLE
	} else if (keycode >= BL_0 & keycode <= BL_15) {
    1920:	c9 01       	movw	r24, r18
    1922:	90 54       	subi	r25, 0x40	; 64
    1924:	40 97       	sbiw	r24, 0x10	; 16
    1926:	28 f4       	brcc	.+10     	; 0x1932 <action_for_key+0x4a>
        action_t action;
        action.code = ACTION_BACKLIGHT_LEVEL(keycode & 0x000F);
    1928:	c9 01       	movw	r24, r18
    192a:	8f 70       	andi	r24, 0x0F	; 15
    192c:	99 27       	eor	r25, r25
        return action;
    192e:	94 6d       	ori	r25, 0xD4	; 212
    1930:	08 95       	ret
    } else if (keycode == BL_DEC) {
    1932:	20 31       	cpi	r18, 0x10	; 16
    1934:	80 e4       	ldi	r24, 0x40	; 64
    1936:	38 07       	cpc	r19, r24
    1938:	19 f4       	brne	.+6      	; 0x1940 <action_for_key+0x58>
        action_t action;
        action.code = ACTION_BACKLIGHT_DECREASE();
        return action;
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	91 ed       	ldi	r25, 0xD1	; 209
    193e:	08 95       	ret
    } else if (keycode == BL_INC) {
    1940:	21 31       	cpi	r18, 0x11	; 17
    1942:	90 e4       	ldi	r25, 0x40	; 64
    1944:	39 07       	cpc	r19, r25
    1946:	19 f4       	brne	.+6      	; 0x194e <action_for_key+0x66>
        action_t action;
        action.code = ACTION_BACKLIGHT_INCREASE();
        return action;
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	90 ed       	ldi	r25, 0xD0	; 208
    194c:	08 95       	ret
    } else if (keycode == BL_TOGG) {
    194e:	22 31       	cpi	r18, 0x12	; 18
    1950:	40 e4       	ldi	r20, 0x40	; 64
    1952:	34 07       	cpc	r19, r20
    1954:	19 f4       	brne	.+6      	; 0x195c <action_for_key+0x74>
        action_t action;
        action.code = ACTION_BACKLIGHT_TOGGLE();
        return action;
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	92 ed       	ldi	r25, 0xD2	; 210
    195a:	08 95       	ret
    } else if (keycode == BL_STEP) {
    195c:	23 31       	cpi	r18, 0x13	; 19
    195e:	80 e4       	ldi	r24, 0x40	; 64
    1960:	38 07       	cpc	r19, r24
    1962:	19 f4       	brne	.+6      	; 0x196a <action_for_key+0x82>
        action_t action;
        action.code = ACTION_BACKLIGHT_STEP();
        return action;
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	93 ed       	ldi	r25, 0xD3	; 211
    1968:	08 95       	ret
#endif
    } else if (keycode == RESET) { // RESET is 0x5000, which is why this is here
    196a:	21 15       	cp	r18, r1
    196c:	90 e5       	ldi	r25, 0x50	; 80
    196e:	39 07       	cpc	r19, r25
    1970:	69 f4       	brne	.+26     	; 0x198c <action_for_key+0xa4>
        clear_keyboard();
    1972:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <clear_keyboard>
    1976:	2f ef       	ldi	r18, 0xFF	; 255
    1978:	44 e3       	ldi	r20, 0x34	; 52
    197a:	8c e0       	ldi	r24, 0x0C	; 12
    197c:	21 50       	subi	r18, 0x01	; 1
    197e:	40 40       	sbci	r20, 0x00	; 0
    1980:	80 40       	sbci	r24, 0x00	; 0
    1982:	e1 f7       	brne	.-8      	; 0x197c <action_for_key+0x94>
    1984:	00 c0       	rjmp	.+0      	; 0x1986 <action_for_key+0x9e>
    1986:	00 00       	nop
        _delay_ms(250);
        bootloader_jump();
    1988:	0c 94 94 25 	jmp	0x4b28	; 0x4b28 <bootloader_jump>
        return;
    } else if (keycode == DEBUG) { // DEBUG is 0x5001
    198c:	21 30       	cpi	r18, 0x01	; 1
    198e:	90 e5       	ldi	r25, 0x50	; 80
    1990:	39 07       	cpc	r19, r25
    1992:	31 f4       	brne	.+12     	; 0x19a0 <action_for_key+0xb8>
      // TODO: Does this actually work?
        print("\nDEBUG: enabled.\n");
        debug_enable = true;
    1994:	80 91 05 02 	lds	r24, 0x0205
    1998:	81 60       	ori	r24, 0x01	; 1
    199a:	80 93 05 02 	sts	0x0205, r24
    199e:	08 95       	ret
        return;
    } else if (keycode >= 0x5000 && keycode < 0x6000) {
    19a0:	c9 01       	movw	r24, r18
    19a2:	90 55       	subi	r25, 0x50	; 80
    19a4:	81 15       	cp	r24, r1
    19a6:	90 41       	sbci	r25, 0x10	; 16
    19a8:	08 f0       	brcs	.+2      	; 0x19ac <action_for_key+0xc4>
    19aa:	62 c0       	rjmp	.+196    	; 0x1a70 <action_for_key+0x188>
        // Layer movement shortcuts
        // See .h to see constraints/usage
        int type = (keycode >> 0x8) & 0xF;
    19ac:	43 2f       	mov	r20, r19
    19ae:	55 27       	eor	r21, r21
    19b0:	4f 70       	andi	r20, 0x0F	; 15
    19b2:	55 27       	eor	r21, r21
        if (type == 0x1) {
    19b4:	41 30       	cpi	r20, 0x01	; 1
    19b6:	51 05       	cpc	r21, r1
    19b8:	f9 f4       	brne	.+62     	; 0x19f8 <action_for_key+0x110>
            // Layer set "GOTO"
            int when = (keycode >> 0x4) & 0x3;
    19ba:	c9 01       	movw	r24, r18
    19bc:	74 e0       	ldi	r23, 0x04	; 4
    19be:	88 0f       	add	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	7a 95       	dec	r23
    19c4:	e1 f7       	brne	.-8      	; 0x19be <action_for_key+0xd6>
            int layer = keycode & 0xF;
            action_t action;
            action.code = ACTION_LAYER_SET(layer, when);
    19c6:	88 27       	eor	r24, r24
    19c8:	93 70       	andi	r25, 0x03	; 3
    19ca:	b9 01       	movw	r22, r18
    19cc:	e3 e0       	ldi	r30, 0x03	; 3
    19ce:	66 0f       	add	r22, r22
    19d0:	77 1f       	adc	r23, r23
    19d2:	ea 95       	dec	r30
    19d4:	e1 f7       	brne	.-8      	; 0x19ce <action_for_key+0xe6>
    19d6:	60 76       	andi	r22, 0x60	; 96
    19d8:	77 27       	eor	r23, r23
    19da:	86 2b       	or	r24, r22
    19dc:	97 2b       	or	r25, r23
    19de:	9c 68       	ori	r25, 0x8C	; 140
    19e0:	23 70       	andi	r18, 0x03	; 3
    19e2:	33 27       	eor	r19, r19
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <action_for_key+0x102>
    19e6:	44 0f       	add	r20, r20
    19e8:	55 1f       	adc	r21, r21
    19ea:	2a 95       	dec	r18
    19ec:	e2 f7       	brpl	.-8      	; 0x19e6 <action_for_key+0xfe>
    19ee:	4f 71       	andi	r20, 0x1F	; 31
    19f0:	55 27       	eor	r21, r21
            return action;
    19f2:	84 2b       	or	r24, r20
    19f4:	95 2b       	or	r25, r21
    19f6:	08 95       	ret
        } else if (type == 0x2) {
    19f8:	42 30       	cpi	r20, 0x02	; 2
    19fa:	51 05       	cpc	r21, r1
    19fc:	29 f4       	brne	.+10     	; 0x1a08 <action_for_key+0x120>
            // Momentary layer
            int layer = keycode & 0xFF;
            action_t action;
            action.code = ACTION_LAYER_MOMENTARY(layer);
    19fe:	92 2f       	mov	r25, r18
    1a00:	88 27       	eor	r24, r24
            return action;
    1a02:	81 6f       	ori	r24, 0xF1	; 241
    1a04:	90 6a       	ori	r25, 0xA0	; 160
    1a06:	08 95       	ret
        } else if (type == 0x3) {
    1a08:	43 30       	cpi	r20, 0x03	; 3
    1a0a:	51 05       	cpc	r21, r1
    1a0c:	b9 f4       	brne	.+46     	; 0x1a3c <action_for_key+0x154>
            // Set default layer
            int layer = keycode & 0xFF;
            action_t action;
            action.code = ACTION_DEFAULT_LAYER_SET(layer);
    1a0e:	c9 01       	movw	r24, r18
    1a10:	53 e0       	ldi	r21, 0x03	; 3
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	5a 95       	dec	r21
    1a18:	e1 f7       	brne	.-8      	; 0x1a12 <action_for_key+0x12a>
    1a1a:	80 7e       	andi	r24, 0xE0	; 224
    1a1c:	97 70       	andi	r25, 0x07	; 7
    1a1e:	23 70       	andi	r18, 0x03	; 3
    1a20:	33 27       	eor	r19, r19
    1a22:	41 e0       	ldi	r20, 0x01	; 1
    1a24:	50 e0       	ldi	r21, 0x00	; 0
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <action_for_key+0x144>
    1a28:	44 0f       	add	r20, r20
    1a2a:	55 1f       	adc	r21, r21
    1a2c:	2a 95       	dec	r18
    1a2e:	e2 f7       	brpl	.-8      	; 0x1a28 <action_for_key+0x140>
    1a30:	4f 71       	andi	r20, 0x1F	; 31
    1a32:	55 27       	eor	r21, r21
    1a34:	84 2b       	or	r24, r20
    1a36:	95 2b       	or	r25, r21
            return action;
    1a38:	9c 68       	ori	r25, 0x8C	; 140
    1a3a:	08 95       	ret
        } else if (type == 0x4) {
    1a3c:	44 30       	cpi	r20, 0x04	; 4
    1a3e:	51 05       	cpc	r21, r1
    1a40:	49 f5       	brne	.+82     	; 0x1a94 <action_for_key+0x1ac>
            // Set default layer
            int layer = keycode & 0xFF;
            action_t action;
            action.code = ACTION_LAYER_TOGGLE(layer);
    1a42:	c9 01       	movw	r24, r18
    1a44:	43 e0       	ldi	r20, 0x03	; 3
    1a46:	88 0f       	add	r24, r24
    1a48:	99 1f       	adc	r25, r25
    1a4a:	4a 95       	dec	r20
    1a4c:	e1 f7       	brne	.-8      	; 0x1a46 <action_for_key+0x15e>
    1a4e:	80 7e       	andi	r24, 0xE0	; 224
    1a50:	97 70       	andi	r25, 0x07	; 7
    1a52:	23 70       	andi	r18, 0x03	; 3
    1a54:	33 27       	eor	r19, r19
    1a56:	41 e0       	ldi	r20, 0x01	; 1
    1a58:	50 e0       	ldi	r21, 0x00	; 0
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <action_for_key+0x178>
    1a5c:	44 0f       	add	r20, r20
    1a5e:	55 1f       	adc	r21, r21
    1a60:	2a 95       	dec	r18
    1a62:	e2 f7       	brpl	.-8      	; 0x1a5c <action_for_key+0x174>
    1a64:	4f 71       	andi	r20, 0x1F	; 31
    1a66:	55 27       	eor	r21, r21
    1a68:	84 2b       	or	r24, r20
    1a6a:	95 2b       	or	r25, r21
            return action;
    1a6c:	9a 68       	ori	r25, 0x8A	; 138
    1a6e:	08 95       	ret
    } else if (keycode >= 0x6000 && keycode < 0x7000) {
        action_t action;
        action.code =  ACTION_FUNCTION_OPT(keycode & 0xFF, (keycode & 0x0F00) >> 8);
        return action;
#endif
    } else if (keycode >= 0x7000 && keycode < 0x8000) {
    1a70:	c9 01       	movw	r24, r18
    1a72:	90 57       	subi	r25, 0x70	; 112
    1a74:	81 15       	cp	r24, r1
    1a76:	90 41       	sbci	r25, 0x10	; 16
    1a78:	20 f4       	brcc	.+8      	; 0x1a82 <action_for_key+0x19a>
        action_t action;
        action.code = ACTION_MODS_TAP_KEY((keycode >> 0x8) & 0xF, keycode & 0xFF);
    1a7a:	c9 01       	movw	r24, r18
    1a7c:	9f 70       	andi	r25, 0x0F	; 15
        return action;
    1a7e:	90 62       	ori	r25, 0x20	; 32
    1a80:	08 95       	ret
    } else if (keycode >= 0x8000 && keycode < 0x9000) {
    1a82:	c9 01       	movw	r24, r18
    1a84:	90 58       	subi	r25, 0x80	; 128
    1a86:	81 15       	cp	r24, r1
    1a88:	90 41       	sbci	r25, 0x10	; 16
    1a8a:	20 f4       	brcc	.+8      	; 0x1a94 <action_for_key+0x1ac>
        action_t action;
        action.code = ACTION_LAYER_TAP_KEY((keycode >> 0x8) & 0xF, keycode & 0xFF);
    1a8c:	c9 01       	movw	r24, r18
    1a8e:	9f 70       	andi	r25, 0x0F	; 15
        return action;
    1a90:	90 6a       	ori	r25, 0xA0	; 160
    1a92:	08 95       	ret
#endif
    } else {

    }

    switch (keycode) {
    1a94:	20 3e       	cpi	r18, 0xE0	; 224
    1a96:	31 05       	cpc	r19, r1
    1a98:	e0 f4       	brcc	.+56     	; 0x1ad2 <action_for_key+0x1ea>
    1a9a:	20 3c       	cpi	r18, 0xC0	; 192
    1a9c:	31 05       	cpc	r19, r1
    1a9e:	68 f5       	brcc	.+90     	; 0x1afa <action_for_key+0x212>
    1aa0:	21 33       	cpi	r18, 0x31	; 49
    1aa2:	31 05       	cpc	r19, r1
    1aa4:	09 f4       	brne	.+2      	; 0x1aa8 <action_for_key+0x1c0>
    1aa6:	75 c0       	rjmp	.+234    	; 0x1b92 <action_for_key+0x2aa>
    1aa8:	48 f4       	brcc	.+18     	; 0x1abc <action_for_key+0x1d4>
    1aaa:	29 32       	cpi	r18, 0x29	; 41
    1aac:	31 05       	cpc	r19, r1
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <action_for_key+0x1ca>
    1ab0:	6b c0       	rjmp	.+214    	; 0x1b88 <action_for_key+0x2a0>
    1ab2:	2a 32       	cpi	r18, 0x2A	; 42
    1ab4:	31 05       	cpc	r19, r1
    1ab6:	09 f0       	breq	.+2      	; 0x1aba <action_for_key+0x1d2>
    1ab8:	7b c0       	rjmp	.+246    	; 0x1bb0 <action_for_key+0x2c8>
    1aba:	75 c0       	rjmp	.+234    	; 0x1ba6 <action_for_key+0x2be>
    1abc:	29 33       	cpi	r18, 0x39	; 57
    1abe:	31 05       	cpc	r19, r1
    1ac0:	01 f1       	breq	.+64     	; 0x1b02 <action_for_key+0x21a>
    1ac2:	22 38       	cpi	r18, 0x82	; 130
    1ac4:	31 05       	cpc	r19, r1
    1ac6:	e9 f0       	breq	.+58     	; 0x1b02 <action_for_key+0x21a>
    1ac8:	25 33       	cpi	r18, 0x35	; 53
    1aca:	31 05       	cpc	r19, r1
    1acc:	09 f0       	breq	.+2      	; 0x1ad0 <action_for_key+0x1e8>
    1ace:	70 c0       	rjmp	.+224    	; 0x1bb0 <action_for_key+0x2c8>
    1ad0:	51 c0       	rjmp	.+162    	; 0x1b74 <action_for_key+0x28c>
    1ad2:	23 3e       	cpi	r18, 0xE3	; 227
    1ad4:	31 05       	cpc	r19, r1
    1ad6:	b1 f1       	breq	.+108    	; 0x1b44 <action_for_key+0x25c>
    1ad8:	40 f4       	brcc	.+16     	; 0x1aea <action_for_key+0x202>
    1ada:	20 3e       	cpi	r18, 0xE0	; 224
    1adc:	31 05       	cpc	r19, r1
    1ade:	d1 f0       	breq	.+52     	; 0x1b14 <action_for_key+0x22c>
    1ae0:	22 3e       	cpi	r18, 0xE2	; 226
    1ae2:	31 05       	cpc	r19, r1
    1ae4:	09 f0       	breq	.+2      	; 0x1ae8 <action_for_key+0x200>
    1ae6:	64 c0       	rjmp	.+200    	; 0x1bb0 <action_for_key+0x2c8>
    1ae8:	1c c0       	rjmp	.+56     	; 0x1b22 <action_for_key+0x23a>
    1aea:	26 3e       	cpi	r18, 0xE6	; 230
    1aec:	31 05       	cpc	r19, r1
    1aee:	79 f1       	breq	.+94     	; 0x1b4e <action_for_key+0x266>
    1af0:	27 3e       	cpi	r18, 0xE7	; 231
    1af2:	31 05       	cpc	r19, r1
    1af4:	09 f0       	breq	.+2      	; 0x1af8 <action_for_key+0x210>
    1af6:	5c c0       	rjmp	.+184    	; 0x1bb0 <action_for_key+0x2c8>
    1af8:	38 c0       	rjmp	.+112    	; 0x1b6a <action_for_key+0x282>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    1afa:	c9 01       	movw	r24, r18
    1afc:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <keymap_fn_to_action>
    1b00:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    1b02:	80 91 16 02 	lds	r24, 0x0216
    1b06:	80 fd       	sbrc	r24, 0
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <action_for_key+0x226>
    1b0a:	81 ff       	sbrs	r24, 1
    1b0c:	51 c0       	rjmp	.+162    	; 0x1bb0 <action_for_key+0x2c8>
                return keycode_to_action(KC_LCTL);
    1b0e:	80 ee       	ldi	r24, 0xE0	; 224
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	4f c0       	rjmp	.+158    	; 0x1bb2 <action_for_key+0x2ca>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    1b14:	80 91 16 02 	lds	r24, 0x0216
    1b18:	80 ff       	sbrs	r24, 0
    1b1a:	f9 cf       	rjmp	.-14     	; 0x1b0e <action_for_key+0x226>
                return keycode_to_action(KC_CAPSLOCK);
    1b1c:	89 e3       	ldi	r24, 0x39	; 57
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	48 c0       	rjmp	.+144    	; 0x1bb2 <action_for_key+0x2ca>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    1b22:	80 91 16 02 	lds	r24, 0x0216
    1b26:	82 ff       	sbrs	r24, 2
    1b28:	0a c0       	rjmp	.+20     	; 0x1b3e <action_for_key+0x256>
                if (keymap_config.no_gui) {
    1b2a:	80 91 16 02 	lds	r24, 0x0216
    1b2e:	84 ff       	sbrs	r24, 4
    1b30:	03 c0       	rjmp	.+6      	; 0x1b38 <action_for_key+0x250>
                    return keycode_to_action(ACTION_NO);
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	3d c0       	rjmp	.+122    	; 0x1bb2 <action_for_key+0x2ca>
                }
                return keycode_to_action(KC_LGUI);
    1b38:	83 ee       	ldi	r24, 0xE3	; 227
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	3a c0       	rjmp	.+116    	; 0x1bb2 <action_for_key+0x2ca>
            }
            return keycode_to_action(KC_LALT);
    1b3e:	82 ee       	ldi	r24, 0xE2	; 226
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	37 c0       	rjmp	.+110    	; 0x1bb2 <action_for_key+0x2ca>
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    1b44:	80 91 16 02 	lds	r24, 0x0216
    1b48:	82 ff       	sbrs	r24, 2
    1b4a:	ef cf       	rjmp	.-34     	; 0x1b2a <action_for_key+0x242>
    1b4c:	f8 cf       	rjmp	.-16     	; 0x1b3e <action_for_key+0x256>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    1b4e:	80 91 16 02 	lds	r24, 0x0216
    1b52:	83 ff       	sbrs	r24, 3
    1b54:	07 c0       	rjmp	.+14     	; 0x1b64 <action_for_key+0x27c>
                if (keymap_config.no_gui) {
    1b56:	80 91 16 02 	lds	r24, 0x0216
    1b5a:	84 fd       	sbrc	r24, 4
    1b5c:	ea cf       	rjmp	.-44     	; 0x1b32 <action_for_key+0x24a>
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
    1b5e:	87 ee       	ldi	r24, 0xE7	; 231
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	27 c0       	rjmp	.+78     	; 0x1bb2 <action_for_key+0x2ca>
            }
            return keycode_to_action(KC_RALT);
    1b64:	86 ee       	ldi	r24, 0xE6	; 230
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	24 c0       	rjmp	.+72     	; 0x1bb2 <action_for_key+0x2ca>
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    1b6a:	80 91 16 02 	lds	r24, 0x0216
    1b6e:	83 ff       	sbrs	r24, 3
    1b70:	f2 cf       	rjmp	.-28     	; 0x1b56 <action_for_key+0x26e>
    1b72:	f8 cf       	rjmp	.-16     	; 0x1b64 <action_for_key+0x27c>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    1b74:	80 91 16 02 	lds	r24, 0x0216
    1b78:	85 ff       	sbrs	r24, 5
    1b7a:	03 c0       	rjmp	.+6      	; 0x1b82 <action_for_key+0x29a>
                return keycode_to_action(KC_ESC);
    1b7c:	89 e2       	ldi	r24, 0x29	; 41
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	18 c0       	rjmp	.+48     	; 0x1bb2 <action_for_key+0x2ca>
            }
            return keycode_to_action(KC_GRAVE);
    1b82:	85 e3       	ldi	r24, 0x35	; 53
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	15 c0       	rjmp	.+42     	; 0x1bb2 <action_for_key+0x2ca>
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    1b88:	80 91 16 02 	lds	r24, 0x0216
    1b8c:	85 fd       	sbrc	r24, 5
    1b8e:	f9 cf       	rjmp	.-14     	; 0x1b82 <action_for_key+0x29a>
    1b90:	f5 cf       	rjmp	.-22     	; 0x1b7c <action_for_key+0x294>
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    1b92:	80 91 16 02 	lds	r24, 0x0216
    1b96:	86 ff       	sbrs	r24, 6
    1b98:	03 c0       	rjmp	.+6      	; 0x1ba0 <action_for_key+0x2b8>
                return keycode_to_action(KC_BSPACE);
    1b9a:	8a e2       	ldi	r24, 0x2A	; 42
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	09 c0       	rjmp	.+18     	; 0x1bb2 <action_for_key+0x2ca>
            }
            return keycode_to_action(KC_BSLASH);
    1ba0:	81 e3       	ldi	r24, 0x31	; 49
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	06 c0       	rjmp	.+12     	; 0x1bb2 <action_for_key+0x2ca>
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    1ba6:	80 91 16 02 	lds	r24, 0x0216
    1baa:	86 fd       	sbrc	r24, 6
    1bac:	f9 cf       	rjmp	.-14     	; 0x1ba0 <action_for_key+0x2b8>
    1bae:	f5 cf       	rjmp	.-22     	; 0x1b9a <action_for_key+0x2b2>
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    1bb0:	c9 01       	movw	r24, r18
    1bb2:	0e 94 8b 0b 	call	0x1716	; 0x1716 <keycode_to_action>
    }
}
    1bb6:	08 95       	ret

00001bb8 <unselect_rows>:
    }
    return result;
}

static void unselect_rows(void)
{
    1bb8:	5f 92       	push	r5
    1bba:	6f 92       	push	r6
    1bbc:	7f 92       	push	r7
    1bbe:	8f 92       	push	r8
    1bc0:	9f 92       	push	r9
    1bc2:	af 92       	push	r10
    1bc4:	bf 92       	push	r11
    1bc6:	cf 92       	push	r12
    1bc8:	df 92       	push	r13
    1bca:	ef 92       	push	r14
    1bcc:	ff 92       	push	r15
    1bce:	0f 93       	push	r16
    1bd0:	1f 93       	push	r17
    1bd2:	cf 93       	push	r28
    1bd4:	df 93       	push	r29
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
    1bda:	2a 97       	sbiw	r28, 0x0a	; 10
    1bdc:	0f b6       	in	r0, 0x3f	; 63
    1bde:	f8 94       	cli
    1be0:	de bf       	out	0x3e, r29	; 62
    1be2:	0f be       	out	0x3f, r0	; 63
    1be4:	cd bf       	out	0x3d, r28	; 61
    1be6:	9e 01       	movw	r18, r28
    1be8:	2f 5f       	subi	r18, 0xFF	; 255
    1bea:	3f 4f       	sbci	r19, 0xFF	; 255
        } 
    }
    return result;
}

static void unselect_rows(void)
    1bec:	4e 01       	movw	r8, r28
    1bee:	8b e0       	ldi	r24, 0x0B	; 11
    1bf0:	88 0e       	add	r8, r24
    1bf2:	91 1c       	adc	r9, r1
{
    int B = 0, C = 0, D = 0, E = 0, F = 0;
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	70 e0       	ldi	r23, 0x00	; 0
    1bf8:	00 e0       	ldi	r16, 0x00	; 0
    1bfa:	10 e0       	ldi	r17, 0x00	; 0
    1bfc:	e1 2c       	mov	r14, r1
    1bfe:	f1 2c       	mov	r15, r1
    1c00:	c1 2c       	mov	r12, r1
    1c02:	d1 2c       	mov	r13, r1
    1c04:	a1 2c       	mov	r10, r1
    1c06:	b1 2c       	mov	r11, r1

#if DIODE_DIRECTION == COL2ROW
    for(int x = 0; x < MATRIX_ROWS; x++) { 
        int row = ROWS[x];
    1c08:	8a e0       	ldi	r24, 0x0A	; 10
    1c0a:	78 2e       	mov	r7, r24
    1c0c:	62 2e       	mov	r6, r18
    1c0e:	53 2e       	mov	r5, r19
        } else if ((row & 0xF0) == 0x40) { 
            D |= (1<<(row & 0x0F)); 
        } else if ((row & 0xF0) == 0x50) { 
            E |= (1<<(row & 0x0F)); 
        } else if ((row & 0xF0) == 0x60) { 
            F |= (1<<(row & 0x0F)); 
    1c10:	41 e0       	ldi	r20, 0x01	; 1
    1c12:	50 e0       	ldi	r21, 0x00	; 0
{
    int B = 0, C = 0, D = 0, E = 0, F = 0;

#if DIODE_DIRECTION == COL2ROW
    for(int x = 0; x < MATRIX_ROWS; x++) { 
        int row = ROWS[x];
    1c14:	e7 e1       	ldi	r30, 0x17	; 23
    1c16:	f1 e0       	ldi	r31, 0x01	; 1
    1c18:	a6 2d       	mov	r26, r6
    1c1a:	b5 2d       	mov	r27, r5
    1c1c:	87 2d       	mov	r24, r7
    1c1e:	01 90       	ld	r0, Z+
    1c20:	0d 92       	st	X+, r0
    1c22:	8a 95       	dec	r24
    1c24:	e1 f7       	brne	.-8      	; 0x1c1e <unselect_rows+0x66>
    1c26:	f9 01       	movw	r30, r18
    1c28:	81 91       	ld	r24, Z+
    1c2a:	91 91       	ld	r25, Z+
    1c2c:	9f 01       	movw	r18, r30
#else
    for(int x = 0; x < MATRIX_COLS; x++) { 
        int row = COLS[x];
#endif
        if ((row & 0xF0) == 0x20) { 
    1c2e:	fc 01       	movw	r30, r24
    1c30:	e0 7f       	andi	r30, 0xF0	; 240
    1c32:	ff 27       	eor	r31, r31
    1c34:	e0 32       	cpi	r30, 0x20	; 32
    1c36:	f1 05       	cpc	r31, r1
    1c38:	59 f4       	brne	.+22     	; 0x1c50 <unselect_rows+0x98>
            B |= (1<<(row & 0x0F)); 
    1c3a:	8f 70       	andi	r24, 0x0F	; 15
    1c3c:	99 27       	eor	r25, r25
    1c3e:	fa 01       	movw	r30, r20
    1c40:	02 c0       	rjmp	.+4      	; 0x1c46 <unselect_rows+0x8e>
    1c42:	ee 0f       	add	r30, r30
    1c44:	ff 1f       	adc	r31, r31
    1c46:	8a 95       	dec	r24
    1c48:	e2 f7       	brpl	.-8      	; 0x1c42 <unselect_rows+0x8a>
    1c4a:	ae 2a       	or	r10, r30
    1c4c:	bf 2a       	or	r11, r31
    1c4e:	37 c0       	rjmp	.+110    	; 0x1cbe <unselect_rows+0x106>
        } else if ((row & 0xF0) == 0x30) { 
    1c50:	e0 33       	cpi	r30, 0x30	; 48
    1c52:	f1 05       	cpc	r31, r1
    1c54:	59 f4       	brne	.+22     	; 0x1c6c <unselect_rows+0xb4>
            C |= (1<<(row & 0x0F)); 
    1c56:	8f 70       	andi	r24, 0x0F	; 15
    1c58:	99 27       	eor	r25, r25
    1c5a:	fa 01       	movw	r30, r20
    1c5c:	02 c0       	rjmp	.+4      	; 0x1c62 <unselect_rows+0xaa>
    1c5e:	ee 0f       	add	r30, r30
    1c60:	ff 1f       	adc	r31, r31
    1c62:	8a 95       	dec	r24
    1c64:	e2 f7       	brpl	.-8      	; 0x1c5e <unselect_rows+0xa6>
    1c66:	ce 2a       	or	r12, r30
    1c68:	df 2a       	or	r13, r31
    1c6a:	29 c0       	rjmp	.+82     	; 0x1cbe <unselect_rows+0x106>
        } else if ((row & 0xF0) == 0x40) { 
    1c6c:	e0 34       	cpi	r30, 0x40	; 64
    1c6e:	f1 05       	cpc	r31, r1
    1c70:	59 f4       	brne	.+22     	; 0x1c88 <unselect_rows+0xd0>
            D |= (1<<(row & 0x0F)); 
    1c72:	8f 70       	andi	r24, 0x0F	; 15
    1c74:	99 27       	eor	r25, r25
    1c76:	fa 01       	movw	r30, r20
    1c78:	02 c0       	rjmp	.+4      	; 0x1c7e <unselect_rows+0xc6>
    1c7a:	ee 0f       	add	r30, r30
    1c7c:	ff 1f       	adc	r31, r31
    1c7e:	8a 95       	dec	r24
    1c80:	e2 f7       	brpl	.-8      	; 0x1c7a <unselect_rows+0xc2>
    1c82:	ee 2a       	or	r14, r30
    1c84:	ff 2a       	or	r15, r31
    1c86:	1b c0       	rjmp	.+54     	; 0x1cbe <unselect_rows+0x106>
        } else if ((row & 0xF0) == 0x50) { 
    1c88:	e0 35       	cpi	r30, 0x50	; 80
    1c8a:	f1 05       	cpc	r31, r1
    1c8c:	59 f4       	brne	.+22     	; 0x1ca4 <unselect_rows+0xec>
            E |= (1<<(row & 0x0F)); 
    1c8e:	8f 70       	andi	r24, 0x0F	; 15
    1c90:	99 27       	eor	r25, r25
    1c92:	fa 01       	movw	r30, r20
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <unselect_rows+0xe2>
    1c96:	ee 0f       	add	r30, r30
    1c98:	ff 1f       	adc	r31, r31
    1c9a:	8a 95       	dec	r24
    1c9c:	e2 f7       	brpl	.-8      	; 0x1c96 <unselect_rows+0xde>
    1c9e:	0e 2b       	or	r16, r30
    1ca0:	1f 2b       	or	r17, r31
    1ca2:	0d c0       	rjmp	.+26     	; 0x1cbe <unselect_rows+0x106>
        } else if ((row & 0xF0) == 0x60) { 
    1ca4:	e0 36       	cpi	r30, 0x60	; 96
    1ca6:	f1 05       	cpc	r31, r1
    1ca8:	51 f4       	brne	.+20     	; 0x1cbe <unselect_rows+0x106>
            F |= (1<<(row & 0x0F)); 
    1caa:	8f 70       	andi	r24, 0x0F	; 15
    1cac:	99 27       	eor	r25, r25
    1cae:	fa 01       	movw	r30, r20
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <unselect_rows+0xfe>
    1cb2:	ee 0f       	add	r30, r30
    1cb4:	ff 1f       	adc	r31, r31
    1cb6:	8a 95       	dec	r24
    1cb8:	e2 f7       	brpl	.-8      	; 0x1cb2 <unselect_rows+0xfa>
    1cba:	6e 2b       	or	r22, r30
    1cbc:	7f 2b       	or	r23, r31
static void unselect_rows(void)
{
    int B = 0, C = 0, D = 0, E = 0, F = 0;

#if DIODE_DIRECTION == COL2ROW
    for(int x = 0; x < MATRIX_ROWS; x++) { 
    1cbe:	28 15       	cp	r18, r8
    1cc0:	39 05       	cpc	r19, r9
    1cc2:	09 f0       	breq	.+2      	; 0x1cc6 <unselect_rows+0x10e>
    1cc4:	a7 cf       	rjmp	.-178    	; 0x1c14 <unselect_rows+0x5c>
            E |= (1<<(row & 0x0F)); 
        } else if ((row & 0xF0) == 0x60) { 
            F |= (1<<(row & 0x0F)); 
        } 
    }
    DDRB &= ~(B); PORTB |= (B);
    1cc6:	94 b1       	in	r25, 0x04	; 4
    1cc8:	8a 2d       	mov	r24, r10
    1cca:	80 95       	com	r24
    1ccc:	89 23       	and	r24, r25
    1cce:	84 b9       	out	0x04, r24	; 4
    1cd0:	85 b1       	in	r24, 0x05	; 5
    1cd2:	8a 29       	or	r24, r10
    1cd4:	85 b9       	out	0x05, r24	; 5
    DDRC &= ~(C); PORTC |= (C); 
    1cd6:	97 b1       	in	r25, 0x07	; 7
    1cd8:	8c 2d       	mov	r24, r12
    1cda:	80 95       	com	r24
    1cdc:	89 23       	and	r24, r25
    1cde:	87 b9       	out	0x07, r24	; 7
    1ce0:	88 b1       	in	r24, 0x08	; 8
    1ce2:	8c 29       	or	r24, r12
    1ce4:	88 b9       	out	0x08, r24	; 8
    DDRD &= ~(D); PORTD |= (D);
    1ce6:	9a b1       	in	r25, 0x0a	; 10
    1ce8:	8e 2d       	mov	r24, r14
    1cea:	80 95       	com	r24
    1cec:	89 23       	and	r24, r25
    1cee:	8a b9       	out	0x0a, r24	; 10
    1cf0:	8b b1       	in	r24, 0x0b	; 11
    1cf2:	8e 29       	or	r24, r14
    1cf4:	8b b9       	out	0x0b, r24	; 11
    DDRE &= ~(E); PORTE |= (E);
    1cf6:	9d b1       	in	r25, 0x0d	; 13
    1cf8:	80 2f       	mov	r24, r16
    1cfa:	80 95       	com	r24
    1cfc:	89 23       	and	r24, r25
    1cfe:	8d b9       	out	0x0d, r24	; 13
    1d00:	8e b1       	in	r24, 0x0e	; 14
    1d02:	80 2b       	or	r24, r16
    1d04:	8e b9       	out	0x0e, r24	; 14
    DDRF &= ~(F); PORTF |= (F);
    1d06:	90 b3       	in	r25, 0x10	; 16
    1d08:	86 2f       	mov	r24, r22
    1d0a:	80 95       	com	r24
    1d0c:	89 23       	and	r24, r25
    1d0e:	80 bb       	out	0x10, r24	; 16
    1d10:	81 b3       	in	r24, 0x11	; 17
    1d12:	86 2b       	or	r24, r22
    1d14:	81 bb       	out	0x11, r24	; 17
}
    1d16:	2a 96       	adiw	r28, 0x0a	; 10
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	de bf       	out	0x3e, r29	; 62
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	cd bf       	out	0x3d, r28	; 61
    1d22:	df 91       	pop	r29
    1d24:	cf 91       	pop	r28
    1d26:	1f 91       	pop	r17
    1d28:	0f 91       	pop	r16
    1d2a:	ff 90       	pop	r15
    1d2c:	ef 90       	pop	r14
    1d2e:	df 90       	pop	r13
    1d30:	cf 90       	pop	r12
    1d32:	bf 90       	pop	r11
    1d34:	af 90       	pop	r10
    1d36:	9f 90       	pop	r9
    1d38:	8f 90       	pop	r8
    1d3a:	7f 90       	pop	r7
    1d3c:	6f 90       	pop	r6
    1d3e:	5f 90       	pop	r5
    1d40:	08 95       	ret

00001d42 <matrix_init>:
{
    return MATRIX_COLS;
}

void matrix_init(void)
{
    1d42:	5f 92       	push	r5
    1d44:	6f 92       	push	r6
    1d46:	7f 92       	push	r7
    1d48:	8f 92       	push	r8
    1d4a:	9f 92       	push	r9
    1d4c:	af 92       	push	r10
    1d4e:	bf 92       	push	r11
    1d50:	cf 92       	push	r12
    1d52:	df 92       	push	r13
    1d54:	ef 92       	push	r14
    1d56:	ff 92       	push	r15
    1d58:	0f 93       	push	r16
    1d5a:	1f 93       	push	r17
    1d5c:	cf 93       	push	r28
    1d5e:	df 93       	push	r29
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
    1d64:	6c 97       	sbiw	r28, 0x1c	; 28
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	de bf       	out	0x3e, r29	; 62
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	cd bf       	out	0x3d, r28	; 61
    // To use PORTF disable JTAG with writing JTD bit twice within four cycles.
    MCUCR |= (1<<JTD);
    1d70:	85 b7       	in	r24, 0x35	; 53
    1d72:	80 68       	ori	r24, 0x80	; 128
    1d74:	85 bf       	out	0x35, r24	; 53
    MCUCR |= (1<<JTD);
    1d76:	85 b7       	in	r24, 0x35	; 53
    1d78:	80 68       	ori	r24, 0x80	; 128
    1d7a:	85 bf       	out	0x35, r24	; 53


    // initialize row and col
    unselect_rows();
    1d7c:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <unselect_rows>
    1d80:	9e 01       	movw	r18, r28
    1d82:	2f 5f       	subi	r18, 0xFF	; 255
    1d84:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t matrix_cols(void)
{
    return MATRIX_COLS;
}

void matrix_init(void)
    1d86:	4e 01       	movw	r8, r28
    1d88:	8d e1       	ldi	r24, 0x1D	; 29
    1d8a:	88 0e       	add	r8, r24
    1d8c:	91 1c       	adc	r9, r1
    return count;
}

static void init_cols(void)
{
    int B = 0, C = 0, D = 0, E = 0, F = 0;
    1d8e:	60 e0       	ldi	r22, 0x00	; 0
    1d90:	70 e0       	ldi	r23, 0x00	; 0
    1d92:	00 e0       	ldi	r16, 0x00	; 0
    1d94:	10 e0       	ldi	r17, 0x00	; 0
    1d96:	e1 2c       	mov	r14, r1
    1d98:	f1 2c       	mov	r15, r1
    1d9a:	c1 2c       	mov	r12, r1
    1d9c:	d1 2c       	mov	r13, r1
    1d9e:	a1 2c       	mov	r10, r1
    1da0:	b1 2c       	mov	r11, r1

#if DIODE_DIRECTION == COL2ROW
    for(int x = 0; x < MATRIX_COLS; x++) {
        int col = COLS[x];
    1da2:	9c e1       	ldi	r25, 0x1C	; 28
    1da4:	79 2e       	mov	r7, r25
    1da6:	62 2e       	mov	r6, r18
    1da8:	53 2e       	mov	r5, r19
        } else if ((col & 0xF0) == 0x40) { 
            D |= (1<<(col & 0x0F)); 
        } else if ((col & 0xF0) == 0x50) { 
            E |= (1<<(col & 0x0F)); 
        } else if ((col & 0xF0) == 0x60) { 
            F |= (1<<(col & 0x0F)); 
    1daa:	41 e0       	ldi	r20, 0x01	; 1
    1dac:	50 e0       	ldi	r21, 0x00	; 0
{
    int B = 0, C = 0, D = 0, E = 0, F = 0;

#if DIODE_DIRECTION == COL2ROW
    for(int x = 0; x < MATRIX_COLS; x++) {
        int col = COLS[x];
    1dae:	e1 e2       	ldi	r30, 0x21	; 33
    1db0:	f1 e0       	ldi	r31, 0x01	; 1
    1db2:	a6 2d       	mov	r26, r6
    1db4:	b5 2d       	mov	r27, r5
    1db6:	87 2d       	mov	r24, r7
    1db8:	01 90       	ld	r0, Z+
    1dba:	0d 92       	st	X+, r0
    1dbc:	8a 95       	dec	r24
    1dbe:	e1 f7       	brne	.-8      	; 0x1db8 <matrix_init+0x76>
    1dc0:	f9 01       	movw	r30, r18
    1dc2:	81 91       	ld	r24, Z+
    1dc4:	91 91       	ld	r25, Z+
    1dc6:	9f 01       	movw	r18, r30
#else
    for(int x = 0; x < MATRIX_ROWS; x++) {
        int col = ROWS[x];
#endif
        if ((col & 0xF0) == 0x20) { 
    1dc8:	fc 01       	movw	r30, r24
    1dca:	e0 7f       	andi	r30, 0xF0	; 240
    1dcc:	ff 27       	eor	r31, r31
    1dce:	e0 32       	cpi	r30, 0x20	; 32
    1dd0:	f1 05       	cpc	r31, r1
    1dd2:	59 f4       	brne	.+22     	; 0x1dea <matrix_init+0xa8>
            B |= (1<<(col & 0x0F)); 
    1dd4:	8f 70       	andi	r24, 0x0F	; 15
    1dd6:	99 27       	eor	r25, r25
    1dd8:	fa 01       	movw	r30, r20
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <matrix_init+0x9e>
    1ddc:	ee 0f       	add	r30, r30
    1dde:	ff 1f       	adc	r31, r31
    1de0:	8a 95       	dec	r24
    1de2:	e2 f7       	brpl	.-8      	; 0x1ddc <matrix_init+0x9a>
    1de4:	ae 2a       	or	r10, r30
    1de6:	bf 2a       	or	r11, r31
    1de8:	37 c0       	rjmp	.+110    	; 0x1e58 <matrix_init+0x116>
        } else if ((col & 0xF0) == 0x30) { 
    1dea:	e0 33       	cpi	r30, 0x30	; 48
    1dec:	f1 05       	cpc	r31, r1
    1dee:	59 f4       	brne	.+22     	; 0x1e06 <matrix_init+0xc4>
            C |= (1<<(col & 0x0F)); 
    1df0:	8f 70       	andi	r24, 0x0F	; 15
    1df2:	99 27       	eor	r25, r25
    1df4:	fa 01       	movw	r30, r20
    1df6:	02 c0       	rjmp	.+4      	; 0x1dfc <matrix_init+0xba>
    1df8:	ee 0f       	add	r30, r30
    1dfa:	ff 1f       	adc	r31, r31
    1dfc:	8a 95       	dec	r24
    1dfe:	e2 f7       	brpl	.-8      	; 0x1df8 <matrix_init+0xb6>
    1e00:	ce 2a       	or	r12, r30
    1e02:	df 2a       	or	r13, r31
    1e04:	29 c0       	rjmp	.+82     	; 0x1e58 <matrix_init+0x116>
        } else if ((col & 0xF0) == 0x40) { 
    1e06:	e0 34       	cpi	r30, 0x40	; 64
    1e08:	f1 05       	cpc	r31, r1
    1e0a:	59 f4       	brne	.+22     	; 0x1e22 <matrix_init+0xe0>
            D |= (1<<(col & 0x0F)); 
    1e0c:	8f 70       	andi	r24, 0x0F	; 15
    1e0e:	99 27       	eor	r25, r25
    1e10:	fa 01       	movw	r30, r20
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <matrix_init+0xd6>
    1e14:	ee 0f       	add	r30, r30
    1e16:	ff 1f       	adc	r31, r31
    1e18:	8a 95       	dec	r24
    1e1a:	e2 f7       	brpl	.-8      	; 0x1e14 <matrix_init+0xd2>
    1e1c:	ee 2a       	or	r14, r30
    1e1e:	ff 2a       	or	r15, r31
    1e20:	1b c0       	rjmp	.+54     	; 0x1e58 <matrix_init+0x116>
        } else if ((col & 0xF0) == 0x50) { 
    1e22:	e0 35       	cpi	r30, 0x50	; 80
    1e24:	f1 05       	cpc	r31, r1
    1e26:	59 f4       	brne	.+22     	; 0x1e3e <matrix_init+0xfc>
            E |= (1<<(col & 0x0F)); 
    1e28:	8f 70       	andi	r24, 0x0F	; 15
    1e2a:	99 27       	eor	r25, r25
    1e2c:	fa 01       	movw	r30, r20
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <matrix_init+0xf2>
    1e30:	ee 0f       	add	r30, r30
    1e32:	ff 1f       	adc	r31, r31
    1e34:	8a 95       	dec	r24
    1e36:	e2 f7       	brpl	.-8      	; 0x1e30 <matrix_init+0xee>
    1e38:	0e 2b       	or	r16, r30
    1e3a:	1f 2b       	or	r17, r31
    1e3c:	0d c0       	rjmp	.+26     	; 0x1e58 <matrix_init+0x116>
        } else if ((col & 0xF0) == 0x60) { 
    1e3e:	e0 36       	cpi	r30, 0x60	; 96
    1e40:	f1 05       	cpc	r31, r1
    1e42:	51 f4       	brne	.+20     	; 0x1e58 <matrix_init+0x116>
            F |= (1<<(col & 0x0F)); 
    1e44:	8f 70       	andi	r24, 0x0F	; 15
    1e46:	99 27       	eor	r25, r25
    1e48:	fa 01       	movw	r30, r20
    1e4a:	02 c0       	rjmp	.+4      	; 0x1e50 <matrix_init+0x10e>
    1e4c:	ee 0f       	add	r30, r30
    1e4e:	ff 1f       	adc	r31, r31
    1e50:	8a 95       	dec	r24
    1e52:	e2 f7       	brpl	.-8      	; 0x1e4c <matrix_init+0x10a>
    1e54:	6e 2b       	or	r22, r30
    1e56:	7f 2b       	or	r23, r31
static void init_cols(void)
{
    int B = 0, C = 0, D = 0, E = 0, F = 0;

#if DIODE_DIRECTION == COL2ROW
    for(int x = 0; x < MATRIX_COLS; x++) {
    1e58:	28 15       	cp	r18, r8
    1e5a:	39 05       	cpc	r19, r9
    1e5c:	09 f0       	breq	.+2      	; 0x1e60 <matrix_init+0x11e>
    1e5e:	a7 cf       	rjmp	.-178    	; 0x1dae <matrix_init+0x6c>
            E |= (1<<(col & 0x0F)); 
        } else if ((col & 0xF0) == 0x60) { 
            F |= (1<<(col & 0x0F)); 
        } 
    }
    DDRB &= ~(B); PORTB |= (B);
    1e60:	94 b1       	in	r25, 0x04	; 4
    1e62:	8a 2d       	mov	r24, r10
    1e64:	80 95       	com	r24
    1e66:	89 23       	and	r24, r25
    1e68:	84 b9       	out	0x04, r24	; 4
    1e6a:	85 b1       	in	r24, 0x05	; 5
    1e6c:	8a 29       	or	r24, r10
    1e6e:	85 b9       	out	0x05, r24	; 5
    DDRC &= ~(C); PORTC |= (C); 
    1e70:	97 b1       	in	r25, 0x07	; 7
    1e72:	8c 2d       	mov	r24, r12
    1e74:	80 95       	com	r24
    1e76:	89 23       	and	r24, r25
    1e78:	87 b9       	out	0x07, r24	; 7
    1e7a:	88 b1       	in	r24, 0x08	; 8
    1e7c:	8c 29       	or	r24, r12
    1e7e:	88 b9       	out	0x08, r24	; 8
    DDRD &= ~(D); PORTD |= (D);
    1e80:	9a b1       	in	r25, 0x0a	; 10
    1e82:	8e 2d       	mov	r24, r14
    1e84:	80 95       	com	r24
    1e86:	89 23       	and	r24, r25
    1e88:	8a b9       	out	0x0a, r24	; 10
    1e8a:	8b b1       	in	r24, 0x0b	; 11
    1e8c:	8e 29       	or	r24, r14
    1e8e:	8b b9       	out	0x0b, r24	; 11
    DDRE &= ~(E); PORTE |= (E);
    1e90:	9d b1       	in	r25, 0x0d	; 13
    1e92:	80 2f       	mov	r24, r16
    1e94:	80 95       	com	r24
    1e96:	89 23       	and	r24, r25
    1e98:	8d b9       	out	0x0d, r24	; 13
    1e9a:	8e b1       	in	r24, 0x0e	; 14
    1e9c:	80 2b       	or	r24, r16
    1e9e:	8e b9       	out	0x0e, r24	; 14
    DDRF &= ~(F); PORTF |= (F);
    1ea0:	90 b3       	in	r25, 0x10	; 16
    1ea2:	86 2f       	mov	r24, r22
    1ea4:	80 95       	com	r24
    1ea6:	89 23       	and	r24, r25
    1ea8:	80 bb       	out	0x10, r24	; 16
    1eaa:	81 b3       	in	r24, 0x11	; 17
    1eac:	86 2b       	or	r24, r22
    1eae:	81 bb       	out	0x11, r24	; 17
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
    1eb0:	10 92 7a 01 	sts	0x017A, r1
    1eb4:	10 92 79 01 	sts	0x0179, r1
        matrix_debouncing[i] = 0;
    1eb8:	10 92 84 01 	sts	0x0184, r1
    1ebc:	10 92 83 01 	sts	0x0183, r1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
    1ec0:	10 92 7c 01 	sts	0x017C, r1
    1ec4:	10 92 7b 01 	sts	0x017B, r1
        matrix_debouncing[i] = 0;
    1ec8:	10 92 86 01 	sts	0x0186, r1
    1ecc:	10 92 85 01 	sts	0x0185, r1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
    1ed0:	10 92 7e 01 	sts	0x017E, r1
    1ed4:	10 92 7d 01 	sts	0x017D, r1
        matrix_debouncing[i] = 0;
    1ed8:	10 92 88 01 	sts	0x0188, r1
    1edc:	10 92 87 01 	sts	0x0187, r1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
    1ee0:	10 92 80 01 	sts	0x0180, r1
    1ee4:	10 92 7f 01 	sts	0x017F, r1
        matrix_debouncing[i] = 0;
    1ee8:	10 92 8a 01 	sts	0x018A, r1
    1eec:	10 92 89 01 	sts	0x0189, r1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
    1ef0:	10 92 82 01 	sts	0x0182, r1
    1ef4:	10 92 81 01 	sts	0x0181, r1
        matrix_debouncing[i] = 0;
    1ef8:	10 92 8c 01 	sts	0x018C, r1
    1efc:	10 92 8b 01 	sts	0x018B, r1
    }

    if (matrix_init_kb) {
    1f00:	86 ef       	ldi	r24, 0xF6	; 246
    1f02:	94 e0       	ldi	r25, 0x04	; 4
    1f04:	89 2b       	or	r24, r25
    1f06:	b9 f0       	breq	.+46     	; 0x1f36 <matrix_init+0x1f4>
        (*matrix_init_kb)();
    }
}
    1f08:	6c 96       	adiw	r28, 0x1c	; 28
    1f0a:	0f b6       	in	r0, 0x3f	; 63
    1f0c:	f8 94       	cli
    1f0e:	de bf       	out	0x3e, r29	; 62
    1f10:	0f be       	out	0x3f, r0	; 63
    1f12:	cd bf       	out	0x3d, r28	; 61
    1f14:	df 91       	pop	r29
    1f16:	cf 91       	pop	r28
    1f18:	1f 91       	pop	r17
    1f1a:	0f 91       	pop	r16
    1f1c:	ff 90       	pop	r15
    1f1e:	ef 90       	pop	r14
    1f20:	df 90       	pop	r13
    1f22:	cf 90       	pop	r12
    1f24:	bf 90       	pop	r11
    1f26:	af 90       	pop	r10
    1f28:	9f 90       	pop	r9
    1f2a:	8f 90       	pop	r8
    1f2c:	7f 90       	pop	r7
    1f2e:	6f 90       	pop	r6
    1f30:	5f 90       	pop	r5
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }

    if (matrix_init_kb) {
        (*matrix_init_kb)();
    1f32:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <matrix_init_kb>
    }
}
    1f36:	6c 96       	adiw	r28, 0x1c	; 28
    1f38:	0f b6       	in	r0, 0x3f	; 63
    1f3a:	f8 94       	cli
    1f3c:	de bf       	out	0x3e, r29	; 62
    1f3e:	0f be       	out	0x3f, r0	; 63
    1f40:	cd bf       	out	0x3d, r28	; 61
    1f42:	df 91       	pop	r29
    1f44:	cf 91       	pop	r28
    1f46:	1f 91       	pop	r17
    1f48:	0f 91       	pop	r16
    1f4a:	ff 90       	pop	r15
    1f4c:	ef 90       	pop	r14
    1f4e:	df 90       	pop	r13
    1f50:	cf 90       	pop	r12
    1f52:	bf 90       	pop	r11
    1f54:	af 90       	pop	r10
    1f56:	9f 90       	pop	r9
    1f58:	8f 90       	pop	r8
    1f5a:	7f 90       	pop	r7
    1f5c:	6f 90       	pop	r6
    1f5e:	5f 90       	pop	r5
    1f60:	08 95       	ret

00001f62 <matrix_scan>:


uint8_t matrix_scan(void)
{
    1f62:	5f 92       	push	r5
    1f64:	6f 92       	push	r6
    1f66:	7f 92       	push	r7
    1f68:	8f 92       	push	r8
    1f6a:	9f 92       	push	r9
    1f6c:	af 92       	push	r10
    1f6e:	bf 92       	push	r11
    1f70:	cf 92       	push	r12
    1f72:	df 92       	push	r13
    1f74:	ef 92       	push	r14
    1f76:	ff 92       	push	r15
    1f78:	0f 93       	push	r16
    1f7a:	1f 93       	push	r17
    1f7c:	cf 93       	push	r28
    1f7e:	df 93       	push	r29
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
    1f84:	a6 97       	sbiw	r28, 0x26	; 38
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	de bf       	out	0x3e, r29	; 62
    1f8c:	0f be       	out	0x3f, r0	; 63
    1f8e:	cd bf       	out	0x3d, r28	; 61
    1f90:	7e 01       	movw	r14, r28
    1f92:	4d e1       	ldi	r20, 0x1D	; 29
    1f94:	e4 0e       	add	r14, r20
    1f96:	f1 1c       	adc	r15, r1
    1f98:	23 e8       	ldi	r18, 0x83	; 131
    1f9a:	c2 2e       	mov	r12, r18
    1f9c:	21 e0       	ldi	r18, 0x01	; 1
    1f9e:	d2 2e       	mov	r13, r18
        (*matrix_init_kb)();
    }
}


uint8_t matrix_scan(void)
    1fa0:	5e 01       	movw	r10, r28
    1fa2:	57 e2       	ldi	r21, 0x27	; 39
    1fa4:	a5 0e       	add	r10, r21
    1fa6:	b1 1c       	adc	r11, r1

static void select_row(uint8_t row)
{

#if DIODE_DIRECTION == COL2ROW
    int row_pin = ROWS[row];
    1fa8:	3a e0       	ldi	r19, 0x0A	; 10
    1faa:	53 2e       	mov	r5, r19
    1fac:	47 01       	movw	r8, r14
        PORTD &= ~(1<<(row_pin & 0x0F));
    } else if ((row_pin & 0xF0) == 0x50) { 
        DDRE  |= (1<<(row_pin & 0x0F));
        PORTE &= ~(1<<(row_pin & 0x0F));
    } else if ((row_pin & 0xF0) == 0x60) { 
        DDRF  |= (1<<(row_pin & 0x0F));
    1fae:	01 e0       	ldi	r16, 0x01	; 1
    1fb0:	10 e0       	ldi	r17, 0x00	; 0
{
    matrix_row_t result = 0;

#if DIODE_DIRECTION == COL2ROW
    for(int x = 0; x < MATRIX_COLS; x++) {     
        int col = COLS[x];
    1fb2:	4c e1       	ldi	r20, 0x1C	; 28
    1fb4:	64 2e       	mov	r6, r20
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
            }
            debouncing = DEBOUNCE;
    1fb6:	55 e0       	ldi	r21, 0x05	; 5
    1fb8:	75 2e       	mov	r7, r21

static void select_row(uint8_t row)
{

#if DIODE_DIRECTION == COL2ROW
    int row_pin = ROWS[row];
    1fba:	e7 e1       	ldi	r30, 0x17	; 23
    1fbc:	f1 e0       	ldi	r31, 0x01	; 1
    1fbe:	d4 01       	movw	r26, r8
    1fc0:	85 2d       	mov	r24, r5
    1fc2:	01 90       	ld	r0, Z+
    1fc4:	0d 92       	st	X+, r0
    1fc6:	8a 95       	dec	r24
    1fc8:	e1 f7       	brne	.-8      	; 0x1fc2 <matrix_scan+0x60>
    1fca:	f7 01       	movw	r30, r14
    1fcc:	81 91       	ld	r24, Z+
    1fce:	91 91       	ld	r25, Z+
    1fd0:	7f 01       	movw	r14, r30
#else
    int row_pin = COLS[row];
#endif

    if ((row_pin & 0xF0) == 0x20) { 
    1fd2:	9c 01       	movw	r18, r24
    1fd4:	20 7f       	andi	r18, 0xF0	; 240
    1fd6:	33 27       	eor	r19, r19
    1fd8:	20 32       	cpi	r18, 0x20	; 32
    1fda:	31 05       	cpc	r19, r1
    1fdc:	89 f4       	brne	.+34     	; 0x2000 <matrix_scan+0x9e>
        DDRB  |= (1<<(row_pin & 0x0F));
    1fde:	24 b1       	in	r18, 0x04	; 4
    1fe0:	8f 70       	andi	r24, 0x0F	; 15
    1fe2:	99 27       	eor	r25, r25
    1fe4:	a8 01       	movw	r20, r16
    1fe6:	02 c0       	rjmp	.+4      	; 0x1fec <matrix_scan+0x8a>
    1fe8:	44 0f       	add	r20, r20
    1fea:	55 1f       	adc	r21, r21
    1fec:	8a 95       	dec	r24
    1fee:	e2 f7       	brpl	.-8      	; 0x1fe8 <matrix_scan+0x86>
    1ff0:	ca 01       	movw	r24, r20
    1ff2:	24 2b       	or	r18, r20
    1ff4:	24 b9       	out	0x04, r18	; 4
        PORTB &= ~(1<<(row_pin & 0x0F));
    1ff6:	95 b1       	in	r25, 0x05	; 5
    1ff8:	80 95       	com	r24
    1ffa:	89 23       	and	r24, r25
    1ffc:	85 b9       	out	0x05, r24	; 5
    1ffe:	4f c0       	rjmp	.+158    	; 0x209e <matrix_scan+0x13c>
    } else if ((row_pin & 0xF0) == 0x30) { 
    2000:	20 33       	cpi	r18, 0x30	; 48
    2002:	31 05       	cpc	r19, r1
    2004:	89 f4       	brne	.+34     	; 0x2028 <matrix_scan+0xc6>
        DDRC  |= (1<<(row_pin & 0x0F));
    2006:	27 b1       	in	r18, 0x07	; 7
    2008:	8f 70       	andi	r24, 0x0F	; 15
    200a:	99 27       	eor	r25, r25
    200c:	f8 01       	movw	r30, r16
    200e:	02 c0       	rjmp	.+4      	; 0x2014 <matrix_scan+0xb2>
    2010:	ee 0f       	add	r30, r30
    2012:	ff 1f       	adc	r31, r31
    2014:	8a 95       	dec	r24
    2016:	e2 f7       	brpl	.-8      	; 0x2010 <matrix_scan+0xae>
    2018:	cf 01       	movw	r24, r30
    201a:	2e 2b       	or	r18, r30
    201c:	27 b9       	out	0x07, r18	; 7
        PORTC &= ~(1<<(row_pin & 0x0F));
    201e:	98 b1       	in	r25, 0x08	; 8
    2020:	80 95       	com	r24
    2022:	89 23       	and	r24, r25
    2024:	88 b9       	out	0x08, r24	; 8
    2026:	3b c0       	rjmp	.+118    	; 0x209e <matrix_scan+0x13c>
    } else if ((row_pin & 0xF0) == 0x40) { 
    2028:	20 34       	cpi	r18, 0x40	; 64
    202a:	31 05       	cpc	r19, r1
    202c:	89 f4       	brne	.+34     	; 0x2050 <matrix_scan+0xee>
        DDRD  |= (1<<(row_pin & 0x0F));
    202e:	2a b1       	in	r18, 0x0a	; 10
    2030:	8f 70       	andi	r24, 0x0F	; 15
    2032:	99 27       	eor	r25, r25
    2034:	a8 01       	movw	r20, r16
    2036:	02 c0       	rjmp	.+4      	; 0x203c <matrix_scan+0xda>
    2038:	44 0f       	add	r20, r20
    203a:	55 1f       	adc	r21, r21
    203c:	8a 95       	dec	r24
    203e:	e2 f7       	brpl	.-8      	; 0x2038 <matrix_scan+0xd6>
    2040:	ca 01       	movw	r24, r20
    2042:	24 2b       	or	r18, r20
    2044:	2a b9       	out	0x0a, r18	; 10
        PORTD &= ~(1<<(row_pin & 0x0F));
    2046:	9b b1       	in	r25, 0x0b	; 11
    2048:	80 95       	com	r24
    204a:	89 23       	and	r24, r25
    204c:	8b b9       	out	0x0b, r24	; 11
    204e:	27 c0       	rjmp	.+78     	; 0x209e <matrix_scan+0x13c>
    } else if ((row_pin & 0xF0) == 0x50) { 
    2050:	20 35       	cpi	r18, 0x50	; 80
    2052:	31 05       	cpc	r19, r1
    2054:	89 f4       	brne	.+34     	; 0x2078 <matrix_scan+0x116>
        DDRE  |= (1<<(row_pin & 0x0F));
    2056:	2d b1       	in	r18, 0x0d	; 13
    2058:	8f 70       	andi	r24, 0x0F	; 15
    205a:	99 27       	eor	r25, r25
    205c:	f8 01       	movw	r30, r16
    205e:	02 c0       	rjmp	.+4      	; 0x2064 <matrix_scan+0x102>
    2060:	ee 0f       	add	r30, r30
    2062:	ff 1f       	adc	r31, r31
    2064:	8a 95       	dec	r24
    2066:	e2 f7       	brpl	.-8      	; 0x2060 <matrix_scan+0xfe>
    2068:	cf 01       	movw	r24, r30
    206a:	2e 2b       	or	r18, r30
    206c:	2d b9       	out	0x0d, r18	; 13
        PORTE &= ~(1<<(row_pin & 0x0F));
    206e:	9e b1       	in	r25, 0x0e	; 14
    2070:	80 95       	com	r24
    2072:	89 23       	and	r24, r25
    2074:	8e b9       	out	0x0e, r24	; 14
    2076:	13 c0       	rjmp	.+38     	; 0x209e <matrix_scan+0x13c>
    } else if ((row_pin & 0xF0) == 0x60) { 
    2078:	20 36       	cpi	r18, 0x60	; 96
    207a:	31 05       	cpc	r19, r1
    207c:	81 f4       	brne	.+32     	; 0x209e <matrix_scan+0x13c>
        DDRF  |= (1<<(row_pin & 0x0F));
    207e:	20 b3       	in	r18, 0x10	; 16
    2080:	8f 70       	andi	r24, 0x0F	; 15
    2082:	99 27       	eor	r25, r25
    2084:	a8 01       	movw	r20, r16
    2086:	02 c0       	rjmp	.+4      	; 0x208c <matrix_scan+0x12a>
    2088:	44 0f       	add	r20, r20
    208a:	55 1f       	adc	r21, r21
    208c:	8a 95       	dec	r24
    208e:	e2 f7       	brpl	.-8      	; 0x2088 <matrix_scan+0x126>
    2090:	ca 01       	movw	r24, r20
    2092:	24 2b       	or	r18, r20
    2094:	20 bb       	out	0x10, r18	; 16
        PORTF &= ~(1<<(row_pin & 0x0F));
    2096:	91 b3       	in	r25, 0x11	; 17
    2098:	80 95       	com	r24
    209a:	89 23       	and	r24, r25
    209c:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    209e:	50 ea       	ldi	r21, 0xA0	; 160
    20a0:	5a 95       	dec	r21
    20a2:	f1 f7       	brne	.-4      	; 0x20a0 <matrix_scan+0x13e>
    20a4:	be 01       	movw	r22, r28
    20a6:	6f 5f       	subi	r22, 0xFF	; 255
    20a8:	7f 4f       	sbci	r23, 0xFF	; 255
    DDRF &= ~(F); PORTF |= (F);
}

static matrix_row_t read_cols(void)
{
    matrix_row_t result = 0;
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	90 e0       	ldi	r25, 0x00	; 0

#if DIODE_DIRECTION == COL2ROW
    for(int x = 0; x < MATRIX_COLS; x++) {     
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
        int col = COLS[x];
    20b2:	e1 e2       	ldi	r30, 0x21	; 33
    20b4:	f1 e0       	ldi	r31, 0x01	; 1
    20b6:	de 01       	movw	r26, r28
    20b8:	11 96       	adiw	r26, 0x01	; 1
    20ba:	46 2d       	mov	r20, r6
    20bc:	01 90       	ld	r0, Z+
    20be:	0d 92       	st	X+, r0
    20c0:	4a 95       	dec	r20
    20c2:	e1 f7       	brne	.-8      	; 0x20bc <matrix_scan+0x15a>
    20c4:	fb 01       	movw	r30, r22
    20c6:	41 91       	ld	r20, Z+
    20c8:	51 91       	ld	r21, Z+
    20ca:	bf 01       	movw	r22, r30
#else
    for(int x = 0; x < MATRIX_ROWS; x++) {
        int col = ROWS[x];
#endif

        if ((col & 0xF0) == 0x20) { 
    20cc:	fa 01       	movw	r30, r20
    20ce:	e0 7f       	andi	r30, 0xF0	; 240
    20d0:	ff 27       	eor	r31, r31
    20d2:	e0 32       	cpi	r30, 0x20	; 32
    20d4:	f1 05       	cpc	r31, r1
    20d6:	11 f4       	brne	.+4      	; 0x20dc <matrix_scan+0x17a>
            result |= (PINB&(1<<(col & 0x0F)) ? 0 : (1<<x)); 
    20d8:	e3 b1       	in	r30, 0x03	; 3
    20da:	13 c0       	rjmp	.+38     	; 0x2102 <matrix_scan+0x1a0>
        } else if ((col & 0xF0) == 0x30) { 
    20dc:	e0 33       	cpi	r30, 0x30	; 48
    20de:	f1 05       	cpc	r31, r1
    20e0:	11 f4       	brne	.+4      	; 0x20e6 <matrix_scan+0x184>
            result |= (PINC&(1<<(col & 0x0F)) ? 0 : (1<<x)); 
    20e2:	e6 b1       	in	r30, 0x06	; 6
    20e4:	0e c0       	rjmp	.+28     	; 0x2102 <matrix_scan+0x1a0>
        } else if ((col & 0xF0) == 0x40) { 
    20e6:	e0 34       	cpi	r30, 0x40	; 64
    20e8:	f1 05       	cpc	r31, r1
    20ea:	11 f4       	brne	.+4      	; 0x20f0 <matrix_scan+0x18e>
            result |= (PIND&(1<<(col & 0x0F)) ? 0 : (1<<x)); 
    20ec:	e9 b1       	in	r30, 0x09	; 9
    20ee:	09 c0       	rjmp	.+18     	; 0x2102 <matrix_scan+0x1a0>
        } else if ((col & 0xF0) == 0x50) { 
    20f0:	e0 35       	cpi	r30, 0x50	; 80
    20f2:	f1 05       	cpc	r31, r1
    20f4:	11 f4       	brne	.+4      	; 0x20fa <matrix_scan+0x198>
            result |= (PINE&(1<<(col & 0x0F)) ? 0 : (1<<x)); 
    20f6:	ec b1       	in	r30, 0x0c	; 12
    20f8:	04 c0       	rjmp	.+8      	; 0x2102 <matrix_scan+0x1a0>
        } else if ((col & 0xF0) == 0x60) { 
    20fa:	e0 36       	cpi	r30, 0x60	; 96
    20fc:	f1 05       	cpc	r31, r1
    20fe:	b9 f4       	brne	.+46     	; 0x212e <matrix_scan+0x1cc>
            result |= (PINF&(1<<(col & 0x0F)) ? 0 : (1<<x)); 
    2100:	ef b1       	in	r30, 0x0f	; 15
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	4f 70       	andi	r20, 0x0F	; 15
    2106:	55 27       	eor	r21, r21
    2108:	02 c0       	rjmp	.+4      	; 0x210e <matrix_scan+0x1ac>
    210a:	f5 95       	asr	r31
    210c:	e7 95       	ror	r30
    210e:	4a 95       	dec	r20
    2110:	e2 f7       	brpl	.-8      	; 0x210a <matrix_scan+0x1a8>
    2112:	e0 fd       	sbrc	r30, 0
    2114:	08 c0       	rjmp	.+16     	; 0x2126 <matrix_scan+0x1c4>
    2116:	a8 01       	movw	r20, r16
    2118:	02 2e       	mov	r0, r18
    211a:	02 c0       	rjmp	.+4      	; 0x2120 <matrix_scan+0x1be>
    211c:	44 0f       	add	r20, r20
    211e:	55 1f       	adc	r21, r21
    2120:	0a 94       	dec	r0
    2122:	e2 f7       	brpl	.-8      	; 0x211c <matrix_scan+0x1ba>
    2124:	02 c0       	rjmp	.+4      	; 0x212a <matrix_scan+0x1c8>
    2126:	40 e0       	ldi	r20, 0x00	; 0
    2128:	50 e0       	ldi	r21, 0x00	; 0
    212a:	84 2b       	or	r24, r20
    212c:	95 2b       	or	r25, r21
static matrix_row_t read_cols(void)
{
    matrix_row_t result = 0;

#if DIODE_DIRECTION == COL2ROW
    for(int x = 0; x < MATRIX_COLS; x++) {     
    212e:	2f 5f       	subi	r18, 0xFF	; 255
    2130:	3f 4f       	sbci	r19, 0xFF	; 255
    2132:	2e 30       	cpi	r18, 0x0E	; 14
    2134:	31 05       	cpc	r19, r1
    2136:	09 f0       	breq	.+2      	; 0x213a <matrix_scan+0x1d8>
    2138:	bc cf       	rjmp	.-136    	; 0x20b2 <matrix_scan+0x150>
#if DIODE_DIRECTION == COL2ROW
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
    213a:	f6 01       	movw	r30, r12
    213c:	20 81       	ld	r18, Z
    213e:	31 81       	ldd	r19, Z+1	; 0x01
    2140:	28 17       	cp	r18, r24
    2142:	39 07       	cpc	r19, r25
    2144:	21 f0       	breq	.+8      	; 0x214e <matrix_scan+0x1ec>
            matrix_debouncing[i] = cols;
    2146:	91 83       	std	Z+1, r25	; 0x01
    2148:	80 83       	st	Z, r24
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
            }
            debouncing = DEBOUNCE;
    214a:	70 92 02 01 	sts	0x0102, r7
        }
        unselect_rows();
    214e:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <unselect_rows>
    2152:	f2 e0       	ldi	r31, 0x02	; 2
    2154:	cf 0e       	add	r12, r31
    2156:	d1 1c       	adc	r13, r1

uint8_t matrix_scan(void)
{

#if DIODE_DIRECTION == COL2ROW
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    2158:	ea 14       	cp	r14, r10
    215a:	fb 04       	cpc	r15, r11
    215c:	09 f0       	breq	.+2      	; 0x2160 <matrix_scan+0x1fe>
    215e:	2d cf       	rjmp	.-422    	; 0x1fba <matrix_scan+0x58>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
    2160:	80 91 02 01 	lds	r24, 0x0102
    2164:	88 23       	and	r24, r24
    2166:	a1 f1       	breq	.+104    	; 0x21d0 <matrix_scan+0x26e>
        if (--debouncing) {
    2168:	81 50       	subi	r24, 0x01	; 1
    216a:	80 93 02 01 	sts	0x0102, r24
    216e:	88 23       	and	r24, r24
    2170:	39 f0       	breq	.+14     	; 0x2180 <matrix_scan+0x21e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2172:	8f e9       	ldi	r24, 0x9F	; 159
    2174:	9f e0       	ldi	r25, 0x0F	; 15
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	f1 f7       	brne	.-4      	; 0x2176 <matrix_scan+0x214>
    217a:	00 c0       	rjmp	.+0      	; 0x217c <matrix_scan+0x21a>
    217c:	00 00       	nop
    217e:	28 c0       	rjmp	.+80     	; 0x21d0 <matrix_scan+0x26e>
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
    2180:	80 91 83 01 	lds	r24, 0x0183
    2184:	90 91 84 01 	lds	r25, 0x0184
    2188:	90 93 7a 01 	sts	0x017A, r25
    218c:	80 93 79 01 	sts	0x0179, r24
    2190:	80 91 85 01 	lds	r24, 0x0185
    2194:	90 91 86 01 	lds	r25, 0x0186
    2198:	90 93 7c 01 	sts	0x017C, r25
    219c:	80 93 7b 01 	sts	0x017B, r24
    21a0:	80 91 87 01 	lds	r24, 0x0187
    21a4:	90 91 88 01 	lds	r25, 0x0188
    21a8:	90 93 7e 01 	sts	0x017E, r25
    21ac:	80 93 7d 01 	sts	0x017D, r24
    21b0:	80 91 89 01 	lds	r24, 0x0189
    21b4:	90 91 8a 01 	lds	r25, 0x018A
    21b8:	90 93 80 01 	sts	0x0180, r25
    21bc:	80 93 7f 01 	sts	0x017F, r24
    21c0:	80 91 8b 01 	lds	r24, 0x018B
    21c4:	90 91 8c 01 	lds	r25, 0x018C
    21c8:	90 93 82 01 	sts	0x0182, r25
    21cc:	80 93 81 01 	sts	0x0181, r24
        }
        matrix[y] = row;
    }
#endif

    if (matrix_scan_kb) {
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	95 e0       	ldi	r25, 0x05	; 5
    21d4:	89 2b       	or	r24, r25
    21d6:	11 f0       	breq	.+4      	; 0x21dc <matrix_scan+0x27a>
        (*matrix_scan_kb)();
    21d8:	0e 94 01 05 	call	0xa02	; 0xa02 <matrix_scan_kb>
    }

    return 1;
}
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	a6 96       	adiw	r28, 0x26	; 38
    21e0:	0f b6       	in	r0, 0x3f	; 63
    21e2:	f8 94       	cli
    21e4:	de bf       	out	0x3e, r29	; 62
    21e6:	0f be       	out	0x3f, r0	; 63
    21e8:	cd bf       	out	0x3d, r28	; 61
    21ea:	df 91       	pop	r29
    21ec:	cf 91       	pop	r28
    21ee:	1f 91       	pop	r17
    21f0:	0f 91       	pop	r16
    21f2:	ff 90       	pop	r15
    21f4:	ef 90       	pop	r14
    21f6:	df 90       	pop	r13
    21f8:	cf 90       	pop	r12
    21fa:	bf 90       	pop	r11
    21fc:	af 90       	pop	r10
    21fe:	9f 90       	pop	r9
    2200:	8f 90       	pop	r8
    2202:	7f 90       	pop	r7
    2204:	6f 90       	pop	r6
    2206:	5f 90       	pop	r5
    2208:	08 95       	ret

0000220a <matrix_get_row>:
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    220a:	e8 2f       	mov	r30, r24
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	ee 0f       	add	r30, r30
    2210:	ff 1f       	adc	r31, r31
    2212:	e7 58       	subi	r30, 0x87	; 135
    2214:	fe 4f       	sbci	r31, 0xFE	; 254
}
    2216:	80 81       	ld	r24, Z
    2218:	91 81       	ldd	r25, Z+1	; 0x01
    221a:	08 95       	ret

0000221c <matrix_print>:

void matrix_print(void)
{
    221c:	08 95       	ret

0000221e <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    221e:	80 91 9e 01 	lds	r24, 0x019E
    2222:	08 95       	ret

00002224 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    2224:	cf 93       	push	r28
    2226:	df 93       	push	r29
    2228:	00 d0       	rcall	.+0      	; 0x222a <send_consumer+0x6>
    222a:	1f 92       	push	r1
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
    bluefruit_serial_send(0x00);
#endif

    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    2230:	20 91 3c 02 	lds	r18, 0x023C
    2234:	24 30       	cpi	r18, 0x04	; 4
    2236:	21 f5       	brne	.+72     	; 0x2280 <send_consumer+0x5c>
        return;

    report_extra_t r = {
    2238:	23 e0       	ldi	r18, 0x03	; 3
    223a:	29 83       	std	Y+1, r18	; 0x01
    223c:	9b 83       	std	Y+3, r25	; 0x03
    223e:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2240:	20 93 e9 00 	sts	0x00E9, r18
    2244:	8f ef       	ldi	r24, 0xFF	; 255
    2246:	06 c0       	rjmp	.+12     	; 0x2254 <send_consumer+0x30>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2248:	95 ed       	ldi	r25, 0xD5	; 213
    224a:	9a 95       	dec	r25
    224c:	f1 f7       	brne	.-4      	; 0x224a <send_consumer+0x26>
    224e:	00 00       	nop
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    2250:	88 23       	and	r24, r24
    2252:	29 f0       	breq	.+10     	; 0x225e <send_consumer+0x3a>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2254:	90 91 e8 00 	lds	r25, 0x00E8
    2258:	81 50       	subi	r24, 0x01	; 1
    225a:	95 ff       	sbrs	r25, 5
    225c:	f5 cf       	rjmp	.-22     	; 0x2248 <send_consumer+0x24>
    225e:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    2262:	85 ff       	sbrs	r24, 5
    2264:	0d c0       	rjmp	.+26     	; 0x2280 <send_consumer+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    2266:	40 e0       	ldi	r20, 0x00	; 0
    2268:	50 e0       	ldi	r21, 0x00	; 0
    226a:	63 e0       	ldi	r22, 0x03	; 3
    226c:	70 e0       	ldi	r23, 0x00	; 0
    226e:	ce 01       	movw	r24, r28
    2270:	01 96       	adiw	r24, 0x01	; 1
    2272:	0e 94 ca 13 	call	0x2794	; 0x2794 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2276:	80 91 e8 00 	lds	r24, 0x00E8
    227a:	8e 77       	andi	r24, 0x7E	; 126
    227c:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	08 95       	ret

0000228c <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    228c:	cf 93       	push	r28
    228e:	df 93       	push	r29
    2290:	00 d0       	rcall	.+0      	; 0x2292 <send_system+0x6>
    2292:	1f 92       	push	r1
    2294:	cd b7       	in	r28, 0x3d	; 61
    2296:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    2298:	20 91 3c 02 	lds	r18, 0x023C
    229c:	24 30       	cpi	r18, 0x04	; 4
    229e:	29 f5       	brne	.+74     	; 0x22ea <send_system+0x5e>
        return;

    report_extra_t r = {
    22a0:	22 e0       	ldi	r18, 0x02	; 2
    22a2:	29 83       	std	Y+1, r18	; 0x01
    22a4:	9b 83       	std	Y+3, r25	; 0x03
    22a6:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    22a8:	83 e0       	ldi	r24, 0x03	; 3
    22aa:	80 93 e9 00 	sts	0x00E9, r24
    22ae:	8f ef       	ldi	r24, 0xFF	; 255
    22b0:	06 c0       	rjmp	.+12     	; 0x22be <send_system+0x32>
    22b2:	95 ed       	ldi	r25, 0xD5	; 213
    22b4:	9a 95       	dec	r25
    22b6:	f1 f7       	brne	.-4      	; 0x22b4 <send_system+0x28>
    22b8:	00 00       	nop
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    22ba:	88 23       	and	r24, r24
    22bc:	29 f0       	breq	.+10     	; 0x22c8 <send_system+0x3c>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    22be:	90 91 e8 00 	lds	r25, 0x00E8
    22c2:	81 50       	subi	r24, 0x01	; 1
    22c4:	95 ff       	sbrs	r25, 5
    22c6:	f5 cf       	rjmp	.-22     	; 0x22b2 <send_system+0x26>
    22c8:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    22cc:	85 ff       	sbrs	r24, 5
    22ce:	0d c0       	rjmp	.+26     	; 0x22ea <send_system+0x5e>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    22d0:	40 e0       	ldi	r20, 0x00	; 0
    22d2:	50 e0       	ldi	r21, 0x00	; 0
    22d4:	63 e0       	ldi	r22, 0x03	; 3
    22d6:	70 e0       	ldi	r23, 0x00	; 0
    22d8:	ce 01       	movw	r24, r28
    22da:	01 96       	adiw	r24, 0x01	; 1
    22dc:	0e 94 ca 13 	call	0x2794	; 0x2794 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    22e0:	80 91 e8 00 	lds	r24, 0x00E8
    22e4:	8e 77       	andi	r24, 0x7E	; 126
    22e6:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    22ea:	0f 90       	pop	r0
    22ec:	0f 90       	pop	r0
    22ee:	0f 90       	pop	r0
    22f0:	df 91       	pop	r29
    22f2:	cf 91       	pop	r28
    22f4:	08 95       	ret

000022f6 <send_mouse>:
    bluefruit_serial_send(0x00);
#endif

    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    22f6:	20 91 3c 02 	lds	r18, 0x023C
    22fa:	24 30       	cpi	r18, 0x04	; 4
    22fc:	f9 f4       	brne	.+62     	; 0x233c <send_mouse+0x46>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    22fe:	22 e0       	ldi	r18, 0x02	; 2
    2300:	20 93 e9 00 	sts	0x00E9, r18
    2304:	2f ef       	ldi	r18, 0xFF	; 255
    2306:	06 c0       	rjmp	.+12     	; 0x2314 <send_mouse+0x1e>
    2308:	35 ed       	ldi	r19, 0xD5	; 213
    230a:	3a 95       	dec	r19
    230c:	f1 f7       	brne	.-4      	; 0x230a <send_mouse+0x14>
    230e:	00 00       	nop

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    2310:	22 23       	and	r18, r18
    2312:	29 f0       	breq	.+10     	; 0x231e <send_mouse+0x28>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2314:	30 91 e8 00 	lds	r19, 0x00E8
    2318:	21 50       	subi	r18, 0x01	; 1
    231a:	35 ff       	sbrs	r19, 5
    231c:	f5 cf       	rjmp	.-22     	; 0x2308 <send_mouse+0x12>
    231e:	20 91 e8 00 	lds	r18, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    2322:	25 ff       	sbrs	r18, 5
    2324:	0b c0       	rjmp	.+22     	; 0x233c <send_mouse+0x46>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    2326:	40 e0       	ldi	r20, 0x00	; 0
    2328:	50 e0       	ldi	r21, 0x00	; 0
    232a:	65 e0       	ldi	r22, 0x05	; 5
    232c:	70 e0       	ldi	r23, 0x00	; 0
    232e:	0e 94 ca 13 	call	0x2794	; 0x2794 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2332:	80 91 e8 00 	lds	r24, 0x00E8
    2336:	8e 77       	andi	r24, 0x7E	; 126
    2338:	80 93 e8 00 	sts	0x00E8, r24
    233c:	08 95       	ret

0000233e <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    233e:	cf 93       	push	r28
    2340:	df 93       	push	r29
    2342:	ec 01       	movw	r28, r24
    }
#endif

    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    2344:	80 91 3c 02 	lds	r24, 0x023C
    2348:	84 30       	cpi	r24, 0x04	; 4
    234a:	09 f0       	breq	.+2      	; 0x234e <send_keyboard+0x10>
    234c:	49 c0       	rjmp	.+146    	; 0x23e0 <send_keyboard+0xa2>
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    234e:	80 91 0d 01 	lds	r24, 0x010D
    2352:	88 23       	and	r24, r24
    2354:	e9 f0       	breq	.+58     	; 0x2390 <send_keyboard+0x52>
    2356:	80 91 0e 01 	lds	r24, 0x010E
    235a:	88 23       	and	r24, r24
    235c:	c9 f0       	breq	.+50     	; 0x2390 <send_keyboard+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    235e:	85 e0       	ldi	r24, 0x05	; 5
    2360:	80 93 e9 00 	sts	0x00E9, r24
    2364:	8f ef       	ldi	r24, 0xFF	; 255
    2366:	06 c0       	rjmp	.+12     	; 0x2374 <send_keyboard+0x36>
    2368:	95 e1       	ldi	r25, 0x15	; 21
    236a:	9a 95       	dec	r25
    236c:	f1 f7       	brne	.-4      	; 0x236a <send_keyboard+0x2c>
    236e:	00 00       	nop
        /* Report protocol - NKRO */
        Endpoint_SelectEndpoint(NKRO_IN_EPNUM);

        /* Check if write ready for a polling interval around 1ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
    2370:	88 23       	and	r24, r24
    2372:	29 f0       	breq	.+10     	; 0x237e <send_keyboard+0x40>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2374:	90 91 e8 00 	lds	r25, 0x00E8
    2378:	81 50       	subi	r24, 0x01	; 1
    237a:	95 ff       	sbrs	r25, 5
    237c:	f5 cf       	rjmp	.-22     	; 0x2368 <send_keyboard+0x2a>
    237e:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    2382:	85 ff       	sbrs	r24, 5
    2384:	2d c0       	rjmp	.+90     	; 0x23e0 <send_keyboard+0xa2>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    2386:	40 e0       	ldi	r20, 0x00	; 0
    2388:	50 e0       	ldi	r21, 0x00	; 0
    238a:	60 e1       	ldi	r22, 0x10	; 16
    238c:	70 e0       	ldi	r23, 0x00	; 0
    238e:	18 c0       	rjmp	.+48     	; 0x23c0 <send_keyboard+0x82>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	80 93 e9 00 	sts	0x00E9, r24
    2396:	8f ef       	ldi	r24, 0xFF	; 255
    2398:	06 c0       	rjmp	.+12     	; 0x23a6 <send_keyboard+0x68>
    239a:	95 ed       	ldi	r25, 0xD5	; 213
    239c:	9a 95       	dec	r25
    239e:	f1 f7       	brne	.-4      	; 0x239c <send_keyboard+0x5e>
    23a0:	00 00       	nop
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    23a2:	88 23       	and	r24, r24
    23a4:	29 f0       	breq	.+10     	; 0x23b0 <send_keyboard+0x72>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    23a6:	90 91 e8 00 	lds	r25, 0x00E8
    23aa:	81 50       	subi	r24, 0x01	; 1
    23ac:	95 ff       	sbrs	r25, 5
    23ae:	f5 cf       	rjmp	.-22     	; 0x239a <send_keyboard+0x5c>
    23b0:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    23b4:	85 ff       	sbrs	r24, 5
    23b6:	14 c0       	rjmp	.+40     	; 0x23e0 <send_keyboard+0xa2>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    23b8:	40 e0       	ldi	r20, 0x00	; 0
    23ba:	50 e0       	ldi	r21, 0x00	; 0
    23bc:	68 e0       	ldi	r22, 0x08	; 8
    23be:	70 e0       	ldi	r23, 0x00	; 0
    23c0:	ce 01       	movw	r24, r28
    23c2:	0e 94 ca 13 	call	0x2794	; 0x2794 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    23c6:	80 91 e8 00 	lds	r24, 0x00E8
    23ca:	8e 77       	andi	r24, 0x7E	; 126
    23cc:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    23d0:	80 e1       	ldi	r24, 0x10	; 16
    23d2:	fe 01       	movw	r30, r28
    23d4:	ae e8       	ldi	r26, 0x8E	; 142
    23d6:	b1 e0       	ldi	r27, 0x01	; 1
    23d8:	01 90       	ld	r0, Z+
    23da:	0d 92       	st	X+, r0
    23dc:	8a 95       	dec	r24
    23de:	e1 f7       	brne	.-8      	; 0x23d8 <send_keyboard+0x9a>
}
    23e0:	df 91       	pop	r29
    23e2:	cf 91       	pop	r28
    23e4:	08 95       	ret

000023e6 <EVENT_USB_Device_Connect>:
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    /* For battery powered device */
    if (!USB_IsInitialized) {
    23e6:	80 91 3b 02 	lds	r24, 0x023B
    23ea:	81 11       	cpse	r24, r1
    23ec:	09 c0       	rjmp	.+18     	; 0x2400 <EVENT_USB_Device_Connect+0x1a>
        USB_Disable();
    23ee:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <USB_Disable>
        USB_Init();
    23f2:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    23f6:	80 91 e2 00 	lds	r24, 0x00E2
    23fa:	84 60       	ori	r24, 0x04	; 4
    23fc:	80 93 e2 00 	sts	0x00E2, r24
    2400:	08 95       	ret

00002402 <EVENT_USB_Device_Disconnect>:

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    /* For battery powered device */
    USB_IsInitialized = false;
    2402:	10 92 3b 02 	sts	0x023B, r1
    2406:	08 95       	ret

00002408 <EVENT_USB_Device_Reset>:
    }
*/
}

void EVENT_USB_Device_Reset(void)
{
    2408:	08 95       	ret

0000240a <EVENT_USB_Device_Suspend>:
    print("[R]");
}

void EVENT_USB_Device_Suspend()
{
    240a:	08 95       	ret

0000240c <EVENT_USB_Device_WakeUp>:
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    suspend_wakeup_init();
    240c:	0c 94 fe 24 	jmp	0x49fc	; 0x49fc <suspend_wakeup_init>

00002410 <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    2410:	80 91 9f 01 	lds	r24, 0x019F
    2414:	8f 5f       	subi	r24, 0xFF	; 255
    2416:	80 93 9f 01 	sts	0x019F, r24
    241a:	62 e3       	ldi	r22, 0x32	; 50
    241c:	0e 94 74 2d 	call	0x5ae8	; 0x5ae8 <__udivmodqi4>
    2420:	91 11       	cpse	r25, r1
    2422:	35 c0       	rjmp	.+106    	; 0x248e <EVENT_USB_Device_StartOfFrame+0x7e>
    count = 0;
    2424:	10 92 9f 01 	sts	0x019F, r1

    if (!console_flush) return;
    2428:	80 91 a0 01 	lds	r24, 0x01A0
    242c:	88 23       	and	r24, r24
    242e:	79 f1       	breq	.+94     	; 0x248e <EVENT_USB_Device_StartOfFrame+0x7e>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    2430:	80 91 3c 02 	lds	r24, 0x023C
    2434:	84 30       	cpi	r24, 0x04	; 4
    2436:	49 f5       	brne	.+82     	; 0x248a <EVENT_USB_Device_StartOfFrame+0x7a>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2438:	80 91 e9 00 	lds	r24, 0x00E9
    243c:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    243e:	90 91 ec 00 	lds	r25, 0x00EC
    2442:	90 ff       	sbrs	r25, 0
    2444:	02 c0       	rjmp	.+4      	; 0x244a <EVENT_USB_Device_StartOfFrame+0x3a>
    2446:	90 e8       	ldi	r25, 0x80	; 128
    2448:	01 c0       	rjmp	.+2      	; 0x244c <EVENT_USB_Device_StartOfFrame+0x3c>
    244a:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    244c:	98 2b       	or	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    244e:	84 e0       	ldi	r24, 0x04	; 4
    2450:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    2454:	80 91 eb 00 	lds	r24, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    2458:	80 ff       	sbrs	r24, 0
    245a:	14 c0       	rjmp	.+40     	; 0x2484 <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    245c:	80 91 ee 00 	lds	r24, 0x00EE
    2460:	87 fd       	sbrc	r24, 7
    2462:	03 c0       	rjmp	.+6      	; 0x246a <EVENT_USB_Device_StartOfFrame+0x5a>
    2464:	0f c0       	rjmp	.+30     	; 0x2484 <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2466:	10 92 f1 00 	sts	0x00F1, r1
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    246a:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    246e:	85 fd       	sbrc	r24, 5
    2470:	fa cf       	rjmp	.-12     	; 0x2466 <EVENT_USB_Device_StartOfFrame+0x56>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2472:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    2476:	80 ff       	sbrs	r24, 0
    2478:	05 c0       	rjmp	.+10     	; 0x2484 <EVENT_USB_Device_StartOfFrame+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    247a:	80 91 e8 00 	lds	r24, 0x00E8
    247e:	8e 77       	andi	r24, 0x7E	; 126
    2480:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2484:	9f 70       	andi	r25, 0x0F	; 15
    2486:	90 93 e9 00 	sts	0x00E9, r25
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    248a:	10 92 a0 01 	sts	0x01A0, r1
    248e:	08 95       	ret

00002490 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2490:	42 e0       	ldi	r20, 0x02	; 2
    2492:	61 ec       	ldi	r22, 0xC1	; 193
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <Endpoint_ConfigureEndpoint_Prv>
    249a:	42 e0       	ldi	r20, 0x02	; 2
    249c:	61 ec       	ldi	r22, 0xC1	; 193
    249e:	82 e0       	ldi	r24, 0x02	; 2
    24a0:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <Endpoint_ConfigureEndpoint_Prv>
    24a4:	42 e0       	ldi	r20, 0x02	; 2
    24a6:	61 ec       	ldi	r22, 0xC1	; 193
    24a8:	83 e0       	ldi	r24, 0x03	; 3
    24aa:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <Endpoint_ConfigureEndpoint_Prv>
    24ae:	42 e2       	ldi	r20, 0x22	; 34
    24b0:	61 ec       	ldi	r22, 0xC1	; 193
    24b2:	84 e0       	ldi	r24, 0x04	; 4
    24b4:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <Endpoint_ConfigureEndpoint_Prv>
    24b8:	42 e1       	ldi	r20, 0x12	; 18
    24ba:	61 ec       	ldi	r22, 0xC1	; 193
    24bc:	85 e0       	ldi	r24, 0x05	; 5
    24be:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <Endpoint_ConfigureEndpoint_Prv>

000024c2 <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    24c2:	80 91 3e 02 	lds	r24, 0x023E
    24c6:	83 30       	cpi	r24, 0x03	; 3
    24c8:	09 f4       	brne	.+2      	; 0x24cc <EVENT_USB_Device_ControlRequest+0xa>
    24ca:	56 c0       	rjmp	.+172    	; 0x2578 <EVENT_USB_Device_ControlRequest+0xb6>
    24cc:	30 f4       	brcc	.+12     	; 0x24da <EVENT_USB_Device_ControlRequest+0x18>
    24ce:	81 30       	cpi	r24, 0x01	; 1
    24d0:	71 f0       	breq	.+28     	; 0x24ee <EVENT_USB_Device_ControlRequest+0x2c>
    24d2:	82 30       	cpi	r24, 0x02	; 2
    24d4:	09 f0       	breq	.+2      	; 0x24d8 <EVENT_USB_Device_ControlRequest+0x16>
    24d6:	a7 c0       	rjmp	.+334    	; 0x2626 <EVENT_USB_Device_ControlRequest+0x164>
    24d8:	8e c0       	rjmp	.+284    	; 0x25f6 <EVENT_USB_Device_ControlRequest+0x134>
    24da:	8a 30       	cpi	r24, 0x0A	; 10
    24dc:	09 f4       	brne	.+2      	; 0x24e0 <EVENT_USB_Device_ControlRequest+0x1e>
    24de:	7b c0       	rjmp	.+246    	; 0x25d6 <EVENT_USB_Device_ControlRequest+0x114>
    24e0:	8b 30       	cpi	r24, 0x0B	; 11
    24e2:	09 f4       	brne	.+2      	; 0x24e6 <EVENT_USB_Device_ControlRequest+0x24>
    24e4:	61 c0       	rjmp	.+194    	; 0x25a8 <EVENT_USB_Device_ControlRequest+0xe6>
    24e6:	89 30       	cpi	r24, 0x09	; 9
    24e8:	09 f0       	breq	.+2      	; 0x24ec <EVENT_USB_Device_ControlRequest+0x2a>
    24ea:	9d c0       	rjmp	.+314    	; 0x2626 <EVENT_USB_Device_ControlRequest+0x164>
    24ec:	20 c0       	rjmp	.+64     	; 0x252e <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    24ee:	80 91 3d 02 	lds	r24, 0x023D
    24f2:	81 3a       	cpi	r24, 0xA1	; 161
    24f4:	09 f0       	breq	.+2      	; 0x24f8 <EVENT_USB_Device_ControlRequest+0x36>
    24f6:	97 c0       	rjmp	.+302    	; 0x2626 <EVENT_USB_Device_ControlRequest+0x164>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    24f8:	80 91 e8 00 	lds	r24, 0x00E8
    24fc:	87 7f       	andi	r24, 0xF7	; 247
    24fe:	80 93 e8 00 	sts	0x00E8, r24
    2502:	80 91 41 02 	lds	r24, 0x0241
    2506:	90 91 42 02 	lds	r25, 0x0242
    250a:	89 2b       	or	r24, r25
    250c:	21 f0       	breq	.+8      	; 0x2516 <EVENT_USB_Device_ControlRequest+0x54>
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    250e:	60 e0       	ldi	r22, 0x00	; 0
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	03 c0       	rjmp	.+6      	; 0x251c <EVENT_USB_Device_ControlRequest+0x5a>
    2516:	60 e1       	ldi	r22, 0x10	; 16
    2518:	8e e8       	ldi	r24, 0x8E	; 142
    251a:	91 e0       	ldi	r25, 0x01	; 1
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    251c:	70 e0       	ldi	r23, 0x00	; 0
    251e:	0e 94 19 14 	call	0x2832	; 0x2832 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2522:	80 91 e8 00 	lds	r24, 0x00E8
    2526:	8b 77       	andi	r24, 0x7B	; 123
    2528:	80 93 e8 00 	sts	0x00E8, r24
    252c:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    252e:	80 91 3d 02 	lds	r24, 0x023D
    2532:	81 32       	cpi	r24, 0x21	; 33
    2534:	09 f0       	breq	.+2      	; 0x2538 <EVENT_USB_Device_ControlRequest+0x76>
    2536:	77 c0       	rjmp	.+238    	; 0x2626 <EVENT_USB_Device_ControlRequest+0x164>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    2538:	80 91 41 02 	lds	r24, 0x0241
    253c:	90 91 42 02 	lds	r25, 0x0242
    2540:	00 97       	sbiw	r24, 0x00	; 0
    2542:	19 f0       	breq	.+6      	; 0x254a <EVENT_USB_Device_ControlRequest+0x88>
    2544:	04 97       	sbiw	r24, 0x04	; 4
    2546:	09 f0       	breq	.+2      	; 0x254a <EVENT_USB_Device_ControlRequest+0x88>
    2548:	6e c0       	rjmp	.+220    	; 0x2626 <EVENT_USB_Device_ControlRequest+0x164>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    254a:	80 91 e8 00 	lds	r24, 0x00E8
    254e:	87 7f       	andi	r24, 0xF7	; 247
    2550:	80 93 e8 00 	sts	0x00E8, r24
    2554:	05 c0       	rjmp	.+10     	; 0x2560 <EVENT_USB_Device_ControlRequest+0x9e>
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    2556:	80 91 3c 02 	lds	r24, 0x023C
    255a:	88 23       	and	r24, r24
    255c:	09 f4       	brne	.+2      	; 0x2560 <EVENT_USB_Device_ControlRequest+0x9e>
    255e:	63 c0       	rjmp	.+198    	; 0x2626 <EVENT_USB_Device_ControlRequest+0x164>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2560:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    2564:	82 ff       	sbrs	r24, 2
    2566:	f7 cf       	rjmp	.-18     	; 0x2556 <EVENT_USB_Device_ControlRequest+0x94>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2568:	80 91 f1 00 	lds	r24, 0x00F1
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    256c:	80 93 9e 01 	sts	0x019E, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2570:	80 91 e8 00 	lds	r24, 0x00E8
    2574:	8b 77       	andi	r24, 0x7B	; 123
    2576:	53 c0       	rjmp	.+166    	; 0x261e <EVENT_USB_Device_ControlRequest+0x15c>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    2578:	80 91 3d 02 	lds	r24, 0x023D
    257c:	81 3a       	cpi	r24, 0xA1	; 161
    257e:	09 f0       	breq	.+2      	; 0x2582 <EVENT_USB_Device_ControlRequest+0xc0>
    2580:	52 c0       	rjmp	.+164    	; 0x2626 <EVENT_USB_Device_ControlRequest+0x164>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    2582:	80 91 41 02 	lds	r24, 0x0241
    2586:	90 91 42 02 	lds	r25, 0x0242
    258a:	89 2b       	or	r24, r25
    258c:	09 f0       	breq	.+2      	; 0x2590 <EVENT_USB_Device_ControlRequest+0xce>
    258e:	4b c0       	rjmp	.+150    	; 0x2626 <EVENT_USB_Device_ControlRequest+0x164>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2590:	80 91 e8 00 	lds	r24, 0x00E8
    2594:	87 7f       	andi	r24, 0xF7	; 247
    2596:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    259a:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    259e:	80 ff       	sbrs	r24, 0
    25a0:	fc cf       	rjmp	.-8      	; 0x259a <EVENT_USB_Device_ControlRequest+0xd8>
                    Endpoint_Write_8(keyboard_protocol);
    25a2:	80 91 0d 01 	lds	r24, 0x010D
    25a6:	36 c0       	rjmp	.+108    	; 0x2614 <EVENT_USB_Device_ControlRequest+0x152>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    25a8:	80 91 3d 02 	lds	r24, 0x023D
    25ac:	81 32       	cpi	r24, 0x21	; 33
    25ae:	d9 f5       	brne	.+118    	; 0x2626 <EVENT_USB_Device_ControlRequest+0x164>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    25b0:	80 91 41 02 	lds	r24, 0x0241
    25b4:	90 91 42 02 	lds	r25, 0x0242
    25b8:	89 2b       	or	r24, r25
    25ba:	a9 f5       	brne	.+106    	; 0x2626 <EVENT_USB_Device_ControlRequest+0x164>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    25bc:	80 91 e8 00 	lds	r24, 0x00E8
    25c0:	87 7f       	andi	r24, 0xF7	; 247
    25c2:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    25c6:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    25ca:	80 91 3f 02 	lds	r24, 0x023F
    25ce:	80 93 0d 01 	sts	0x010D, r24
                    clear_keyboard();
    25d2:	0c 94 b7 1e 	jmp	0x3d6e	; 0x3d6e <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    25d6:	80 91 3d 02 	lds	r24, 0x023D
    25da:	81 32       	cpi	r24, 0x21	; 33
    25dc:	21 f5       	brne	.+72     	; 0x2626 <EVENT_USB_Device_ControlRequest+0x164>
    25de:	80 91 e8 00 	lds	r24, 0x00E8
    25e2:	87 7f       	andi	r24, 0xF7	; 247
    25e4:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    25e8:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    25ec:	80 91 40 02 	lds	r24, 0x0240
    25f0:	80 93 8d 01 	sts	0x018D, r24
    25f4:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    25f6:	80 91 3d 02 	lds	r24, 0x023D
    25fa:	81 3a       	cpi	r24, 0xA1	; 161
    25fc:	a1 f4       	brne	.+40     	; 0x2626 <EVENT_USB_Device_ControlRequest+0x164>
    25fe:	80 91 e8 00 	lds	r24, 0x00E8
    2602:	87 7f       	andi	r24, 0xF7	; 247
    2604:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2608:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    260c:	80 ff       	sbrs	r24, 0
    260e:	fc cf       	rjmp	.-8      	; 0x2608 <EVENT_USB_Device_ControlRequest+0x146>
                Endpoint_Write_8(keyboard_idle);
    2610:	80 91 8d 01 	lds	r24, 0x018D
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2614:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2618:	80 91 e8 00 	lds	r24, 0x00E8
    261c:	8e 77       	andi	r24, 0x7E	; 126
    261e:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    2622:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <Endpoint_ClearStatusStage>
    2626:	08 95       	ret

00002628 <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    2628:	84 b7       	in	r24, 0x34	; 52
    262a:	87 7f       	andi	r24, 0xF7	; 247
    262c:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    262e:	88 e1       	ldi	r24, 0x18	; 24
    2630:	0f b6       	in	r0, 0x3f	; 63
    2632:	f8 94       	cli
    2634:	80 93 60 00 	sts	0x0060, r24
    2638:	10 92 60 00 	sts	0x0060, r1
    263c:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	80 e8       	ldi	r24, 0x80	; 128
    2642:	0f b6       	in	r0, 0x3f	; 63
    2644:	f8 94       	cli
    2646:	80 93 61 00 	sts	0x0061, r24
    264a:	90 93 61 00 	sts	0x0061, r25
    264e:	0f be       	out	0x3f, r0	; 63
    midi_device_set_send_func(&midi_device, usb_send_func);
    midi_device_set_pre_input_process_func(&midi_device, usb_get_midi);
#endif

    setup_mcu();
    keyboard_setup();
    2650:	0e 94 d5 18 	call	0x31aa	; 0x31aa <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    2654:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <USB_Disable>

    USB_Init();
    2658:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <USB_Init>
    265c:	80 91 e2 00 	lds	r24, 0x00E2
    2660:	84 60       	ori	r24, 0x04	; 4
    2662:	80 93 e2 00 	sts	0x00E2, r24
#endif

    setup_mcu();
    keyboard_setup();
    setup_usb();
    sei();
    2666:	78 94       	sei
            USB_USBTask();
    #endif
    }
    print("USB configured.\n");
#else
    USB_USBTask();
    2668:	0e 94 64 18 	call	0x30c8	; 0x30c8 <USB_USBTask>
#endif
    /* init modules */
    keyboard_init();
    266c:	0e 94 d7 18 	call	0x31ae	; 0x31ae <keyboard_init>
    host_set_driver(&lufa_driver);
    2670:	83 e0       	ldi	r24, 0x03	; 3
    2672:	91 e0       	ldi	r25, 0x01	; 1
    2674:	0e 94 81 18 	call	0x3102	; 0x3102 <host_set_driver>
    2678:	0b c0       	rjmp	.+22     	; 0x2690 <main+0x68>
    print("Keyboard start.\n");
    while (1) {
        #ifndef BLUETOOTH_ENABLE
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
            print("[s]");
            suspend_power_down();
    267a:	0e 94 c1 24 	call	0x4982	; 0x4982 <suspend_power_down>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    267e:	80 91 3a 02 	lds	r24, 0x023A
    2682:	88 23       	and	r24, r24
    2684:	29 f0       	breq	.+10     	; 0x2690 <main+0x68>
    2686:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <suspend_wakeup_condition>
    268a:	81 11       	cpse	r24, r1
                    USB_Device_SendRemoteWakeup();
    268c:	0e 94 b4 13 	call	0x2768	; 0x2768 <USB_Device_SendRemoteWakeup>
#endif

    print("Keyboard start.\n");
    while (1) {
        #ifndef BLUETOOTH_ENABLE
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    2690:	80 91 3c 02 	lds	r24, 0x023C
    2694:	85 30       	cpi	r24, 0x05	; 5
    2696:	89 f3       	breq	.-30     	; 0x267a <main+0x52>

#ifdef MIDI_ENABLE
        midi_device_process(&midi_device);
        // MIDI_Task();
#endif
        keyboard_task();
    2698:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    269c:	f9 cf       	rjmp	.-14     	; 0x2690 <main+0x68>

0000269e <CALLBACK_USB_GetDescriptor>:
            break;
    }

    *DescriptorAddress = Address;
    return Size;
}
    269e:	29 2f       	mov	r18, r25
    26a0:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    26a2:	23 30       	cpi	r18, 0x03	; 3
    26a4:	31 05       	cpc	r19, r1
    26a6:	b1 f0       	breq	.+44     	; 0x26d4 <CALLBACK_USB_GetDescriptor+0x36>
    26a8:	4c f4       	brge	.+18     	; 0x26bc <CALLBACK_USB_GetDescriptor+0x1e>
    26aa:	21 30       	cpi	r18, 0x01	; 1
    26ac:	31 05       	cpc	r19, r1
    26ae:	09 f4       	brne	.+2      	; 0x26b2 <CALLBACK_USB_GetDescriptor+0x14>
    26b0:	4d c0       	rjmp	.+154    	; 0x274c <CALLBACK_USB_GetDescriptor+0xae>
    26b2:	22 30       	cpi	r18, 0x02	; 2
    26b4:	31 05       	cpc	r19, r1
    26b6:	09 f0       	breq	.+2      	; 0x26ba <CALLBACK_USB_GetDescriptor+0x1c>
    26b8:	4e c0       	rjmp	.+156    	; 0x2756 <CALLBACK_USB_GetDescriptor+0xb8>
    26ba:	07 c0       	rjmp	.+14     	; 0x26ca <CALLBACK_USB_GetDescriptor+0x2c>
    26bc:	21 32       	cpi	r18, 0x21	; 33
    26be:	31 05       	cpc	r19, r1
    26c0:	41 f1       	breq	.+80     	; 0x2712 <CALLBACK_USB_GetDescriptor+0x74>
    26c2:	22 32       	cpi	r18, 0x22	; 34
    26c4:	31 05       	cpc	r19, r1
    26c6:	91 f1       	breq	.+100    	; 0x272c <CALLBACK_USB_GetDescriptor+0x8e>
    26c8:	46 c0       	rjmp	.+140    	; 0x2756 <CALLBACK_USB_GetDescriptor+0xb8>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    26ca:	ed e8       	ldi	r30, 0x8D	; 141
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    26ce:	87 e7       	ldi	r24, 0x77	; 119
    26d0:	96 e0       	ldi	r25, 0x06	; 6
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    26d2:	45 c0       	rjmp	.+138    	; 0x275e <CALLBACK_USB_GetDescriptor+0xc0>
            break;
    }

    *DescriptorAddress = Address;
    return Size;
}
    26d4:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    26d6:	81 30       	cpi	r24, 0x01	; 1
    26d8:	91 05       	cpc	r25, r1
    26da:	69 f0       	breq	.+26     	; 0x26f6 <CALLBACK_USB_GetDescriptor+0x58>
    26dc:	82 30       	cpi	r24, 0x02	; 2
    26de:	91 05       	cpc	r25, r1
    26e0:	89 f0       	breq	.+34     	; 0x2704 <CALLBACK_USB_GetDescriptor+0x66>
    26e2:	89 2b       	or	r24, r25
    26e4:	09 f0       	breq	.+2      	; 0x26e8 <CALLBACK_USB_GetDescriptor+0x4a>
    26e6:	37 c0       	rjmp	.+110    	; 0x2756 <CALLBACK_USB_GetDescriptor+0xb8>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    26e8:	e3 e7       	ldi	r30, 0x73	; 115
    26ea:	f6 e0       	ldi	r31, 0x06	; 6
    26ec:	e4 91       	lpm	r30, Z
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
            {
                case 0x00:
                    Address = &LanguageString;
    26f0:	83 e7       	ldi	r24, 0x73	; 115
    26f2:	96 e0       	ldi	r25, 0x06	; 6
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
                    break;
    26f4:	34 c0       	rjmp	.+104    	; 0x275e <CALLBACK_USB_GetDescriptor+0xc0>
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    26f6:	e5 e6       	ldi	r30, 0x65	; 101
    26f8:	f6 e0       	ldi	r31, 0x06	; 6
    26fa:	e4 91       	lpm	r30, Z
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
                    break;
                case 0x01:
                    Address = &ManufacturerString;
    26fe:	85 e6       	ldi	r24, 0x65	; 101
    2700:	96 e0       	ldi	r25, 0x06	; 6
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
    2702:	2d c0       	rjmp	.+90     	; 0x275e <CALLBACK_USB_GetDescriptor+0xc0>
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    2704:	e9 e4       	ldi	r30, 0x49	; 73
    2706:	f6 e0       	ldi	r31, 0x06	; 6
    2708:	e4 91       	lpm	r30, Z
    270a:	f0 e0       	ldi	r31, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    270c:	89 e4       	ldi	r24, 0x49	; 73
    270e:	96 e0       	ldi	r25, 0x06	; 6
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    2710:	26 c0       	rjmp	.+76     	; 0x275e <CALLBACK_USB_GetDescriptor+0xc0>
    2712:	65 30       	cpi	r22, 0x05	; 5
    2714:	00 f5       	brcc	.+64     	; 0x2756 <CALLBACK_USB_GetDescriptor+0xb8>
    2716:	e6 2f       	mov	r30, r22
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	ee 0f       	add	r30, r30
    271c:	ff 1f       	adc	r31, r31
    271e:	e3 5c       	subi	r30, 0xC3	; 195
    2720:	fe 4f       	sbci	r31, 0xFE	; 254
    2722:	80 81       	ld	r24, Z
    2724:	91 81       	ldd	r25, Z+1	; 0x01
    2726:	e9 e0       	ldi	r30, 0x09	; 9
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	19 c0       	rjmp	.+50     	; 0x275e <CALLBACK_USB_GetDescriptor+0xc0>
    272c:	65 30       	cpi	r22, 0x05	; 5
    272e:	98 f4       	brcc	.+38     	; 0x2756 <CALLBACK_USB_GetDescriptor+0xb8>
    2730:	e6 2f       	mov	r30, r22
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	df 01       	movw	r26, r30
    2736:	aa 0f       	add	r26, r26
    2738:	bb 1f       	adc	r27, r27
    273a:	a9 5b       	subi	r26, 0xB9	; 185
    273c:	be 4f       	sbci	r27, 0xFE	; 254
    273e:	8d 91       	ld	r24, X+
    2740:	9c 91       	ld	r25, X
            break;
    }

    *DescriptorAddress = Address;
    return Size;
}
    2742:	ef 5a       	subi	r30, 0xAF	; 175
    2744:	fe 4f       	sbci	r31, 0xFE	; 254
    2746:	e0 81       	ld	r30, Z
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	09 c0       	rjmp	.+18     	; 0x275e <CALLBACK_USB_GetDescriptor+0xc0>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    274c:	e2 e1       	ldi	r30, 0x12	; 18
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    2750:	84 e0       	ldi	r24, 0x04	; 4
    2752:	97 e0       	ldi	r25, 0x07	; 7
    2754:	04 c0       	rjmp	.+8      	; 0x275e <CALLBACK_USB_GetDescriptor+0xc0>
    2756:	e0 e0       	ldi	r30, 0x00	; 0
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	90 e0       	ldi	r25, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    275e:	da 01       	movw	r26, r20
    2760:	8d 93       	st	X+, r24
    2762:	9c 93       	st	X, r25
    return Size;
}
    2764:	cf 01       	movw	r24, r30
    2766:	08 95       	ret

00002768 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2768:	80 e1       	ldi	r24, 0x10	; 16
    276a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    276c:	82 e1       	ldi	r24, 0x12	; 18
    276e:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    2770:	09 b4       	in	r0, 0x29	; 41
    2772:	00 fe       	sbrs	r0, 0
    2774:	fd cf       	rjmp	.-6      	; 0x2770 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2776:	80 91 d8 00 	lds	r24, 0x00D8
    277a:	8f 7d       	andi	r24, 0xDF	; 223
    277c:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    2780:	80 91 e0 00 	lds	r24, 0x00E0
    2784:	82 60       	ori	r24, 0x02	; 2
    2786:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    278a:	80 91 e0 00 	lds	r24, 0x00E0
    278e:	81 fd       	sbrc	r24, 1
    2790:	fc cf       	rjmp	.-8      	; 0x278a <USB_Device_SendRemoteWakeup+0x22>
}
    2792:	08 95       	ret

00002794 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    2794:	bf 92       	push	r11
    2796:	cf 92       	push	r12
    2798:	df 92       	push	r13
    279a:	ef 92       	push	r14
    279c:	ff 92       	push	r15
    279e:	0f 93       	push	r16
    27a0:	1f 93       	push	r17
    27a2:	cf 93       	push	r28
    27a4:	df 93       	push	r29
    27a6:	7c 01       	movw	r14, r24
    27a8:	8b 01       	movw	r16, r22
    27aa:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    27ac:	0e 94 38 15 	call	0x2a70	; 0x2a70 <Endpoint_WaitUntilReady>
    27b0:	b8 2e       	mov	r11, r24
    27b2:	81 11       	cpse	r24, r1
    27b4:	33 c0       	rjmp	.+102    	; 0x281c <Endpoint_Write_Stream_LE+0x88>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    27b6:	20 97       	sbiw	r28, 0x00	; 0
    27b8:	31 f0       	breq	.+12     	; 0x27c6 <Endpoint_Write_Stream_LE+0x32>
	{
		Length -= *BytesProcessed;
    27ba:	28 81       	ld	r18, Y
    27bc:	39 81       	ldd	r19, Y+1	; 0x01
    27be:	02 1b       	sub	r16, r18
    27c0:	13 0b       	sbc	r17, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    27c2:	e2 0e       	add	r14, r18
    27c4:	f3 1e       	adc	r15, r19

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    27c6:	c1 2c       	mov	r12, r1
    27c8:	d1 2c       	mov	r13, r1
    27ca:	23 c0       	rjmp	.+70     	; 0x2812 <Endpoint_Write_Stream_LE+0x7e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    27cc:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    27d0:	85 fd       	sbrc	r24, 5
    27d2:	15 c0       	rjmp	.+42     	; 0x27fe <Endpoint_Write_Stream_LE+0x6a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    27d4:	80 91 e8 00 	lds	r24, 0x00E8
    27d8:	8e 77       	andi	r24, 0x7E	; 126
    27da:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    27de:	20 97       	sbiw	r28, 0x00	; 0
    27e0:	49 f0       	breq	.+18     	; 0x27f4 <Endpoint_Write_Stream_LE+0x60>
			{
				*BytesProcessed += BytesInTransfer;
    27e2:	88 81       	ld	r24, Y
    27e4:	99 81       	ldd	r25, Y+1	; 0x01
    27e6:	8c 0d       	add	r24, r12
    27e8:	9d 1d       	adc	r25, r13
    27ea:	99 83       	std	Y+1, r25	; 0x01
    27ec:	88 83       	st	Y, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    27ee:	25 e0       	ldi	r18, 0x05	; 5
    27f0:	b2 2e       	mov	r11, r18
    27f2:	14 c0       	rjmp	.+40     	; 0x281c <Endpoint_Write_Stream_LE+0x88>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    27f4:	0e 94 38 15 	call	0x2a70	; 0x2a70 <Endpoint_WaitUntilReady>
    27f8:	88 23       	and	r24, r24
    27fa:	59 f0       	breq	.+22     	; 0x2812 <Endpoint_Write_Stream_LE+0x7e>
    27fc:	0e c0       	rjmp	.+28     	; 0x281a <Endpoint_Write_Stream_LE+0x86>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    27fe:	f7 01       	movw	r30, r14
    2800:	81 91       	ld	r24, Z+
    2802:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2804:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    2808:	01 50       	subi	r16, 0x01	; 1
    280a:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    280c:	ff ef       	ldi	r31, 0xFF	; 255
    280e:	cf 1a       	sub	r12, r31
    2810:	df 0a       	sbc	r13, r31
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    2812:	01 15       	cp	r16, r1
    2814:	11 05       	cpc	r17, r1
    2816:	d1 f6       	brne	.-76     	; 0x27cc <Endpoint_Write_Stream_LE+0x38>
    2818:	01 c0       	rjmp	.+2      	; 0x281c <Endpoint_Write_Stream_LE+0x88>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    281a:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    281c:	8b 2d       	mov	r24, r11
    281e:	df 91       	pop	r29
    2820:	cf 91       	pop	r28
    2822:	1f 91       	pop	r17
    2824:	0f 91       	pop	r16
    2826:	ff 90       	pop	r15
    2828:	ef 90       	pop	r14
    282a:	df 90       	pop	r13
    282c:	cf 90       	pop	r12
    282e:	bf 90       	pop	r11
    2830:	08 95       	ret

00002832 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2832:	40 91 43 02 	lds	r20, 0x0243
    2836:	50 91 44 02 	lds	r21, 0x0244
    283a:	46 17       	cp	r20, r22
    283c:	57 07       	cpc	r21, r23
    283e:	48 f0       	brcs	.+18     	; 0x2852 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    2840:	61 15       	cp	r22, r1
    2842:	71 05       	cpc	r23, r1
    2844:	39 f4       	brne	.+14     	; 0x2854 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2846:	40 91 e8 00 	lds	r20, 0x00E8
    284a:	4e 77       	andi	r20, 0x7E	; 126
    284c:	40 93 e8 00 	sts	0x00E8, r20
    2850:	01 c0       	rjmp	.+2      	; 0x2854 <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2852:	ba 01       	movw	r22, r20
    2854:	fc 01       	movw	r30, r24
    2856:	40 e0       	ldi	r20, 0x00	; 0
    2858:	33 c0       	rjmp	.+102    	; 0x28c0 <Endpoint_Write_Control_Stream_LE+0x8e>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    285a:	80 91 3c 02 	lds	r24, 0x023C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    285e:	88 23       	and	r24, r24
    2860:	09 f4       	brne	.+2      	; 0x2864 <Endpoint_Write_Control_Stream_LE+0x32>
    2862:	44 c0       	rjmp	.+136    	; 0x28ec <Endpoint_Write_Control_Stream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2864:	85 30       	cpi	r24, 0x05	; 5
    2866:	09 f4       	brne	.+2      	; 0x286a <Endpoint_Write_Control_Stream_LE+0x38>
    2868:	43 c0       	rjmp	.+134    	; 0x28f0 <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    286a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    286e:	83 fd       	sbrc	r24, 3
    2870:	41 c0       	rjmp	.+130    	; 0x28f4 <Endpoint_Write_Control_Stream_LE+0xc2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2872:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    2876:	82 fd       	sbrc	r24, 2
    2878:	33 c0       	rjmp	.+102    	; 0x28e0 <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    287a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    287e:	80 ff       	sbrs	r24, 0
    2880:	1f c0       	rjmp	.+62     	; 0x28c0 <Endpoint_Write_Control_Stream_LE+0x8e>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    2882:	90 91 f3 00 	lds	r25, 0x00F3
    2886:	80 91 f2 00 	lds	r24, 0x00F2
    288a:	39 2f       	mov	r19, r25
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	a9 01       	movw	r20, r18
    2890:	48 2b       	or	r20, r24
    2892:	ca 01       	movw	r24, r20
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2894:	06 c0       	rjmp	.+12     	; 0x28a2 <Endpoint_Write_Control_Stream_LE+0x70>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    2896:	41 91       	ld	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2898:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    289c:	61 50       	subi	r22, 0x01	; 1
    289e:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    28a0:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    28a2:	61 15       	cp	r22, r1
    28a4:	71 05       	cpc	r23, r1
    28a6:	19 f0       	breq	.+6      	; 0x28ae <Endpoint_Write_Control_Stream_LE+0x7c>
    28a8:	88 30       	cpi	r24, 0x08	; 8
    28aa:	91 05       	cpc	r25, r1
    28ac:	a0 f3       	brcs	.-24     	; 0x2896 <Endpoint_Write_Control_Stream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    28ae:	41 e0       	ldi	r20, 0x01	; 1
    28b0:	08 97       	sbiw	r24, 0x08	; 8
    28b2:	09 f0       	breq	.+2      	; 0x28b6 <Endpoint_Write_Control_Stream_LE+0x84>
    28b4:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    28b6:	80 91 e8 00 	lds	r24, 0x00E8
    28ba:	8e 77       	andi	r24, 0x7E	; 126
    28bc:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    28c0:	61 15       	cp	r22, r1
    28c2:	71 05       	cpc	r23, r1
    28c4:	51 f6       	brne	.-108    	; 0x285a <Endpoint_Write_Control_Stream_LE+0x28>
    28c6:	41 11       	cpse	r20, r1
    28c8:	c8 cf       	rjmp	.-112    	; 0x285a <Endpoint_Write_Control_Stream_LE+0x28>
    28ca:	0a c0       	rjmp	.+20     	; 0x28e0 <Endpoint_Write_Control_Stream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    28cc:	80 91 3c 02 	lds	r24, 0x023C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    28d0:	88 23       	and	r24, r24
    28d2:	61 f0       	breq	.+24     	; 0x28ec <Endpoint_Write_Control_Stream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    28d4:	85 30       	cpi	r24, 0x05	; 5
    28d6:	61 f0       	breq	.+24     	; 0x28f0 <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    28d8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    28dc:	83 fd       	sbrc	r24, 3
    28de:	0a c0       	rjmp	.+20     	; 0x28f4 <Endpoint_Write_Control_Stream_LE+0xc2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    28e0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    28e4:	82 ff       	sbrs	r24, 2
    28e6:	f2 cf       	rjmp	.-28     	; 0x28cc <Endpoint_Write_Control_Stream_LE+0x9a>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    28ec:	82 e0       	ldi	r24, 0x02	; 2
    28ee:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    28f0:	83 e0       	ldi	r24, 0x03	; 3
    28f2:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    28f4:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    28f6:	08 95       	ret

000028f8 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    28f8:	40 91 43 02 	lds	r20, 0x0243
    28fc:	50 91 44 02 	lds	r21, 0x0244
    2900:	46 17       	cp	r20, r22
    2902:	57 07       	cpc	r21, r23
    2904:	48 f0       	brcs	.+18     	; 0x2918 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    2906:	61 15       	cp	r22, r1
    2908:	71 05       	cpc	r23, r1
    290a:	39 f4       	brne	.+14     	; 0x291a <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    290c:	40 91 e8 00 	lds	r20, 0x00E8
    2910:	4e 77       	andi	r20, 0x7E	; 126
    2912:	40 93 e8 00 	sts	0x00E8, r20
    2916:	01 c0       	rjmp	.+2      	; 0x291a <Endpoint_Write_Control_PStream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2918:	ba 01       	movw	r22, r20
    291a:	fc 01       	movw	r30, r24
    291c:	40 e0       	ldi	r20, 0x00	; 0
    291e:	34 c0       	rjmp	.+104    	; 0x2988 <Endpoint_Write_Control_PStream_LE+0x90>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2920:	80 91 3c 02 	lds	r24, 0x023C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2924:	88 23       	and	r24, r24
    2926:	09 f4       	brne	.+2      	; 0x292a <Endpoint_Write_Control_PStream_LE+0x32>
    2928:	45 c0       	rjmp	.+138    	; 0x29b4 <Endpoint_Write_Control_PStream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    292a:	85 30       	cpi	r24, 0x05	; 5
    292c:	09 f4       	brne	.+2      	; 0x2930 <Endpoint_Write_Control_PStream_LE+0x38>
    292e:	44 c0       	rjmp	.+136    	; 0x29b8 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2930:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2934:	83 fd       	sbrc	r24, 3
    2936:	42 c0       	rjmp	.+132    	; 0x29bc <Endpoint_Write_Control_PStream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2938:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    293c:	82 fd       	sbrc	r24, 2
    293e:	34 c0       	rjmp	.+104    	; 0x29a8 <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2940:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    2944:	80 ff       	sbrs	r24, 0
    2946:	20 c0       	rjmp	.+64     	; 0x2988 <Endpoint_Write_Control_PStream_LE+0x90>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    2948:	90 91 f3 00 	lds	r25, 0x00F3
    294c:	80 91 f2 00 	lds	r24, 0x00F2
    2950:	39 2f       	mov	r19, r25
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	a9 01       	movw	r20, r18
    2956:	48 2b       	or	r20, r24
    2958:	ca 01       	movw	r24, r20
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    295a:	07 c0       	rjmp	.+14     	; 0x296a <Endpoint_Write_Control_PStream_LE+0x72>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    295c:	44 91       	lpm	r20, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    295e:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    2962:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    2964:	61 50       	subi	r22, 0x01	; 1
    2966:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    2968:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    296a:	61 15       	cp	r22, r1
    296c:	71 05       	cpc	r23, r1
    296e:	19 f0       	breq	.+6      	; 0x2976 <Endpoint_Write_Control_PStream_LE+0x7e>
    2970:	88 30       	cpi	r24, 0x08	; 8
    2972:	91 05       	cpc	r25, r1
    2974:	98 f3       	brcs	.-26     	; 0x295c <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    2976:	41 e0       	ldi	r20, 0x01	; 1
    2978:	08 97       	sbiw	r24, 0x08	; 8
    297a:	09 f0       	breq	.+2      	; 0x297e <Endpoint_Write_Control_PStream_LE+0x86>
    297c:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    297e:	80 91 e8 00 	lds	r24, 0x00E8
    2982:	8e 77       	andi	r24, 0x7E	; 126
    2984:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2988:	61 15       	cp	r22, r1
    298a:	71 05       	cpc	r23, r1
    298c:	49 f6       	brne	.-110    	; 0x2920 <Endpoint_Write_Control_PStream_LE+0x28>
    298e:	41 11       	cpse	r20, r1
    2990:	c7 cf       	rjmp	.-114    	; 0x2920 <Endpoint_Write_Control_PStream_LE+0x28>
    2992:	0a c0       	rjmp	.+20     	; 0x29a8 <Endpoint_Write_Control_PStream_LE+0xb0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2994:	80 91 3c 02 	lds	r24, 0x023C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2998:	88 23       	and	r24, r24
    299a:	61 f0       	breq	.+24     	; 0x29b4 <Endpoint_Write_Control_PStream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    299c:	85 30       	cpi	r24, 0x05	; 5
    299e:	61 f0       	breq	.+24     	; 0x29b8 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    29a0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    29a4:	83 fd       	sbrc	r24, 3
    29a6:	0a c0       	rjmp	.+20     	; 0x29bc <Endpoint_Write_Control_PStream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    29a8:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    29ac:	82 ff       	sbrs	r24, 2
    29ae:	f2 cf       	rjmp	.-28     	; 0x2994 <Endpoint_Write_Control_PStream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    29b0:	80 e0       	ldi	r24, 0x00	; 0
    29b2:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    29b4:	82 e0       	ldi	r24, 0x02	; 2
    29b6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    29b8:	83 e0       	ldi	r24, 0x03	; 3
    29ba:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    29bc:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    29be:	08 95       	ret

000029c0 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    29c0:	98 2f       	mov	r25, r24
    29c2:	2c c0       	rjmp	.+88     	; 0x2a1c <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    29c4:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    29c8:	98 17       	cp	r25, r24
    29ca:	39 f0       	breq	.+14     	; 0x29da <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    29cc:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    29d0:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    29d4:	50 91 f0 00 	lds	r21, 0x00F0
    29d8:	03 c0       	rjmp	.+6      	; 0x29e0 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    29da:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    29dc:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    29de:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    29e0:	21 fd       	sbrc	r18, 1
    29e2:	02 c0       	rjmp	.+4      	; 0x29e8 <Endpoint_ConfigureEndpoint_Prv+0x28>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    29e4:	9f 5f       	subi	r25, 0xFF	; 255
    29e6:	1a c0       	rjmp	.+52     	; 0x2a1c <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    29e8:	30 91 eb 00 	lds	r19, 0x00EB
    29ec:	3e 7f       	andi	r19, 0xFE	; 254
    29ee:	30 93 eb 00 	sts	0x00EB, r19

		if (!(UECFG1XTemp & (1 << ALLOC)))
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    29f2:	30 91 ed 00 	lds	r19, 0x00ED
    29f6:	3d 7f       	andi	r19, 0xFD	; 253
    29f8:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    29fc:	30 91 eb 00 	lds	r19, 0x00EB
    2a00:	31 60       	ori	r19, 0x01	; 1
    2a02:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    2a06:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    2a0a:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    2a0e:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    2a12:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    2a16:	27 fd       	sbrc	r18, 7
    2a18:	e5 cf       	rjmp	.-54     	; 0x29e4 <Endpoint_ConfigureEndpoint_Prv+0x24>
    2a1a:	07 c0       	rjmp	.+14     	; 0x2a2a <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    2a1c:	97 30       	cpi	r25, 0x07	; 7
    2a1e:	90 f2       	brcs	.-92     	; 0x29c4 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2a20:	8f 70       	andi	r24, 0x0F	; 15
    2a22:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    2a2c:	08 95       	ret

00002a2e <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    2a2e:	80 91 3d 02 	lds	r24, 0x023D
    2a32:	87 fd       	sbrc	r24, 7
    2a34:	05 c0       	rjmp	.+10     	; 0x2a40 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2a36:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    2a3a:	80 ff       	sbrs	r24, 0
    2a3c:	0e c0       	rjmp	.+28     	; 0x2a5a <Endpoint_ClearStatusStage+0x2c>
    2a3e:	12 c0       	rjmp	.+36     	; 0x2a64 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2a40:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    2a44:	82 fd       	sbrc	r24, 2
    2a46:	05 c0       	rjmp	.+10     	; 0x2a52 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2a48:	80 91 3c 02 	lds	r24, 0x023C
    2a4c:	81 11       	cpse	r24, r1
    2a4e:	f8 cf       	rjmp	.-16     	; 0x2a40 <Endpoint_ClearStatusStage+0x12>
    2a50:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2a52:	80 91 e8 00 	lds	r24, 0x00E8
    2a56:	8b 77       	andi	r24, 0x7B	; 123
    2a58:	08 c0       	rjmp	.+16     	; 0x2a6a <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2a5a:	80 91 3c 02 	lds	r24, 0x023C
    2a5e:	81 11       	cpse	r24, r1
    2a60:	ea cf       	rjmp	.-44     	; 0x2a36 <Endpoint_ClearStatusStage+0x8>
    2a62:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2a64:	80 91 e8 00 	lds	r24, 0x00E8
    2a68:	8e 77       	andi	r24, 0x7E	; 126
    2a6a:	80 93 e8 00 	sts	0x00E8, r24
    2a6e:	08 95       	ret

00002a70 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    2a70:	80 91 e4 00 	lds	r24, 0x00E4
    2a74:	90 91 e5 00 	lds	r25, 0x00E5
    2a78:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2a7a:	20 91 ec 00 	lds	r18, 0x00EC
    2a7e:	20 fd       	sbrc	r18, 0
    2a80:	1f c0       	rjmp	.+62     	; 0x2ac0 <Endpoint_WaitUntilReady+0x50>
    2a82:	23 c0       	rjmp	.+70     	; 0x2aca <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2a84:	20 91 3c 02 	lds	r18, 0x023C

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2a88:	22 23       	and	r18, r18
    2a8a:	91 f0       	breq	.+36     	; 0x2ab0 <Endpoint_WaitUntilReady+0x40>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2a8c:	25 30       	cpi	r18, 0x05	; 5
    2a8e:	91 f0       	breq	.+36     	; 0x2ab4 <Endpoint_WaitUntilReady+0x44>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2a90:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    2a94:	25 fd       	sbrc	r18, 5
    2a96:	10 c0       	rjmp	.+32     	; 0x2ab8 <Endpoint_WaitUntilReady+0x48>
    2a98:	20 91 e4 00 	lds	r18, 0x00E4
    2a9c:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    2aa0:	28 17       	cp	r18, r24
    2aa2:	39 07       	cpc	r19, r25
    2aa4:	51 f3       	breq	.-44     	; 0x2a7a <Endpoint_WaitUntilReady+0xa>
    2aa6:	41 50       	subi	r20, 0x01	; 1
    2aa8:	c9 01       	movw	r24, r18
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    2aaa:	39 f7       	brne	.-50     	; 0x2a7a <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    2aac:	84 e0       	ldi	r24, 0x04	; 4
    2aae:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    2ab0:	82 e0       	ldi	r24, 0x02	; 2
    2ab2:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    2ab4:	83 e0       	ldi	r24, 0x03	; 3
    2ab6:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    2abc:	80 e0       	ldi	r24, 0x00	; 0
    2abe:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2ac0:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    2ac4:	20 ff       	sbrs	r18, 0
    2ac6:	de cf       	rjmp	.-68     	; 0x2a84 <Endpoint_WaitUntilReady+0x14>
    2ac8:	f9 cf       	rjmp	.-14     	; 0x2abc <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2aca:	20 91 e8 00 	lds	r18, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    2ace:	22 ff       	sbrs	r18, 2
    2ad0:	d9 cf       	rjmp	.-78     	; 0x2a84 <Endpoint_WaitUntilReady+0x14>
    2ad2:	f4 cf       	rjmp	.-24     	; 0x2abc <Endpoint_WaitUntilReady+0x4c>

00002ad4 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    2ad4:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    2ad8:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    2adc:	e0 ee       	ldi	r30, 0xE0	; 224
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	80 81       	ld	r24, Z
    2ae2:	81 60       	ori	r24, 0x01	; 1
    2ae4:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    2ae6:	e8 ed       	ldi	r30, 0xD8	; 216
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	80 81       	ld	r24, Z
    2aec:	8f 77       	andi	r24, 0x7F	; 127
    2aee:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2af0:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    2af2:	a7 ed       	ldi	r26, 0xD7	; 215
    2af4:	b0 e0       	ldi	r27, 0x00	; 0
    2af6:	8c 91       	ld	r24, X
    2af8:	8e 7f       	andi	r24, 0xFE	; 254
    2afa:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    2afc:	80 81       	ld	r24, Z
    2afe:	8f 7e       	andi	r24, 0xEF	; 239
    2b00:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    2b02:	10 92 3b 02 	sts	0x023B, r1
    2b06:	08 95       	ret

00002b08 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    2b08:	0f 93       	push	r16
    2b0a:	1f 93       	push	r17
    2b0c:	cf 93       	push	r28
    2b0e:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    2b10:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    2b14:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    2b18:	c8 ed       	ldi	r28, 0xD8	; 216
    2b1a:	d0 e0       	ldi	r29, 0x00	; 0
    2b1c:	88 81       	ld	r24, Y
    2b1e:	8f 77       	andi	r24, 0x7F	; 127
    2b20:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    2b22:	88 81       	ld	r24, Y
    2b24:	80 68       	ori	r24, 0x80	; 128
    2b26:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2b28:	88 81       	ld	r24, Y
    2b2a:	8f 7d       	andi	r24, 0xDF	; 223
    2b2c:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2b2e:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    2b30:	10 92 3c 02 	sts	0x023C, r1
	USB_Device_ConfigurationNumber  = 0;
    2b34:	10 92 38 02 	sts	0x0238, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    2b38:	10 92 3a 02 	sts	0x023A, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    2b3c:	10 92 39 02 	sts	0x0239, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    2b40:	00 ee       	ldi	r16, 0xE0	; 224
    2b42:	10 e0       	ldi	r17, 0x00	; 0
    2b44:	f8 01       	movw	r30, r16
    2b46:	80 81       	ld	r24, Z
    2b48:	8b 7f       	andi	r24, 0xFB	; 251
    2b4a:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    2b4c:	88 81       	ld	r24, Y
    2b4e:	81 60       	ori	r24, 0x01	; 1
    2b50:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2b52:	42 e0       	ldi	r20, 0x02	; 2
    2b54:	60 e0       	ldi	r22, 0x00	; 0
    2b56:	80 e0       	ldi	r24, 0x00	; 0
    2b58:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    2b5c:	e1 ee       	ldi	r30, 0xE1	; 225
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	80 81       	ld	r24, Z
    2b62:	8e 7f       	andi	r24, 0xFE	; 254
    2b64:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2b66:	e2 ee       	ldi	r30, 0xE2	; 226
    2b68:	f0 e0       	ldi	r31, 0x00	; 0
    2b6a:	80 81       	ld	r24, Z
    2b6c:	81 60       	ori	r24, 0x01	; 1
    2b6e:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    2b70:	80 81       	ld	r24, Z
    2b72:	88 60       	ori	r24, 0x08	; 8
    2b74:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    2b76:	f8 01       	movw	r30, r16
    2b78:	80 81       	ld	r24, Z
    2b7a:	8e 7f       	andi	r24, 0xFE	; 254
    2b7c:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    2b7e:	88 81       	ld	r24, Y
    2b80:	80 61       	ori	r24, 0x10	; 16
    2b82:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    2b84:	df 91       	pop	r29
    2b86:	cf 91       	pop	r28
    2b88:	1f 91       	pop	r17
    2b8a:	0f 91       	pop	r16
    2b8c:	08 95       	ret

00002b8e <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    2b8e:	e8 ed       	ldi	r30, 0xD8	; 216
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	80 81       	ld	r24, Z
    2b94:	8f 7e       	andi	r24, 0xEF	; 239
    2b96:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    2b98:	e7 ed       	ldi	r30, 0xD7	; 215
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	80 81       	ld	r24, Z
    2b9e:	81 60       	ori	r24, 0x01	; 1
    2ba0:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    2ba2:	84 e0       	ldi	r24, 0x04	; 4
    2ba4:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	80 93 3b 02 	sts	0x023B, r24

	USB_ResetInterface();
    2bac:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <USB_ResetInterface>

00002bb0 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    2bb0:	e8 ed       	ldi	r30, 0xD8	; 216
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	80 81       	ld	r24, Z
    2bb6:	8e 7f       	andi	r24, 0xFE	; 254
    2bb8:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    2bba:	10 92 e2 00 	sts	0x00E2, r1
    2bbe:	08 95       	ret

00002bc0 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    2bc0:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    2bc4:	10 92 e1 00 	sts	0x00E1, r1
    2bc8:	08 95       	ret

00002bca <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    2bca:	1f 92       	push	r1
    2bcc:	0f 92       	push	r0
    2bce:	0f b6       	in	r0, 0x3f	; 63
    2bd0:	0f 92       	push	r0
    2bd2:	11 24       	eor	r1, r1
    2bd4:	2f 93       	push	r18
    2bd6:	3f 93       	push	r19
    2bd8:	4f 93       	push	r20
    2bda:	5f 93       	push	r21
    2bdc:	6f 93       	push	r22
    2bde:	7f 93       	push	r23
    2be0:	8f 93       	push	r24
    2be2:	9f 93       	push	r25
    2be4:	af 93       	push	r26
    2be6:	bf 93       	push	r27
    2be8:	ef 93       	push	r30
    2bea:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    2bec:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    2bf0:	82 ff       	sbrs	r24, 2
    2bf2:	0b c0       	rjmp	.+22     	; 0x2c0a <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    2bf4:	80 91 e2 00 	lds	r24, 0x00E2
    2bf8:	82 ff       	sbrs	r24, 2
    2bfa:	07 c0       	rjmp	.+14     	; 0x2c0a <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    2bfc:	80 91 e1 00 	lds	r24, 0x00E1
    2c00:	8b 7f       	andi	r24, 0xFB	; 251
    2c02:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    2c06:	0e 94 08 12 	call	0x2410	; 0x2410 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    2c0a:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    2c0e:	80 ff       	sbrs	r24, 0
    2c10:	1f c0       	rjmp	.+62     	; 0x2c50 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    2c12:	80 91 d8 00 	lds	r24, 0x00D8
    2c16:	80 ff       	sbrs	r24, 0
    2c18:	1b c0       	rjmp	.+54     	; 0x2c50 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    2c1a:	80 91 da 00 	lds	r24, 0x00DA
    2c1e:	8e 7f       	andi	r24, 0xFE	; 254
    2c20:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    2c24:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    2c28:	80 ff       	sbrs	r24, 0
    2c2a:	0d c0       	rjmp	.+26     	; 0x2c46 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2c2c:	80 e1       	ldi	r24, 0x10	; 16
    2c2e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2c30:	82 e1       	ldi	r24, 0x12	; 18
    2c32:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    2c34:	09 b4       	in	r0, 0x29	; 41
    2c36:	00 fe       	sbrs	r0, 0
    2c38:	fd cf       	rjmp	.-6      	; 0x2c34 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
    2c3c:	80 93 3c 02 	sts	0x023C, r24
			EVENT_USB_Device_Connect();
    2c40:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <EVENT_USB_Device_Connect>
    2c44:	05 c0       	rjmp	.+10     	; 0x2c50 <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2c46:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    2c48:	10 92 3c 02 	sts	0x023C, r1
			EVENT_USB_Device_Disconnect();
    2c4c:	0e 94 01 12 	call	0x2402	; 0x2402 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    2c50:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    2c54:	80 ff       	sbrs	r24, 0
    2c56:	19 c0       	rjmp	.+50     	; 0x2c8a <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    2c58:	80 91 e2 00 	lds	r24, 0x00E2
    2c5c:	80 ff       	sbrs	r24, 0
    2c5e:	15 c0       	rjmp	.+42     	; 0x2c8a <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2c60:	80 91 e2 00 	lds	r24, 0x00E2
    2c64:	8e 7f       	andi	r24, 0xFE	; 254
    2c66:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2c6a:	80 91 e2 00 	lds	r24, 0x00E2
    2c6e:	80 61       	ori	r24, 0x10	; 16
    2c70:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    2c74:	80 91 d8 00 	lds	r24, 0x00D8
    2c78:	80 62       	ori	r24, 0x20	; 32
    2c7a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2c7e:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    2c80:	85 e0       	ldi	r24, 0x05	; 5
    2c82:	80 93 3c 02 	sts	0x023C, r24
		EVENT_USB_Device_Suspend();
    2c86:	0e 94 05 12 	call	0x240a	; 0x240a <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    2c8a:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    2c8e:	84 ff       	sbrs	r24, 4
    2c90:	30 c0       	rjmp	.+96     	; 0x2cf2 <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    2c92:	80 91 e2 00 	lds	r24, 0x00E2
    2c96:	84 ff       	sbrs	r24, 4
    2c98:	2c c0       	rjmp	.+88     	; 0x2cf2 <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2c9a:	80 e1       	ldi	r24, 0x10	; 16
    2c9c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2c9e:	82 e1       	ldi	r24, 0x12	; 18
    2ca0:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    2ca2:	09 b4       	in	r0, 0x29	; 41
    2ca4:	00 fe       	sbrs	r0, 0
    2ca6:	fd cf       	rjmp	.-6      	; 0x2ca2 <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2ca8:	80 91 d8 00 	lds	r24, 0x00D8
    2cac:	8f 7d       	andi	r24, 0xDF	; 223
    2cae:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    2cb2:	80 91 e1 00 	lds	r24, 0x00E1
    2cb6:	8f 7e       	andi	r24, 0xEF	; 239
    2cb8:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    2cbc:	80 91 e2 00 	lds	r24, 0x00E2
    2cc0:	8f 7e       	andi	r24, 0xEF	; 239
    2cc2:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2cc6:	80 91 e2 00 	lds	r24, 0x00E2
    2cca:	81 60       	ori	r24, 0x01	; 1
    2ccc:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    2cd0:	80 91 38 02 	lds	r24, 0x0238
    2cd4:	88 23       	and	r24, r24
    2cd6:	11 f0       	breq	.+4      	; 0x2cdc <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
    2cd8:	84 e0       	ldi	r24, 0x04	; 4
    2cda:	07 c0       	rjmp	.+14     	; 0x2cea <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2cdc:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    2ce0:	87 ff       	sbrs	r24, 7
    2ce2:	02 c0       	rjmp	.+4      	; 0x2ce8 <__vector_10+0x11e>
    2ce4:	83 e0       	ldi	r24, 0x03	; 3
    2ce6:	01 c0       	rjmp	.+2      	; 0x2cea <__vector_10+0x120>
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	80 93 3c 02 	sts	0x023C, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    2cee:	0e 94 06 12 	call	0x240c	; 0x240c <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    2cf2:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    2cf6:	83 ff       	sbrs	r24, 3
    2cf8:	29 c0       	rjmp	.+82     	; 0x2d4c <__vector_10+0x182>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    2cfa:	80 91 e2 00 	lds	r24, 0x00E2
    2cfe:	83 ff       	sbrs	r24, 3
    2d00:	25 c0       	rjmp	.+74     	; 0x2d4c <__vector_10+0x182>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    2d02:	80 91 e1 00 	lds	r24, 0x00E1
    2d06:	87 7f       	andi	r24, 0xF7	; 247
    2d08:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    2d0c:	82 e0       	ldi	r24, 0x02	; 2
    2d0e:	80 93 3c 02 	sts	0x023C, r24
		USB_Device_ConfigurationNumber = 0;
    2d12:	10 92 38 02 	sts	0x0238, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    2d16:	80 91 e1 00 	lds	r24, 0x00E1
    2d1a:	8e 7f       	andi	r24, 0xFE	; 254
    2d1c:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2d20:	80 91 e2 00 	lds	r24, 0x00E2
    2d24:	8e 7f       	andi	r24, 0xFE	; 254
    2d26:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2d2a:	80 91 e2 00 	lds	r24, 0x00E2
    2d2e:	80 61       	ori	r24, 0x10	; 16
    2d30:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2d34:	42 e0       	ldi	r20, 0x02	; 2
    2d36:	60 e0       	ldi	r22, 0x00	; 0
    2d38:	80 e0       	ldi	r24, 0x00	; 0
    2d3a:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    2d3e:	80 91 f0 00 	lds	r24, 0x00F0
    2d42:	88 60       	ori	r24, 0x08	; 8
    2d44:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    2d48:	0e 94 04 12 	call	0x2408	; 0x2408 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    2d4c:	ff 91       	pop	r31
    2d4e:	ef 91       	pop	r30
    2d50:	bf 91       	pop	r27
    2d52:	af 91       	pop	r26
    2d54:	9f 91       	pop	r25
    2d56:	8f 91       	pop	r24
    2d58:	7f 91       	pop	r23
    2d5a:	6f 91       	pop	r22
    2d5c:	5f 91       	pop	r21
    2d5e:	4f 91       	pop	r20
    2d60:	3f 91       	pop	r19
    2d62:	2f 91       	pop	r18
    2d64:	0f 90       	pop	r0
    2d66:	0f be       	out	0x3f, r0	; 63
    2d68:	0f 90       	pop	r0
    2d6a:	1f 90       	pop	r1
    2d6c:	18 95       	reti

00002d6e <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    2d6e:	1f 92       	push	r1
    2d70:	0f 92       	push	r0
    2d72:	0f b6       	in	r0, 0x3f	; 63
    2d74:	0f 92       	push	r0
    2d76:	11 24       	eor	r1, r1
    2d78:	2f 93       	push	r18
    2d7a:	3f 93       	push	r19
    2d7c:	4f 93       	push	r20
    2d7e:	5f 93       	push	r21
    2d80:	6f 93       	push	r22
    2d82:	7f 93       	push	r23
    2d84:	8f 93       	push	r24
    2d86:	9f 93       	push	r25
    2d88:	af 93       	push	r26
    2d8a:	bf 93       	push	r27
    2d8c:	cf 93       	push	r28
    2d8e:	ef 93       	push	r30
    2d90:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2d92:	80 91 e9 00 	lds	r24, 0x00E9
    2d96:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2d98:	90 91 ec 00 	lds	r25, 0x00EC
    2d9c:	90 ff       	sbrs	r25, 0
    2d9e:	02 c0       	rjmp	.+4      	; 0x2da4 <__vector_11+0x36>
    2da0:	90 e8       	ldi	r25, 0x80	; 128
    2da2:	01 c0       	rjmp	.+2      	; 0x2da6 <__vector_11+0x38>
    2da4:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2da6:	c9 2f       	mov	r28, r25
    2da8:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2daa:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    2dae:	80 91 f0 00 	lds	r24, 0x00F0
    2db2:	87 7f       	andi	r24, 0xF7	; 247
    2db4:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    2db8:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    2dba:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <USB_Device_ProcessControlRequest>
    2dbe:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    2dc2:	80 91 f0 00 	lds	r24, 0x00F0
    2dc6:	88 60       	ori	r24, 0x08	; 8
    2dc8:	80 93 f0 00 	sts	0x00F0, r24
    2dcc:	cf 70       	andi	r28, 0x0F	; 15
    2dce:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    2dd2:	ff 91       	pop	r31
    2dd4:	ef 91       	pop	r30
    2dd6:	cf 91       	pop	r28
    2dd8:	bf 91       	pop	r27
    2dda:	af 91       	pop	r26
    2ddc:	9f 91       	pop	r25
    2dde:	8f 91       	pop	r24
    2de0:	7f 91       	pop	r23
    2de2:	6f 91       	pop	r22
    2de4:	5f 91       	pop	r21
    2de6:	4f 91       	pop	r20
    2de8:	3f 91       	pop	r19
    2dea:	2f 91       	pop	r18
    2dec:	0f 90       	pop	r0
    2dee:	0f be       	out	0x3f, r0	; 63
    2df0:	0f 90       	pop	r0
    2df2:	1f 90       	pop	r1
    2df4:	18 95       	reti

00002df6 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    2df6:	1f 93       	push	r17
    2df8:	cf 93       	push	r28
    2dfa:	df 93       	push	r29
    2dfc:	cd b7       	in	r28, 0x3d	; 61
    2dfe:	de b7       	in	r29, 0x3e	; 62
    2e00:	ac 97       	sbiw	r28, 0x2c	; 44
    2e02:	0f b6       	in	r0, 0x3f	; 63
    2e04:	f8 94       	cli
    2e06:	de bf       	out	0x3e, r29	; 62
    2e08:	0f be       	out	0x3f, r0	; 63
    2e0a:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    2e0c:	ed e3       	ldi	r30, 0x3D	; 61
    2e0e:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2e10:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    2e14:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    2e16:	22 e0       	ldi	r18, 0x02	; 2
    2e18:	e5 34       	cpi	r30, 0x45	; 69
    2e1a:	f2 07       	cpc	r31, r18
    2e1c:	c9 f7       	brne	.-14     	; 0x2e10 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    2e1e:	0e 94 61 12 	call	0x24c2	; 0x24c2 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2e22:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    2e26:	83 ff       	sbrs	r24, 3
    2e28:	37 c1       	rjmp	.+622    	; 0x3098 <USB_Device_ProcessControlRequest+0x2a2>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    2e2a:	80 91 3d 02 	lds	r24, 0x023D

		switch (USB_ControlRequest.bRequest)
    2e2e:	90 91 3e 02 	lds	r25, 0x023E
    2e32:	95 30       	cpi	r25, 0x05	; 5
    2e34:	09 f4       	brne	.+2      	; 0x2e38 <USB_Device_ProcessControlRequest+0x42>
    2e36:	88 c0       	rjmp	.+272    	; 0x2f48 <USB_Device_ProcessControlRequest+0x152>
    2e38:	38 f4       	brcc	.+14     	; 0x2e48 <USB_Device_ProcessControlRequest+0x52>
    2e3a:	91 30       	cpi	r25, 0x01	; 1
    2e3c:	b1 f1       	breq	.+108    	; 0x2eaa <USB_Device_ProcessControlRequest+0xb4>
    2e3e:	70 f0       	brcs	.+28     	; 0x2e5c <USB_Device_ProcessControlRequest+0x66>
    2e40:	93 30       	cpi	r25, 0x03	; 3
    2e42:	09 f0       	breq	.+2      	; 0x2e46 <USB_Device_ProcessControlRequest+0x50>
    2e44:	29 c1       	rjmp	.+594    	; 0x3098 <USB_Device_ProcessControlRequest+0x2a2>
    2e46:	31 c0       	rjmp	.+98     	; 0x2eaa <USB_Device_ProcessControlRequest+0xb4>
    2e48:	98 30       	cpi	r25, 0x08	; 8
    2e4a:	09 f4       	brne	.+2      	; 0x2e4e <USB_Device_ProcessControlRequest+0x58>
    2e4c:	f8 c0       	rjmp	.+496    	; 0x303e <USB_Device_ProcessControlRequest+0x248>
    2e4e:	99 30       	cpi	r25, 0x09	; 9
    2e50:	09 f4       	brne	.+2      	; 0x2e54 <USB_Device_ProcessControlRequest+0x5e>
    2e52:	04 c1       	rjmp	.+520    	; 0x305c <USB_Device_ProcessControlRequest+0x266>
    2e54:	96 30       	cpi	r25, 0x06	; 6
    2e56:	09 f0       	breq	.+2      	; 0x2e5a <USB_Device_ProcessControlRequest+0x64>
    2e58:	1f c1       	rjmp	.+574    	; 0x3098 <USB_Device_ProcessControlRequest+0x2a2>
    2e5a:	9d c0       	rjmp	.+314    	; 0x2f96 <USB_Device_ProcessControlRequest+0x1a0>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2e5c:	80 38       	cpi	r24, 0x80	; 128
    2e5e:	21 f0       	breq	.+8      	; 0x2e68 <USB_Device_ProcessControlRequest+0x72>
    2e60:	82 38       	cpi	r24, 0x82	; 130
    2e62:	09 f0       	breq	.+2      	; 0x2e66 <USB_Device_ProcessControlRequest+0x70>
    2e64:	19 c1       	rjmp	.+562    	; 0x3098 <USB_Device_ProcessControlRequest+0x2a2>
    2e66:	08 c0       	rjmp	.+16     	; 0x2e78 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    2e68:	80 91 39 02 	lds	r24, 0x0239
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    2e6c:	90 91 3a 02 	lds	r25, 0x023A
    2e70:	99 23       	and	r25, r25
    2e72:	89 f0       	breq	.+34     	; 0x2e96 <USB_Device_ProcessControlRequest+0xa0>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    2e74:	82 60       	ori	r24, 0x02	; 2
    2e76:	0f c0       	rjmp	.+30     	; 0x2e96 <USB_Device_ProcessControlRequest+0xa0>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    2e78:	80 91 41 02 	lds	r24, 0x0241
    2e7c:	90 91 42 02 	lds	r25, 0x0242
    2e80:	8f 70       	andi	r24, 0x0F	; 15
    2e82:	99 27       	eor	r25, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2e84:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2e88:	80 91 eb 00 	lds	r24, 0x00EB
    2e8c:	85 fb       	bst	r24, 5
    2e8e:	88 27       	eor	r24, r24
    2e90:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2e92:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2e96:	90 91 e8 00 	lds	r25, 0x00E8
    2e9a:	97 7f       	andi	r25, 0xF7	; 247
    2e9c:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    2ea0:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    2ea4:	10 92 f1 00 	sts	0x00F1, r1
    2ea8:	d5 c0       	rjmp	.+426    	; 0x3054 <USB_Device_ProcessControlRequest+0x25e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2eaa:	88 23       	and	r24, r24
    2eac:	19 f0       	breq	.+6      	; 0x2eb4 <USB_Device_ProcessControlRequest+0xbe>
    2eae:	82 30       	cpi	r24, 0x02	; 2
    2eb0:	09 f0       	breq	.+2      	; 0x2eb4 <USB_Device_ProcessControlRequest+0xbe>
    2eb2:	f2 c0       	rjmp	.+484    	; 0x3098 <USB_Device_ProcessControlRequest+0x2a2>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    2eb4:	8f 71       	andi	r24, 0x1F	; 31
    2eb6:	21 f0       	breq	.+8      	; 0x2ec0 <USB_Device_ProcessControlRequest+0xca>
    2eb8:	82 30       	cpi	r24, 0x02	; 2
    2eba:	09 f0       	breq	.+2      	; 0x2ebe <USB_Device_ProcessControlRequest+0xc8>
    2ebc:	ed c0       	rjmp	.+474    	; 0x3098 <USB_Device_ProcessControlRequest+0x2a2>
    2ebe:	0b c0       	rjmp	.+22     	; 0x2ed6 <USB_Device_ProcessControlRequest+0xe0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    2ec0:	80 91 3f 02 	lds	r24, 0x023F
    2ec4:	81 30       	cpi	r24, 0x01	; 1
    2ec6:	09 f0       	breq	.+2      	; 0x2eca <USB_Device_ProcessControlRequest+0xd4>
    2ec8:	e7 c0       	rjmp	.+462    	; 0x3098 <USB_Device_ProcessControlRequest+0x2a2>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    2eca:	93 30       	cpi	r25, 0x03	; 3
    2ecc:	09 f0       	breq	.+2      	; 0x2ed0 <USB_Device_ProcessControlRequest+0xda>
    2ece:	80 e0       	ldi	r24, 0x00	; 0
    2ed0:	80 93 3a 02 	sts	0x023A, r24
    2ed4:	2f c0       	rjmp	.+94     	; 0x2f34 <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    2ed6:	80 91 3f 02 	lds	r24, 0x023F
    2eda:	81 11       	cpse	r24, r1
    2edc:	2b c0       	rjmp	.+86     	; 0x2f34 <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    2ede:	80 91 41 02 	lds	r24, 0x0241
    2ee2:	90 91 42 02 	lds	r25, 0x0242
    2ee6:	8f 70       	andi	r24, 0x0F	; 15
    2ee8:	99 27       	eor	r25, r25

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    2eea:	00 97       	sbiw	r24, 0x00	; 0
    2eec:	09 f4       	brne	.+2      	; 0x2ef0 <USB_Device_ProcessControlRequest+0xfa>
    2eee:	d4 c0       	rjmp	.+424    	; 0x3098 <USB_Device_ProcessControlRequest+0x2a2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2ef0:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    2ef4:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    2ef8:	20 ff       	sbrs	r18, 0
    2efa:	1c c0       	rjmp	.+56     	; 0x2f34 <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    2efc:	20 91 3e 02 	lds	r18, 0x023E
    2f00:	23 30       	cpi	r18, 0x03	; 3
    2f02:	21 f4       	brne	.+8      	; 0x2f0c <USB_Device_ProcessControlRequest+0x116>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2f04:	80 91 eb 00 	lds	r24, 0x00EB
    2f08:	80 62       	ori	r24, 0x20	; 32
    2f0a:	12 c0       	rjmp	.+36     	; 0x2f30 <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    2f0c:	90 91 eb 00 	lds	r25, 0x00EB
    2f10:	90 61       	ori	r25, 0x10	; 16
    2f12:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    2f16:	21 e0       	ldi	r18, 0x01	; 1
    2f18:	30 e0       	ldi	r19, 0x00	; 0
    2f1a:	01 c0       	rjmp	.+2      	; 0x2f1e <USB_Device_ProcessControlRequest+0x128>
    2f1c:	22 0f       	add	r18, r18
    2f1e:	8a 95       	dec	r24
    2f20:	ea f7       	brpl	.-6      	; 0x2f1c <USB_Device_ProcessControlRequest+0x126>
    2f22:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
    2f26:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    2f2a:	80 91 eb 00 	lds	r24, 0x00EB
    2f2e:	88 60       	ori	r24, 0x08	; 8
    2f30:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2f34:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2f38:	80 91 e8 00 	lds	r24, 0x00E8
    2f3c:	87 7f       	andi	r24, 0xF7	; 247
    2f3e:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    2f42:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <Endpoint_ClearStatusStage>
    2f46:	a8 c0       	rjmp	.+336    	; 0x3098 <USB_Device_ProcessControlRequest+0x2a2>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2f48:	81 11       	cpse	r24, r1
    2f4a:	a6 c0       	rjmp	.+332    	; 0x3098 <USB_Device_ProcessControlRequest+0x2a2>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    2f4c:	80 91 3f 02 	lds	r24, 0x023F
    2f50:	90 91 40 02 	lds	r25, 0x0240
    2f54:	8f 77       	andi	r24, 0x7F	; 127
    2f56:	99 27       	eor	r25, r25
    2f58:	18 2f       	mov	r17, r24
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    2f5a:	90 91 e3 00 	lds	r25, 0x00E3
    2f5e:	90 78       	andi	r25, 0x80	; 128
    2f60:	98 2b       	or	r25, r24
    2f62:	90 93 e3 00 	sts	0x00E3, r25
    2f66:	80 91 e8 00 	lds	r24, 0x00E8
    2f6a:	87 7f       	andi	r24, 0xF7	; 247
    2f6c:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    2f70:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2f74:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    2f78:	80 ff       	sbrs	r24, 0
    2f7a:	fc cf       	rjmp	.-8      	; 0x2f74 <USB_Device_ProcessControlRequest+0x17e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    2f7c:	80 91 e3 00 	lds	r24, 0x00E3
    2f80:	80 68       	ori	r24, 0x80	; 128
    2f82:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2f86:	11 23       	and	r17, r17
    2f88:	11 f0       	breq	.+4      	; 0x2f8e <USB_Device_ProcessControlRequest+0x198>
    2f8a:	83 e0       	ldi	r24, 0x03	; 3
    2f8c:	01 c0       	rjmp	.+2      	; 0x2f90 <USB_Device_ProcessControlRequest+0x19a>
    2f8e:	82 e0       	ldi	r24, 0x02	; 2
    2f90:	80 93 3c 02 	sts	0x023C, r24
    2f94:	81 c0       	rjmp	.+258    	; 0x3098 <USB_Device_ProcessControlRequest+0x2a2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2f96:	80 58       	subi	r24, 0x80	; 128
    2f98:	82 30       	cpi	r24, 0x02	; 2
    2f9a:	08 f0       	brcs	.+2      	; 0x2f9e <USB_Device_ProcessControlRequest+0x1a8>
    2f9c:	7d c0       	rjmp	.+250    	; 0x3098 <USB_Device_ProcessControlRequest+0x2a2>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    2f9e:	80 91 3f 02 	lds	r24, 0x023F
    2fa2:	90 91 40 02 	lds	r25, 0x0240
    2fa6:	8c 3d       	cpi	r24, 0xDC	; 220
    2fa8:	23 e0       	ldi	r18, 0x03	; 3
    2faa:	92 07       	cpc	r25, r18
    2fac:	79 f5       	brne	.+94     	; 0x300c <USB_Device_ProcessControlRequest+0x216>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    2fae:	83 e0       	ldi	r24, 0x03	; 3
    2fb0:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    2fb2:	8a e2       	ldi	r24, 0x2A	; 42
    2fb4:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    2fb6:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2fb8:	f8 94       	cli

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
    2fba:	de 01       	movw	r26, r28
    2fbc:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2fbe:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    2fc0:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    2fc2:	51 e2       	ldi	r21, 0x21	; 33
    2fc4:	e3 2f       	mov	r30, r19
    2fc6:	f0 e0       	ldi	r31, 0x00	; 0
    2fc8:	50 93 57 00 	sts	0x0057, r21
    2fcc:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    2fce:	20 ff       	sbrs	r18, 0
    2fd0:	03 c0       	rjmp	.+6      	; 0x2fd8 <USB_Device_ProcessControlRequest+0x1e2>
					{
						SerialByte >>= 4;
    2fd2:	e2 95       	swap	r30
    2fd4:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    2fd6:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    2fd8:	ef 70       	andi	r30, 0x0F	; 15
    2fda:	8e 2f       	mov	r24, r30
    2fdc:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    2fde:	ea 30       	cpi	r30, 0x0A	; 10
    2fe0:	10 f0       	brcs	.+4      	; 0x2fe6 <USB_Device_ProcessControlRequest+0x1f0>
    2fe2:	c7 96       	adiw	r24, 0x37	; 55
    2fe4:	01 c0       	rjmp	.+2      	; 0x2fe8 <USB_Device_ProcessControlRequest+0x1f2>
    2fe6:	c0 96       	adiw	r24, 0x30	; 48
    2fe8:	8d 93       	st	X+, r24
    2fea:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2fec:	2f 5f       	subi	r18, 0xFF	; 255
    2fee:	24 31       	cpi	r18, 0x14	; 20
    2ff0:	49 f7       	brne	.-46     	; 0x2fc4 <USB_Device_ProcessControlRequest+0x1ce>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    2ff2:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2ff4:	80 91 e8 00 	lds	r24, 0x00E8
    2ff8:	87 7f       	andi	r24, 0xF7	; 247
    2ffa:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    2ffe:	6a e2       	ldi	r22, 0x2A	; 42
    3000:	70 e0       	ldi	r23, 0x00	; 0
    3002:	ce 01       	movw	r24, r28
    3004:	01 96       	adiw	r24, 0x01	; 1
    3006:	0e 94 19 14 	call	0x2832	; 0x2832 <Endpoint_Write_Control_Stream_LE>
    300a:	13 c0       	rjmp	.+38     	; 0x3032 <USB_Device_ProcessControlRequest+0x23c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    300c:	ae 01       	movw	r20, r28
    300e:	45 5d       	subi	r20, 0xD5	; 213
    3010:	5f 4f       	sbci	r21, 0xFF	; 255
    3012:	60 91 41 02 	lds	r22, 0x0241
    3016:	0e 94 4f 13 	call	0x269e	; 0x269e <CALLBACK_USB_GetDescriptor>
    301a:	00 97       	sbiw	r24, 0x00	; 0
    301c:	e9 f1       	breq	.+122    	; 0x3098 <USB_Device_ProcessControlRequest+0x2a2>
    301e:	20 91 e8 00 	lds	r18, 0x00E8
    3022:	27 7f       	andi	r18, 0xF7	; 247
    3024:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    3028:	bc 01       	movw	r22, r24
    302a:	8b a5       	ldd	r24, Y+43	; 0x2b
    302c:	9c a5       	ldd	r25, Y+44	; 0x2c
    302e:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3032:	80 91 e8 00 	lds	r24, 0x00E8
    3036:	8b 77       	andi	r24, 0x7B	; 123
    3038:	80 93 e8 00 	sts	0x00E8, r24
    303c:	2d c0       	rjmp	.+90     	; 0x3098 <USB_Device_ProcessControlRequest+0x2a2>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    303e:	80 38       	cpi	r24, 0x80	; 128
    3040:	59 f5       	brne	.+86     	; 0x3098 <USB_Device_ProcessControlRequest+0x2a2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3042:	80 91 e8 00 	lds	r24, 0x00E8
    3046:	87 7f       	andi	r24, 0xF7	; 247
    3048:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    304c:	80 91 38 02 	lds	r24, 0x0238
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3050:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3054:	80 91 e8 00 	lds	r24, 0x00E8
    3058:	8e 77       	andi	r24, 0x7E	; 126
    305a:	71 cf       	rjmp	.-286    	; 0x2f3e <USB_Device_ProcessControlRequest+0x148>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    305c:	81 11       	cpse	r24, r1
    305e:	1c c0       	rjmp	.+56     	; 0x3098 <USB_Device_ProcessControlRequest+0x2a2>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    3060:	90 91 3f 02 	lds	r25, 0x023F
    3064:	92 30       	cpi	r25, 0x02	; 2
    3066:	c0 f4       	brcc	.+48     	; 0x3098 <USB_Device_ProcessControlRequest+0x2a2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3068:	80 91 e8 00 	lds	r24, 0x00E8
    306c:	87 7f       	andi	r24, 0xF7	; 247
    306e:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    3072:	90 93 38 02 	sts	0x0238, r25

	Endpoint_ClearStatusStage();
    3076:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    307a:	80 91 38 02 	lds	r24, 0x0238
    307e:	81 11       	cpse	r24, r1
    3080:	04 c0       	rjmp	.+8      	; 0x308a <USB_Device_ProcessControlRequest+0x294>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    3082:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    3086:	87 ff       	sbrs	r24, 7
    3088:	02 c0       	rjmp	.+4      	; 0x308e <USB_Device_ProcessControlRequest+0x298>
    308a:	84 e0       	ldi	r24, 0x04	; 4
    308c:	01 c0       	rjmp	.+2      	; 0x3090 <USB_Device_ProcessControlRequest+0x29a>
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	80 93 3c 02 	sts	0x023C, r24

	EVENT_USB_Device_ConfigurationChanged();
    3094:	0e 94 48 12 	call	0x2490	; 0x2490 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3098:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    309c:	83 ff       	sbrs	r24, 3
    309e:	0a c0       	rjmp	.+20     	; 0x30b4 <USB_Device_ProcessControlRequest+0x2be>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    30a0:	80 91 e8 00 	lds	r24, 0x00E8
    30a4:	87 7f       	andi	r24, 0xF7	; 247
    30a6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    30aa:	80 91 eb 00 	lds	r24, 0x00EB
    30ae:	80 62       	ori	r24, 0x20	; 32
    30b0:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    30b4:	ac 96       	adiw	r28, 0x2c	; 44
    30b6:	0f b6       	in	r0, 0x3f	; 63
    30b8:	f8 94       	cli
    30ba:	de bf       	out	0x3e, r29	; 62
    30bc:	0f be       	out	0x3f, r0	; 63
    30be:	cd bf       	out	0x3d, r28	; 61
    30c0:	df 91       	pop	r29
    30c2:	cf 91       	pop	r28
    30c4:	1f 91       	pop	r17
    30c6:	08 95       	ret

000030c8 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    30c8:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    30ca:	80 91 3c 02 	lds	r24, 0x023C
    30ce:	88 23       	and	r24, r24
    30d0:	b1 f0       	breq	.+44     	; 0x30fe <USB_USBTask+0x36>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    30d2:	80 91 e9 00 	lds	r24, 0x00E9
    30d6:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    30d8:	90 91 ec 00 	lds	r25, 0x00EC
    30dc:	90 ff       	sbrs	r25, 0
    30de:	02 c0       	rjmp	.+4      	; 0x30e4 <USB_USBTask+0x1c>
    30e0:	90 e8       	ldi	r25, 0x80	; 128
    30e2:	01 c0       	rjmp	.+2      	; 0x30e6 <USB_USBTask+0x1e>
    30e4:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    30e6:	c9 2f       	mov	r28, r25
    30e8:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    30ea:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    30ee:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    30f2:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    30f4:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    30f8:	cf 70       	andi	r28, 0x0F	; 15
    30fa:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    30fe:	cf 91       	pop	r28
    3100:	08 95       	ret

00003102 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    3102:	90 93 a2 01 	sts	0x01A2, r25
    3106:	80 93 a1 01 	sts	0x01A1, r24
    310a:	08 95       	ret

0000310c <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    310c:	e0 91 a1 01 	lds	r30, 0x01A1
    3110:	f0 91 a2 01 	lds	r31, 0x01A2
    3114:	30 97       	sbiw	r30, 0x00	; 0
    3116:	21 f0       	breq	.+8      	; 0x3120 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    3118:	01 90       	ld	r0, Z+
    311a:	f0 81       	ld	r31, Z
    311c:	e0 2d       	mov	r30, r0
    311e:	09 94       	ijmp
}
    3120:	80 e0       	ldi	r24, 0x00	; 0
    3122:	08 95       	ret

00003124 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    if (!driver) return;
    3124:	e0 91 a1 01 	lds	r30, 0x01A1
    3128:	f0 91 a2 01 	lds	r31, 0x01A2
    312c:	30 97       	sbiw	r30, 0x00	; 0
    312e:	21 f0       	breq	.+8      	; 0x3138 <host_keyboard_send+0x14>
    (*driver->send_keyboard)(report);
    3130:	02 80       	ldd	r0, Z+2	; 0x02
    3132:	f3 81       	ldd	r31, Z+3	; 0x03
    3134:	e0 2d       	mov	r30, r0
    3136:	09 94       	ijmp
    3138:	08 95       	ret

0000313a <host_mouse_send>:
    }
}

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    313a:	e0 91 a1 01 	lds	r30, 0x01A1
    313e:	f0 91 a2 01 	lds	r31, 0x01A2
    3142:	30 97       	sbiw	r30, 0x00	; 0
    3144:	21 f0       	breq	.+8      	; 0x314e <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    3146:	04 80       	ldd	r0, Z+4	; 0x04
    3148:	f5 81       	ldd	r31, Z+5	; 0x05
    314a:	e0 2d       	mov	r30, r0
    314c:	09 94       	ijmp
    314e:	08 95       	ret

00003150 <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    3150:	20 91 a3 01 	lds	r18, 0x01A3
    3154:	30 91 a4 01 	lds	r19, 0x01A4
    3158:	82 17       	cp	r24, r18
    315a:	93 07       	cpc	r25, r19
    315c:	71 f0       	breq	.+28     	; 0x317a <host_system_send+0x2a>
    last_system_report = report;
    315e:	90 93 a4 01 	sts	0x01A4, r25
    3162:	80 93 a3 01 	sts	0x01A3, r24

    if (!driver) return;
    3166:	e0 91 a1 01 	lds	r30, 0x01A1
    316a:	f0 91 a2 01 	lds	r31, 0x01A2
    316e:	30 97       	sbiw	r30, 0x00	; 0
    3170:	21 f0       	breq	.+8      	; 0x317a <host_system_send+0x2a>
    (*driver->send_system)(report);
    3172:	06 80       	ldd	r0, Z+6	; 0x06
    3174:	f7 81       	ldd	r31, Z+7	; 0x07
    3176:	e0 2d       	mov	r30, r0
    3178:	09 94       	ijmp
    317a:	08 95       	ret

0000317c <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    317c:	20 91 a5 01 	lds	r18, 0x01A5
    3180:	30 91 a6 01 	lds	r19, 0x01A6
    3184:	82 17       	cp	r24, r18
    3186:	93 07       	cpc	r25, r19
    3188:	71 f0       	breq	.+28     	; 0x31a6 <host_consumer_send+0x2a>
    last_consumer_report = report;
    318a:	90 93 a6 01 	sts	0x01A6, r25
    318e:	80 93 a5 01 	sts	0x01A5, r24

    if (!driver) return;
    3192:	e0 91 a1 01 	lds	r30, 0x01A1
    3196:	f0 91 a2 01 	lds	r31, 0x01A2
    319a:	30 97       	sbiw	r30, 0x00	; 0
    319c:	21 f0       	breq	.+8      	; 0x31a6 <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    319e:	00 84       	ldd	r0, Z+8	; 0x08
    31a0:	f1 85       	ldd	r31, Z+9	; 0x09
    31a2:	e0 2d       	mov	r30, r0
    31a4:	09 94       	ijmp
    31a6:	08 95       	ret

000031a8 <matrix_setup>:
    return false;
}
#endif


__attribute__ ((weak)) void matrix_setup(void) {}
    31a8:	08 95       	ret

000031aa <keyboard_setup>:
void keyboard_setup(void)
{
    matrix_setup();
    31aa:	0c 94 d4 18 	jmp	0x31a8	; 0x31a8 <matrix_setup>

000031ae <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    31ae:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <timer_init>
    matrix_init();
    31b2:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    31b6:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <bootmagic>
#endif

#ifdef BACKLIGHT_ENABLE
    backlight_init();
    31ba:	0c 94 bb 2b 	jmp	0x5776	; 0x5776 <backlight_init>

000031be <keyboard_set_leds>:
}

void keyboard_set_leds(uint8_t leds)
{
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    led_set(leds);
    31be:	0c 94 08 05 	jmp	0xa10	; 0xa10 <led_set>

000031c2 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    31c2:	5f 92       	push	r5
    31c4:	6f 92       	push	r6
    31c6:	7f 92       	push	r7
    31c8:	8f 92       	push	r8
    31ca:	9f 92       	push	r9
    31cc:	af 92       	push	r10
    31ce:	bf 92       	push	r11
    31d0:	cf 92       	push	r12
    31d2:	df 92       	push	r13
    31d4:	ef 92       	push	r14
    31d6:	ff 92       	push	r15
    31d8:	0f 93       	push	r16
    31da:	1f 93       	push	r17
    31dc:	cf 93       	push	r28
    31de:	df 93       	push	r29
    31e0:	cd b7       	in	r28, 0x3d	; 61
    31e2:	de b7       	in	r29, 0x3e	; 62
    31e4:	2a 97       	sbiw	r28, 0x0a	; 10
    31e6:	0f b6       	in	r0, 0x3f	; 63
    31e8:	f8 94       	cli
    31ea:	de bf       	out	0x3e, r29	; 62
    31ec:	0f be       	out	0x3f, r0	; 63
    31ee:	cd bf       	out	0x3d, r28	; 61
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    31f0:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <matrix_scan>
    31f4:	97 ea       	ldi	r25, 0xA7	; 167
    31f6:	c9 2e       	mov	r12, r25
    31f8:	91 e0       	ldi	r25, 0x01	; 1
    31fa:	d9 2e       	mov	r13, r25
    31fc:	00 e0       	ldi	r16, 0x00	; 0
    31fe:	10 e0       	ldi	r17, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    3200:	aa 24       	eor	r10, r10
    3202:	a3 94       	inc	r10
    3204:	b1 2c       	mov	r11, r1
    3206:	50 2e       	mov	r5, r16
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    3208:	80 2f       	mov	r24, r16
    320a:	0e 94 05 11 	call	0x220a	; 0x220a <matrix_get_row>
    320e:	3c 01       	movw	r6, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    3210:	f6 01       	movw	r30, r12
    3212:	e1 90       	ld	r14, Z+
    3214:	f1 90       	ld	r15, Z+
    3216:	6f 01       	movw	r12, r30
    3218:	e8 26       	eor	r14, r24
    321a:	f9 26       	eor	r15, r25
        if (matrix_change) {
    321c:	e1 14       	cp	r14, r1
    321e:	f1 04       	cpc	r15, r1
    3220:	31 f4       	brne	.+12     	; 0x322e <keyboard_task+0x6c>
    3222:	0f 5f       	subi	r16, 0xFF	; 255
    3224:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3226:	05 30       	cpi	r16, 0x05	; 5
    3228:	11 05       	cpc	r17, r1
    322a:	69 f7       	brne	.-38     	; 0x3206 <keyboard_task+0x44>
    322c:	3a c0       	rjmp	.+116    	; 0x32a2 <keyboard_task+0xe0>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    322e:	80 91 05 02 	lds	r24, 0x0205
    3232:	81 fd       	sbrc	r24, 1
    3234:	0e 94 0e 11 	call	0x221c	; 0x221c <matrix_print>
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    3238:	20 e0       	ldi	r18, 0x00	; 0
    323a:	30 e0       	ldi	r19, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    323c:	45 01       	movw	r8, r10
    323e:	02 2e       	mov	r0, r18
    3240:	02 c0       	rjmp	.+4      	; 0x3246 <keyboard_task+0x84>
    3242:	88 0c       	add	r8, r8
    3244:	99 1c       	adc	r9, r9
    3246:	0a 94       	dec	r0
    3248:	e2 f7       	brpl	.-8      	; 0x3242 <keyboard_task+0x80>
    324a:	c4 01       	movw	r24, r8
    324c:	8e 21       	and	r24, r14
    324e:	9f 21       	and	r25, r15
    3250:	89 2b       	or	r24, r25
    3252:	09 f1       	breq	.+66     	; 0x3296 <keyboard_task+0xd4>
                    action_exec((keyevent_t){
    3254:	2e 83       	std	Y+6, r18	; 0x06
    3256:	5f 82       	std	Y+7, r5	; 0x07
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    3258:	68 20       	and	r6, r8
    325a:	79 20       	and	r7, r9
    325c:	81 e0       	ldi	r24, 0x01	; 1
    325e:	67 28       	or	r6, r7
    3260:	09 f4       	brne	.+2      	; 0x3264 <keyboard_task+0xa2>
    3262:	80 e0       	ldi	r24, 0x00	; 0
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    3264:	88 87       	std	Y+8, r24	; 0x08
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    3266:	0e 94 34 25 	call	0x4a68	; 0x4a68 <timer_read>
    326a:	81 60       	ori	r24, 0x01	; 1
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    326c:	78 2f       	mov	r23, r24
    326e:	9a 87       	std	Y+10, r25	; 0x0a
    3270:	89 87       	std	Y+9, r24	; 0x09
    3272:	4e 81       	ldd	r20, Y+6	; 0x06
    3274:	5f 81       	ldd	r21, Y+7	; 0x07
    3276:	68 85       	ldd	r22, Y+8	; 0x08
    3278:	8a 85       	ldd	r24, Y+10	; 0x0a
    327a:	0e 94 9a 19 	call	0x3334	; 0x3334 <action_exec>
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    327e:	f8 01       	movw	r30, r16
    3280:	ee 0f       	add	r30, r30
    3282:	ff 1f       	adc	r31, r31
    3284:	e9 55       	subi	r30, 0x59	; 89
    3286:	fe 4f       	sbci	r31, 0xFE	; 254
    3288:	80 81       	ld	r24, Z
    328a:	91 81       	ldd	r25, Z+1	; 0x01
    328c:	88 25       	eor	r24, r8
    328e:	99 25       	eor	r25, r9
    3290:	91 83       	std	Z+1, r25	; 0x01
    3292:	80 83       	st	Z, r24
                    // process a key per task call
                    goto MATRIX_LOOP_END;
    3294:	16 c0       	rjmp	.+44     	; 0x32c2 <keyboard_task+0x100>
    3296:	2f 5f       	subi	r18, 0xFF	; 255
    3298:	3f 4f       	sbci	r19, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    329a:	2e 30       	cpi	r18, 0x0E	; 14
    329c:	31 05       	cpc	r19, r1
    329e:	71 f6       	brne	.-100    	; 0x323c <keyboard_task+0x7a>
    32a0:	c0 cf       	rjmp	.-128    	; 0x3222 <keyboard_task+0x60>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    32a2:	8f ef       	ldi	r24, 0xFF	; 255
    32a4:	89 83       	std	Y+1, r24	; 0x01
    32a6:	8a 83       	std	Y+2, r24	; 0x02
    32a8:	1b 82       	std	Y+3, r1	; 0x03
    32aa:	0e 94 34 25 	call	0x4a68	; 0x4a68 <timer_read>
    32ae:	81 60       	ori	r24, 0x01	; 1
    32b0:	78 2f       	mov	r23, r24
    32b2:	9d 83       	std	Y+5, r25	; 0x05
    32b4:	8c 83       	std	Y+4, r24	; 0x04
    32b6:	49 81       	ldd	r20, Y+1	; 0x01
    32b8:	5a 81       	ldd	r21, Y+2	; 0x02
    32ba:	6b 81       	ldd	r22, Y+3	; 0x03
    32bc:	8d 81       	ldd	r24, Y+5	; 0x05
    32be:	0e 94 9a 19 	call	0x3334	; 0x3334 <action_exec>

MATRIX_LOOP_END:

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    32c2:	0e 94 f3 28 	call	0x51e6	; 0x51e6 <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    32c6:	10 91 b1 01 	lds	r17, 0x01B1
    32ca:	0e 94 86 18 	call	0x310c	; 0x310c <host_keyboard_leds>
    32ce:	18 17       	cp	r17, r24
    32d0:	d9 f0       	breq	.+54     	; 0x3308 <keyboard_task+0x146>
        led_status = host_keyboard_leds();
    32d2:	0e 94 86 18 	call	0x310c	; 0x310c <host_keyboard_leds>
    32d6:	80 93 b1 01 	sts	0x01B1, r24
        keyboard_set_leds(led_status);
    }
}
    32da:	2a 96       	adiw	r28, 0x0a	; 10
    32dc:	0f b6       	in	r0, 0x3f	; 63
    32de:	f8 94       	cli
    32e0:	de bf       	out	0x3e, r29	; 62
    32e2:	0f be       	out	0x3f, r0	; 63
    32e4:	cd bf       	out	0x3d, r28	; 61
    32e6:	df 91       	pop	r29
    32e8:	cf 91       	pop	r28
    32ea:	1f 91       	pop	r17
    32ec:	0f 91       	pop	r16
    32ee:	ff 90       	pop	r15
    32f0:	ef 90       	pop	r14
    32f2:	df 90       	pop	r13
    32f4:	cf 90       	pop	r12
    32f6:	bf 90       	pop	r11
    32f8:	af 90       	pop	r10
    32fa:	9f 90       	pop	r9
    32fc:	8f 90       	pop	r8
    32fe:	7f 90       	pop	r7
    3300:	6f 90       	pop	r6
    3302:	5f 90       	pop	r5
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        keyboard_set_leds(led_status);
    3304:	0c 94 df 18 	jmp	0x31be	; 0x31be <keyboard_set_leds>
    }
}
    3308:	2a 96       	adiw	r28, 0x0a	; 10
    330a:	0f b6       	in	r0, 0x3f	; 63
    330c:	f8 94       	cli
    330e:	de bf       	out	0x3e, r29	; 62
    3310:	0f be       	out	0x3f, r0	; 63
    3312:	cd bf       	out	0x3d, r28	; 61
    3314:	df 91       	pop	r29
    3316:	cf 91       	pop	r28
    3318:	1f 91       	pop	r17
    331a:	0f 91       	pop	r16
    331c:	ff 90       	pop	r15
    331e:	ef 90       	pop	r14
    3320:	df 90       	pop	r13
    3322:	cf 90       	pop	r12
    3324:	bf 90       	pop	r11
    3326:	af 90       	pop	r10
    3328:	9f 90       	pop	r9
    332a:	8f 90       	pop	r8
    332c:	7f 90       	pop	r7
    332e:	6f 90       	pop	r6
    3330:	5f 90       	pop	r5
    3332:	08 95       	ret

00003334 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    3334:	cf 93       	push	r28
    3336:	df 93       	push	r29
    3338:	cd b7       	in	r28, 0x3d	; 61
    333a:	de b7       	in	r29, 0x3e	; 62
    333c:	2b 97       	sbiw	r28, 0x0b	; 11
    333e:	0f b6       	in	r0, 0x3f	; 63
    3340:	f8 94       	cli
    3342:	de bf       	out	0x3e, r29	; 62
    3344:	0f be       	out	0x3f, r0	; 63
    3346:	cd bf       	out	0x3d, r28	; 61
    3348:	4f 83       	std	Y+7, r20	; 0x07
    334a:	58 87       	std	Y+8, r21	; 0x08
    334c:	69 87       	std	Y+9, r22	; 0x09
    334e:	7a 87       	std	Y+10, r23	; 0x0a
    3350:	8b 87       	std	Y+11, r24	; 0x0b
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
    3352:	de 01       	movw	r26, r28
    3354:	11 96       	adiw	r26, 0x01	; 1
    3356:	86 e0       	ldi	r24, 0x06	; 6
    3358:	fd 01       	movw	r30, r26
    335a:	11 92       	st	Z+, r1
    335c:	8a 95       	dec	r24
    335e:	e9 f7       	brne	.-6      	; 0x335a <action_exec+0x26>
    3360:	85 e0       	ldi	r24, 0x05	; 5
    3362:	fe 01       	movw	r30, r28
    3364:	37 96       	adiw	r30, 0x07	; 7
    3366:	01 90       	ld	r0, Z+
    3368:	0d 92       	st	X+, r0
    336a:	8a 95       	dec	r24
    336c:	e1 f7       	brne	.-8      	; 0x3366 <action_exec+0x32>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    336e:	49 81       	ldd	r20, Y+1	; 0x01
    3370:	5a 81       	ldd	r21, Y+2	; 0x02
    3372:	6b 81       	ldd	r22, Y+3	; 0x03
    3374:	7c 81       	ldd	r23, Y+4	; 0x04
    3376:	8d 81       	ldd	r24, Y+5	; 0x05
    3378:	9e 81       	ldd	r25, Y+6	; 0x06
    337a:	0e 94 76 21 	call	0x42ec	; 0x42ec <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    337e:	2b 96       	adiw	r28, 0x0b	; 11
    3380:	0f b6       	in	r0, 0x3f	; 63
    3382:	f8 94       	cli
    3384:	de bf       	out	0x3e, r29	; 62
    3386:	0f be       	out	0x3f, r0	; 63
    3388:	cd bf       	out	0x3d, r28	; 61
    338a:	df 91       	pop	r29
    338c:	cf 91       	pop	r28
    338e:	08 95       	ret

00003390 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    3390:	cf 93       	push	r28
    3392:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    3394:	88 23       	and	r24, r24
    3396:	09 f4       	brne	.+2      	; 0x339a <register_code+0xa>
    3398:	c1 c0       	rjmp	.+386    	; 0x351c <register_code+0x18c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    339a:	82 38       	cpi	r24, 0x82	; 130
    339c:	59 f4       	brne	.+22     	; 0x33b4 <register_code+0x24>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    339e:	0e 94 86 18 	call	0x310c	; 0x310c <host_keyboard_leds>
    33a2:	81 fd       	sbrc	r24, 1
    33a4:	bb c0       	rjmp	.+374    	; 0x351c <register_code+0x18c>
#endif
        add_key(KC_CAPSLOCK);
    33a6:	89 e3       	ldi	r24, 0x39	; 57
    33a8:	0e 94 dd 23 	call	0x47ba	; 0x47ba <add_key>
        send_keyboard_report();
    33ac:	0e 94 9b 24 	call	0x4936	; 0x4936 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    33b0:	89 e3       	ldi	r24, 0x39	; 57
    33b2:	0c c0       	rjmp	.+24     	; 0x33cc <register_code+0x3c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    33b4:	83 38       	cpi	r24, 0x83	; 131
    33b6:	79 f4       	brne	.+30     	; 0x33d6 <register_code+0x46>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    33b8:	0e 94 86 18 	call	0x310c	; 0x310c <host_keyboard_leds>
    33bc:	80 fd       	sbrc	r24, 0
    33be:	ae c0       	rjmp	.+348    	; 0x351c <register_code+0x18c>
#endif
        add_key(KC_NUMLOCK);
    33c0:	83 e5       	ldi	r24, 0x53	; 83
    33c2:	0e 94 dd 23 	call	0x47ba	; 0x47ba <add_key>
        send_keyboard_report();
    33c6:	0e 94 9b 24 	call	0x4936	; 0x4936 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    33ca:	83 e5       	ldi	r24, 0x53	; 83
    33cc:	0e 94 1e 24 	call	0x483c	; 0x483c <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    33d0:	cf 91       	pop	r28
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        del_key(KC_NUMLOCK);
        send_keyboard_report();
    33d2:	0c 94 9b 24 	jmp	0x4936	; 0x4936 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    33d6:	84 38       	cpi	r24, 0x84	; 132
    33d8:	59 f4       	brne	.+22     	; 0x33f0 <register_code+0x60>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    33da:	0e 94 86 18 	call	0x310c	; 0x310c <host_keyboard_leds>
    33de:	82 fd       	sbrc	r24, 2
    33e0:	9d c0       	rjmp	.+314    	; 0x351c <register_code+0x18c>
#endif
        add_key(KC_SCROLLLOCK);
    33e2:	87 e4       	ldi	r24, 0x47	; 71
    33e4:	0e 94 dd 23 	call	0x47ba	; 0x47ba <add_key>
        send_keyboard_report();
    33e8:	0e 94 9b 24 	call	0x4936	; 0x4936 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    33ec:	87 e4       	ldi	r24, 0x47	; 71
    33ee:	ee cf       	rjmp	.-36     	; 0x33cc <register_code+0x3c>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    33f0:	84 50       	subi	r24, 0x04	; 4
    33f2:	81 3a       	cpi	r24, 0xA1	; 161
    33f4:	48 f4       	brcc	.+18     	; 0x3408 <register_code+0x78>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    33f6:	8c 2f       	mov	r24, r28
    33f8:	0e 94 1d 2b 	call	0x563a	; 0x563a <command_proc>
    33fc:	81 11       	cpse	r24, r1
    33fe:	8e c0       	rjmp	.+284    	; 0x351c <register_code+0x18c>
            oneshot_cancel();
        } else
*/
#endif
        {
            add_key(code);
    3400:	8c 2f       	mov	r24, r28
    3402:	0e 94 dd 23 	call	0x47ba	; 0x47ba <add_key>
    3406:	e4 cf       	rjmp	.-56     	; 0x33d0 <register_code+0x40>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    3408:	8c 2f       	mov	r24, r28
    340a:	80 5e       	subi	r24, 0xE0	; 224
    340c:	88 30       	cpi	r24, 0x08	; 8
    340e:	50 f4       	brcc	.+20     	; 0x3424 <register_code+0x94>
        add_mods(MOD_BIT(code));
    3410:	c7 70       	andi	r28, 0x07	; 7
    3412:	81 e0       	ldi	r24, 0x01	; 1
    3414:	90 e0       	ldi	r25, 0x00	; 0
    3416:	01 c0       	rjmp	.+2      	; 0x341a <register_code+0x8a>
    3418:	88 0f       	add	r24, r24
    341a:	ca 95       	dec	r28
    341c:	ea f7       	brpl	.-6      	; 0x3418 <register_code+0x88>
    341e:	0e 94 62 24 	call	0x48c4	; 0x48c4 <add_mods>
    3422:	d6 cf       	rjmp	.-84     	; 0x33d0 <register_code+0x40>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    3424:	8c 2f       	mov	r24, r28
    3426:	85 5a       	subi	r24, 0xA5	; 165
    3428:	83 30       	cpi	r24, 0x03	; 3
    342a:	78 f4       	brcc	.+30     	; 0x344a <register_code+0xba>
        host_system_send(KEYCODE2SYSTEM(code));
    342c:	c5 3a       	cpi	r28, 0xA5	; 165
    342e:	29 f0       	breq	.+10     	; 0x343a <register_code+0xaa>
    3430:	c6 3a       	cpi	r28, 0xA6	; 166
    3432:	31 f4       	brne	.+12     	; 0x3440 <register_code+0xb0>
    3434:	82 e8       	ldi	r24, 0x82	; 130
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	05 c0       	rjmp	.+10     	; 0x3444 <register_code+0xb4>
    343a:	81 e8       	ldi	r24, 0x81	; 129
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	02 c0       	rjmp	.+4      	; 0x3444 <register_code+0xb4>
    3440:	83 e8       	ldi	r24, 0x83	; 131
    3442:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    3444:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    3446:	0c 94 a8 18 	jmp	0x3150	; 0x3150 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    344a:	8c 2f       	mov	r24, r28
    344c:	88 5a       	subi	r24, 0xA8	; 168
    344e:	83 31       	cpi	r24, 0x13	; 19
    3450:	08 f0       	brcs	.+2      	; 0x3454 <register_code+0xc4>
    3452:	64 c0       	rjmp	.+200    	; 0x351c <register_code+0x18c>
        host_consumer_send(KEYCODE2CONSUMER(code));
    3454:	c8 3a       	cpi	r28, 0xA8	; 168
    3456:	39 f1       	breq	.+78     	; 0x34a6 <register_code+0x116>
    3458:	c9 3a       	cpi	r28, 0xA9	; 169
    345a:	41 f1       	breq	.+80     	; 0x34ac <register_code+0x11c>
    345c:	ca 3a       	cpi	r28, 0xAA	; 170
    345e:	49 f1       	breq	.+82     	; 0x34b2 <register_code+0x122>
    3460:	cb 3a       	cpi	r28, 0xAB	; 171
    3462:	51 f1       	breq	.+84     	; 0x34b8 <register_code+0x128>
    3464:	cc 3a       	cpi	r28, 0xAC	; 172
    3466:	59 f1       	breq	.+86     	; 0x34be <register_code+0x12e>
    3468:	cd 3a       	cpi	r28, 0xAD	; 173
    346a:	61 f1       	breq	.+88     	; 0x34c4 <register_code+0x134>
    346c:	c0 3b       	cpi	r28, 0xB0	; 176
    346e:	69 f1       	breq	.+90     	; 0x34ca <register_code+0x13a>
    3470:	ce 3a       	cpi	r28, 0xAE	; 174
    3472:	71 f1       	breq	.+92     	; 0x34d0 <register_code+0x140>
    3474:	cf 3a       	cpi	r28, 0xAF	; 175
    3476:	79 f1       	breq	.+94     	; 0x34d6 <register_code+0x146>
    3478:	c1 3b       	cpi	r28, 0xB1	; 177
    347a:	81 f1       	breq	.+96     	; 0x34dc <register_code+0x14c>
    347c:	c2 3b       	cpi	r28, 0xB2	; 178
    347e:	89 f1       	breq	.+98     	; 0x34e2 <register_code+0x152>
    3480:	c3 3b       	cpi	r28, 0xB3	; 179
    3482:	91 f1       	breq	.+100    	; 0x34e8 <register_code+0x158>
    3484:	c4 3b       	cpi	r28, 0xB4	; 180
    3486:	99 f1       	breq	.+102    	; 0x34ee <register_code+0x15e>
    3488:	c5 3b       	cpi	r28, 0xB5	; 181
    348a:	a1 f1       	breq	.+104    	; 0x34f4 <register_code+0x164>
    348c:	c6 3b       	cpi	r28, 0xB6	; 182
    348e:	a9 f1       	breq	.+106    	; 0x34fa <register_code+0x16a>
    3490:	c7 3b       	cpi	r28, 0xB7	; 183
    3492:	b1 f1       	breq	.+108    	; 0x3500 <register_code+0x170>
    3494:	c8 3b       	cpi	r28, 0xB8	; 184
    3496:	b9 f1       	breq	.+110    	; 0x3506 <register_code+0x176>
    3498:	c9 3b       	cpi	r28, 0xB9	; 185
    349a:	c1 f1       	breq	.+112    	; 0x350c <register_code+0x17c>
    349c:	ca 3b       	cpi	r28, 0xBA	; 186
    349e:	c9 f5       	brne	.+114    	; 0x3512 <register_code+0x182>
    34a0:	8a e2       	ldi	r24, 0x2A	; 42
    34a2:	92 e0       	ldi	r25, 0x02	; 2
    34a4:	38 c0       	rjmp	.+112    	; 0x3516 <register_code+0x186>
    34a6:	82 ee       	ldi	r24, 0xE2	; 226
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	35 c0       	rjmp	.+106    	; 0x3516 <register_code+0x186>
    34ac:	89 ee       	ldi	r24, 0xE9	; 233
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	32 c0       	rjmp	.+100    	; 0x3516 <register_code+0x186>
    34b2:	8a ee       	ldi	r24, 0xEA	; 234
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	2f c0       	rjmp	.+94     	; 0x3516 <register_code+0x186>
    34b8:	85 eb       	ldi	r24, 0xB5	; 181
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	2c c0       	rjmp	.+88     	; 0x3516 <register_code+0x186>
    34be:	86 eb       	ldi	r24, 0xB6	; 182
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	29 c0       	rjmp	.+82     	; 0x3516 <register_code+0x186>
    34c4:	87 eb       	ldi	r24, 0xB7	; 183
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	26 c0       	rjmp	.+76     	; 0x3516 <register_code+0x186>
    34ca:	8c ec       	ldi	r24, 0xCC	; 204
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	23 c0       	rjmp	.+70     	; 0x3516 <register_code+0x186>
    34d0:	8d ec       	ldi	r24, 0xCD	; 205
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	20 c0       	rjmp	.+64     	; 0x3516 <register_code+0x186>
    34d6:	83 e8       	ldi	r24, 0x83	; 131
    34d8:	91 e0       	ldi	r25, 0x01	; 1
    34da:	1d c0       	rjmp	.+58     	; 0x3516 <register_code+0x186>
    34dc:	8a e8       	ldi	r24, 0x8A	; 138
    34de:	91 e0       	ldi	r25, 0x01	; 1
    34e0:	1a c0       	rjmp	.+52     	; 0x3516 <register_code+0x186>
    34e2:	82 e9       	ldi	r24, 0x92	; 146
    34e4:	91 e0       	ldi	r25, 0x01	; 1
    34e6:	17 c0       	rjmp	.+46     	; 0x3516 <register_code+0x186>
    34e8:	84 e9       	ldi	r24, 0x94	; 148
    34ea:	91 e0       	ldi	r25, 0x01	; 1
    34ec:	14 c0       	rjmp	.+40     	; 0x3516 <register_code+0x186>
    34ee:	81 e2       	ldi	r24, 0x21	; 33
    34f0:	92 e0       	ldi	r25, 0x02	; 2
    34f2:	11 c0       	rjmp	.+34     	; 0x3516 <register_code+0x186>
    34f4:	83 e2       	ldi	r24, 0x23	; 35
    34f6:	92 e0       	ldi	r25, 0x02	; 2
    34f8:	0e c0       	rjmp	.+28     	; 0x3516 <register_code+0x186>
    34fa:	84 e2       	ldi	r24, 0x24	; 36
    34fc:	92 e0       	ldi	r25, 0x02	; 2
    34fe:	0b c0       	rjmp	.+22     	; 0x3516 <register_code+0x186>
    3500:	85 e2       	ldi	r24, 0x25	; 37
    3502:	92 e0       	ldi	r25, 0x02	; 2
    3504:	08 c0       	rjmp	.+16     	; 0x3516 <register_code+0x186>
    3506:	86 e2       	ldi	r24, 0x26	; 38
    3508:	92 e0       	ldi	r25, 0x02	; 2
    350a:	05 c0       	rjmp	.+10     	; 0x3516 <register_code+0x186>
    350c:	87 e2       	ldi	r24, 0x27	; 39
    350e:	92 e0       	ldi	r25, 0x02	; 2
    3510:	02 c0       	rjmp	.+4      	; 0x3516 <register_code+0x186>
    3512:	80 e0       	ldi	r24, 0x00	; 0
    3514:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    3516:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    3518:	0c 94 be 18 	jmp	0x317c	; 0x317c <host_consumer_send>
    }
}
    351c:	cf 91       	pop	r28
    351e:	08 95       	ret

00003520 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    3520:	88 23       	and	r24, r24
    3522:	09 f4       	brne	.+2      	; 0x3526 <unregister_code+0x6>
    3524:	4d c0       	rjmp	.+154    	; 0x35c0 <unregister_code+0xa0>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    3526:	82 38       	cpi	r24, 0x82	; 130
    3528:	59 f4       	brne	.+22     	; 0x3540 <unregister_code+0x20>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    352a:	0e 94 86 18 	call	0x310c	; 0x310c <host_keyboard_leds>
    352e:	81 ff       	sbrs	r24, 1
    3530:	47 c0       	rjmp	.+142    	; 0x35c0 <unregister_code+0xa0>
#endif
        add_key(KC_CAPSLOCK);
    3532:	89 e3       	ldi	r24, 0x39	; 57
    3534:	0e 94 dd 23 	call	0x47ba	; 0x47ba <add_key>
        send_keyboard_report();
    3538:	0e 94 9b 24 	call	0x4936	; 0x4936 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    353c:	89 e3       	ldi	r24, 0x39	; 57
    353e:	0c c0       	rjmp	.+24     	; 0x3558 <unregister_code+0x38>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    3540:	83 38       	cpi	r24, 0x83	; 131
    3542:	71 f4       	brne	.+28     	; 0x3560 <unregister_code+0x40>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    3544:	0e 94 86 18 	call	0x310c	; 0x310c <host_keyboard_leds>
    3548:	80 ff       	sbrs	r24, 0
    354a:	3a c0       	rjmp	.+116    	; 0x35c0 <unregister_code+0xa0>
#endif
        add_key(KC_NUMLOCK);
    354c:	83 e5       	ldi	r24, 0x53	; 83
    354e:	0e 94 dd 23 	call	0x47ba	; 0x47ba <add_key>
        send_keyboard_report();
    3552:	0e 94 9b 24 	call	0x4936	; 0x4936 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    3556:	83 e5       	ldi	r24, 0x53	; 83
    3558:	0e 94 1e 24 	call	0x483c	; 0x483c <del_key>
        send_keyboard_report();
    355c:	0c 94 9b 24 	jmp	0x4936	; 0x4936 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    3560:	84 38       	cpi	r24, 0x84	; 132
    3562:	59 f4       	brne	.+22     	; 0x357a <unregister_code+0x5a>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    3564:	0e 94 86 18 	call	0x310c	; 0x310c <host_keyboard_leds>
    3568:	82 ff       	sbrs	r24, 2
    356a:	2a c0       	rjmp	.+84     	; 0x35c0 <unregister_code+0xa0>
#endif
        add_key(KC_SCROLLLOCK);
    356c:	87 e4       	ldi	r24, 0x47	; 71
    356e:	0e 94 dd 23 	call	0x47ba	; 0x47ba <add_key>
        send_keyboard_report();
    3572:	0e 94 9b 24 	call	0x4936	; 0x4936 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    3576:	87 e4       	ldi	r24, 0x47	; 71
    3578:	ef cf       	rjmp	.-34     	; 0x3558 <unregister_code+0x38>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    357a:	98 2f       	mov	r25, r24
    357c:	94 50       	subi	r25, 0x04	; 4
    357e:	91 3a       	cpi	r25, 0xA1	; 161
    3580:	08 f4       	brcc	.+2      	; 0x3584 <unregister_code+0x64>
    3582:	ea cf       	rjmp	.-44     	; 0x3558 <unregister_code+0x38>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    3584:	98 2f       	mov	r25, r24
    3586:	90 5e       	subi	r25, 0xE0	; 224
    3588:	98 30       	cpi	r25, 0x08	; 8
    358a:	58 f4       	brcc	.+22     	; 0x35a2 <unregister_code+0x82>
        del_mods(MOD_BIT(code));
    358c:	28 2f       	mov	r18, r24
    358e:	27 70       	andi	r18, 0x07	; 7
    3590:	81 e0       	ldi	r24, 0x01	; 1
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	01 c0       	rjmp	.+2      	; 0x3598 <unregister_code+0x78>
    3596:	88 0f       	add	r24, r24
    3598:	2a 95       	dec	r18
    359a:	ea f7       	brpl	.-6      	; 0x3596 <unregister_code+0x76>
    359c:	0e 94 68 24 	call	0x48d0	; 0x48d0 <del_mods>
    35a0:	dd cf       	rjmp	.-70     	; 0x355c <unregister_code+0x3c>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    35a2:	98 2f       	mov	r25, r24
    35a4:	95 5a       	subi	r25, 0xA5	; 165
    35a6:	93 30       	cpi	r25, 0x03	; 3
    35a8:	20 f4       	brcc	.+8      	; 0x35b2 <unregister_code+0x92>
        host_system_send(0);
    35aa:	80 e0       	ldi	r24, 0x00	; 0
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	0c 94 a8 18 	jmp	0x3150	; 0x3150 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    35b2:	88 5a       	subi	r24, 0xA8	; 168
    35b4:	83 31       	cpi	r24, 0x13	; 19
    35b6:	20 f4       	brcc	.+8      	; 0x35c0 <unregister_code+0xa0>
        host_consumer_send(0);
    35b8:	80 e0       	ldi	r24, 0x00	; 0
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	0c 94 be 18 	jmp	0x317c	; 0x317c <host_consumer_send>
    35c0:	08 95       	ret

000035c2 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    35c2:	88 23       	and	r24, r24
    35c4:	21 f0       	breq	.+8      	; 0x35ce <register_mods+0xc>
        add_mods(mods);
    35c6:	0e 94 62 24 	call	0x48c4	; 0x48c4 <add_mods>
        send_keyboard_report();
    35ca:	0c 94 9b 24 	jmp	0x4936	; 0x4936 <send_keyboard_report>
    35ce:	08 95       	ret

000035d0 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    35d0:	88 23       	and	r24, r24
    35d2:	21 f0       	breq	.+8      	; 0x35dc <unregister_mods+0xc>
        del_mods(mods);
    35d4:	0e 94 68 24 	call	0x48d0	; 0x48d0 <del_mods>
        send_keyboard_report();
    35d8:	0c 94 9b 24 	jmp	0x4936	; 0x4936 <send_keyboard_report>
    35dc:	08 95       	ret

000035de <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    35de:	bf 92       	push	r11
    35e0:	cf 92       	push	r12
    35e2:	df 92       	push	r13
    35e4:	ef 92       	push	r14
    35e6:	ff 92       	push	r15
    35e8:	0f 93       	push	r16
    35ea:	1f 93       	push	r17
    35ec:	cf 93       	push	r28
    35ee:	df 93       	push	r29
    35f0:	cd b7       	in	r28, 0x3d	; 61
    35f2:	de b7       	in	r29, 0x3e	; 62
    35f4:	27 97       	sbiw	r28, 0x07	; 7
    35f6:	0f b6       	in	r0, 0x3f	; 63
    35f8:	f8 94       	cli
    35fa:	de bf       	out	0x3e, r29	; 62
    35fc:	0f be       	out	0x3f, r0	; 63
    35fe:	cd bf       	out	0x3d, r28	; 61
    3600:	8c 01       	movw	r16, r24
    keyevent_t event = record->event;
    3602:	85 e0       	ldi	r24, 0x05	; 5
    3604:	f8 01       	movw	r30, r16
    3606:	de 01       	movw	r26, r28
    3608:	11 96       	adiw	r26, 0x01	; 1
    360a:	01 90       	ld	r0, Z+
    360c:	0d 92       	st	X+, r0
    360e:	8a 95       	dec	r24
    3610:	e1 f7       	brne	.-8      	; 0x360a <process_action+0x2c>
    3612:	f8 01       	movw	r30, r16
    3614:	30 81       	ld	r19, Z
    3616:	21 81       	ldd	r18, Z+1	; 0x01
    3618:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    361a:	55 81       	ldd	r21, Z+5	; 0x05
    361c:	52 95       	swap	r21
    361e:	5f 70       	andi	r21, 0x0F	; 15

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    3620:	83 81       	ldd	r24, Z+3	; 0x03
    3622:	94 81       	ldd	r25, Z+4	; 0x04
    3624:	89 2b       	or	r24, r25
    3626:	39 f0       	breq	.+14     	; 0x3636 <process_action+0x58>
    3628:	2f 3f       	cpi	r18, 0xFF	; 255
    362a:	41 f4       	brne	.+16     	; 0x363c <process_action+0x5e>
    362c:	81 e0       	ldi	r24, 0x01	; 1
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	3f 3f       	cpi	r19, 0xFF	; 255
    3632:	31 f0       	breq	.+12     	; 0x3640 <process_action+0x62>
    3634:	03 c0       	rjmp	.+6      	; 0x363c <process_action+0x5e>
    3636:	81 e0       	ldi	r24, 0x01	; 1
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	02 c0       	rjmp	.+4      	; 0x3640 <process_action+0x62>
    363c:	80 e0       	ldi	r24, 0x00	; 0
    363e:	90 e0       	ldi	r25, 0x00	; 0
#endif

    if (IS_NOEVENT(event)) { return; }
    3640:	80 fd       	sbrc	r24, 0
    3642:	73 c3       	rjmp	.+1766   	; 0x3d2a <process_action+0x74c>

    action_t action = layer_switch_get_action(event.key);
    3644:	39 83       	std	Y+1, r19	; 0x01
    3646:	2a 83       	std	Y+2, r18	; 0x02
    3648:	89 81       	ldd	r24, Y+1	; 0x01
    364a:	9a 81       	ldd	r25, Y+2	; 0x02
    364c:	5e 83       	std	Y+6, r21	; 0x06
    364e:	0e 94 9a 23 	call	0x4734	; 0x4734 <layer_switch_get_action>
    3652:	b9 2e       	mov	r11, r25
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    3654:	8f 83       	std	Y+7, r24	; 0x07
    3656:	0e 94 99 23 	call	0x4732	; 0x4732 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    365a:	0e 94 c1 22 	call	0x4582	; 0x4582 <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    365e:	2b 2d       	mov	r18, r11
    3660:	22 95       	swap	r18
    3662:	2f 70       	andi	r18, 0x0F	; 15
    3664:	30 e0       	ldi	r19, 0x00	; 0
    3666:	5e 81       	ldd	r21, Y+6	; 0x06
    3668:	6f 81       	ldd	r22, Y+7	; 0x07
    366a:	25 30       	cpi	r18, 0x05	; 5
    366c:	31 05       	cpc	r19, r1
    366e:	09 f4       	brne	.+2      	; 0x3672 <process_action+0x94>
    3670:	e6 c0       	rjmp	.+460    	; 0x383e <process_action+0x260>
    3672:	6c f4       	brge	.+26     	; 0x368e <process_action+0xb0>
    3674:	24 30       	cpi	r18, 0x04	; 4
    3676:	31 05       	cpc	r19, r1
    3678:	0c f0       	brlt	.+2      	; 0x367c <process_action+0x9e>
    367a:	a2 c0       	rjmp	.+324    	; 0x37c0 <process_action+0x1e2>
    367c:	4b 2d       	mov	r20, r11
    367e:	40 7f       	andi	r20, 0xF0	; 240
    3680:	8b 2d       	mov	r24, r11
    3682:	8f 70       	andi	r24, 0x0F	; 15
    3684:	22 30       	cpi	r18, 0x02	; 2
    3686:	31 05       	cpc	r19, r1
    3688:	0c f0       	brlt	.+2      	; 0x368c <process_action+0xae>
    368a:	45 c0       	rjmp	.+138    	; 0x3716 <process_action+0x138>
    368c:	17 c0       	rjmp	.+46     	; 0x36bc <process_action+0xde>
    368e:	2c 30       	cpi	r18, 0x0C	; 12
    3690:	31 05       	cpc	r19, r1
    3692:	4c f4       	brge	.+18     	; 0x36a6 <process_action+0xc8>
    3694:	2a 30       	cpi	r18, 0x0A	; 10
    3696:	31 05       	cpc	r19, r1
    3698:	0c f0       	brlt	.+2      	; 0x369c <process_action+0xbe>
    369a:	e7 c1       	rjmp	.+974    	; 0x3a6a <process_action+0x48c>
    369c:	28 30       	cpi	r18, 0x08	; 8
    369e:	31 05       	cpc	r19, r1
    36a0:	09 f0       	breq	.+2      	; 0x36a4 <process_action+0xc6>
    36a2:	43 c3       	rjmp	.+1670   	; 0x3d2a <process_action+0x74c>
    36a4:	e5 c0       	rjmp	.+458    	; 0x3870 <process_action+0x292>
    36a6:	2d 30       	cpi	r18, 0x0D	; 13
    36a8:	31 05       	cpc	r19, r1
    36aa:	09 f4       	brne	.+2      	; 0x36ae <process_action+0xd0>
    36ac:	ba c2       	rjmp	.+1396   	; 0x3c22 <process_action+0x644>
    36ae:	0c f4       	brge	.+2      	; 0x36b2 <process_action+0xd4>
    36b0:	a2 c2       	rjmp	.+1348   	; 0x3bf6 <process_action+0x618>
    36b2:	2f 30       	cpi	r18, 0x0F	; 15
    36b4:	31 05       	cpc	r19, r1
    36b6:	09 f0       	breq	.+2      	; 0x36ba <process_action+0xdc>
    36b8:	38 c3       	rjmp	.+1648   	; 0x3d2a <process_action+0x74c>
    36ba:	23 c3       	rjmp	.+1606   	; 0x3d02 <process_action+0x724>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    36bc:	18 2f       	mov	r17, r24
    36be:	41 11       	cpse	r20, r1
    36c0:	01 c0       	rjmp	.+2      	; 0x36c4 <process_action+0xe6>
    36c2:	02 c0       	rjmp	.+4      	; 0x36c8 <process_action+0xea>
    36c4:	12 95       	swap	r17
    36c6:	10 7f       	andi	r17, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    36c8:	ff 20       	and	r15, r15
    36ca:	59 f0       	breq	.+22     	; 0x36e2 <process_action+0x104>
                    if (mods) {
    36cc:	11 23       	and	r17, r17
    36ce:	09 f4       	brne	.+2      	; 0x36d2 <process_action+0xf4>
    36d0:	6b c2       	rjmp	.+1238   	; 0x3ba8 <process_action+0x5ca>
                        add_weak_mods(mods);
    36d2:	81 2f       	mov	r24, r17
    36d4:	6f 83       	std	Y+7, r22	; 0x07
    36d6:	0e 94 72 24 	call	0x48e4	; 0x48e4 <add_weak_mods>
                        send_keyboard_report();
    36da:	0e 94 9b 24 	call	0x4936	; 0x4936 <send_keyboard_report>
    36de:	6f 81       	ldd	r22, Y+7	; 0x07
    36e0:	63 c2       	rjmp	.+1222   	; 0x3ba8 <process_action+0x5ca>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    36e2:	86 2f       	mov	r24, r22
    36e4:	0e 94 90 1a 	call	0x3520	; 0x3520 <unregister_code>
                    if (mods) {
    36e8:	11 23       	and	r17, r17
    36ea:	09 f4       	brne	.+2      	; 0x36ee <process_action+0x110>
    36ec:	1e c3       	rjmp	.+1596   	; 0x3d2a <process_action+0x74c>
                        del_weak_mods(mods);
    36ee:	81 2f       	mov	r24, r17
    36f0:	0e 94 78 24 	call	0x48f0	; 0x48f0 <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    36f4:	27 96       	adiw	r28, 0x07	; 7
    36f6:	0f b6       	in	r0, 0x3f	; 63
    36f8:	f8 94       	cli
    36fa:	de bf       	out	0x3e, r29	; 62
    36fc:	0f be       	out	0x3f, r0	; 63
    36fe:	cd bf       	out	0x3d, r28	; 61
    3700:	df 91       	pop	r29
    3702:	cf 91       	pop	r28
    3704:	1f 91       	pop	r17
    3706:	0f 91       	pop	r16
    3708:	ff 90       	pop	r15
    370a:	ef 90       	pop	r14
    370c:	df 90       	pop	r13
    370e:	cf 90       	pop	r12
    3710:	bf 90       	pop	r11
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    3712:	0c 94 9b 24 	jmp	0x4936	; 0x4936 <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    3716:	40 32       	cpi	r20, 0x20	; 32
    3718:	11 f0       	breq	.+4      	; 0x371e <process_action+0x140>
    371a:	82 95       	swap	r24
    371c:	80 7f       	andi	r24, 0xF0	; 240
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    371e:	66 23       	and	r22, r22
    3720:	19 f0       	breq	.+6      	; 0x3728 <process_action+0x14a>
    3722:	61 30       	cpi	r22, 0x01	; 1
    3724:	71 f5       	brne	.+92     	; 0x3782 <process_action+0x1a4>
    3726:	23 c0       	rjmp	.+70     	; 0x376e <process_action+0x190>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    3728:	ff 20       	and	r15, r15
    372a:	b1 f0       	breq	.+44     	; 0x3758 <process_action+0x17a>
                            if (tap_count == 0) {
    372c:	51 11       	cpse	r21, r1
    372e:	01 c0       	rjmp	.+2      	; 0x3732 <process_action+0x154>
    3730:	32 c0       	rjmp	.+100    	; 0x3796 <process_action+0x1b8>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    3732:	51 30       	cpi	r21, 0x01	; 1
    3734:	81 f5       	brne	.+96     	; 0x3796 <process_action+0x1b8>
            break;
#endif
        default:
            break;
    }
}
    3736:	27 96       	adiw	r28, 0x07	; 7
    3738:	0f b6       	in	r0, 0x3f	; 63
    373a:	f8 94       	cli
    373c:	de bf       	out	0x3e, r29	; 62
    373e:	0f be       	out	0x3f, r0	; 63
    3740:	cd bf       	out	0x3d, r28	; 61
    3742:	df 91       	pop	r29
    3744:	cf 91       	pop	r28
    3746:	1f 91       	pop	r17
    3748:	0f 91       	pop	r16
    374a:	ff 90       	pop	r15
    374c:	ef 90       	pop	r14
    374e:	df 90       	pop	r13
    3750:	cf 90       	pop	r12
    3752:	bf 90       	pop	r11
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    3754:	0c 94 82 24 	jmp	0x4904	; 0x4904 <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    3758:	51 11       	cpse	r21, r1
    375a:	01 c0       	rjmp	.+2      	; 0x375e <process_action+0x180>
    375c:	03 c0       	rjmp	.+6      	; 0x3764 <process_action+0x186>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    375e:	51 30       	cpi	r21, 0x01	; 1
    3760:	09 f4       	brne	.+2      	; 0x3764 <process_action+0x186>
    3762:	e3 c2       	rjmp	.+1478   	; 0x3d2a <process_action+0x74c>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    3764:	8e 83       	std	Y+6, r24	; 0x06
    3766:	0e 94 85 24 	call	0x490a	; 0x490a <clear_oneshot_mods>
                                unregister_mods(mods);
    376a:	8e 81       	ldd	r24, Y+6	; 0x06
    376c:	9a c1       	rjmp	.+820    	; 0x3aa2 <process_action+0x4c4>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    376e:	ff 20       	and	r15, r15
    3770:	21 f0       	breq	.+8      	; 0x377a <process_action+0x19c>
                            if (tap_count <= TAPPING_TOGGLE) {
    3772:	56 30       	cpi	r21, 0x06	; 6
    3774:	08 f0       	brcs	.+2      	; 0x3778 <process_action+0x19a>
    3776:	d9 c2       	rjmp	.+1458   	; 0x3d2a <process_action+0x74c>
    3778:	0e c0       	rjmp	.+28     	; 0x3796 <process_action+0x1b8>
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    377a:	55 30       	cpi	r21, 0x05	; 5
    377c:	08 f0       	brcs	.+2      	; 0x3780 <process_action+0x1a2>
    377e:	d5 c2       	rjmp	.+1450   	; 0x3d2a <process_action+0x74c>
    3780:	90 c1       	rjmp	.+800    	; 0x3aa2 <process_action+0x4c4>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    3782:	ff 20       	and	r15, r15
    3784:	c9 f0       	breq	.+50     	; 0x37b8 <process_action+0x1da>
                            if (tap_count > 0) {
    3786:	55 23       	and	r21, r21
    3788:	31 f0       	breq	.+12     	; 0x3796 <process_action+0x1b8>
#ifndef IGNORE_MOD_TAP_INTERRUPT
                                if (record->tap.interrupted) {
    378a:	f8 01       	movw	r30, r16
    378c:	95 81       	ldd	r25, Z+5	; 0x05
    378e:	90 ff       	sbrs	r25, 0
    3790:	0b c2       	rjmp	.+1046   	; 0x3ba8 <process_action+0x5ca>
                                    dprint("mods_tap: tap: cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    3792:	9f 70       	andi	r25, 0x0F	; 15
    3794:	95 83       	std	Z+5, r25	; 0x05
            break;
#endif
        default:
            break;
    }
}
    3796:	27 96       	adiw	r28, 0x07	; 7
    3798:	0f b6       	in	r0, 0x3f	; 63
    379a:	f8 94       	cli
    379c:	de bf       	out	0x3e, r29	; 62
    379e:	0f be       	out	0x3f, r0	; 63
    37a0:	cd bf       	out	0x3d, r28	; 61
    37a2:	df 91       	pop	r29
    37a4:	cf 91       	pop	r28
    37a6:	1f 91       	pop	r17
    37a8:	0f 91       	pop	r16
    37aa:	ff 90       	pop	r15
    37ac:	ef 90       	pop	r14
    37ae:	df 90       	pop	r13
    37b0:	cf 90       	pop	r12
    37b2:	bf 90       	pop	r11
#ifndef IGNORE_MOD_TAP_INTERRUPT
                                if (record->tap.interrupted) {
                                    dprint("mods_tap: tap: cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
                                    register_mods(mods);
    37b4:	0c 94 e1 1a 	jmp	0x35c2	; 0x35c2 <register_mods>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    37b8:	55 23       	and	r21, r21
    37ba:	09 f4       	brne	.+2      	; 0x37be <process_action+0x1e0>
    37bc:	72 c1       	rjmp	.+740    	; 0x3aa2 <process_action+0x4c4>
    37be:	09 c2       	rjmp	.+1042   	; 0x3bd2 <process_action+0x5f4>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    37c0:	2b 2d       	mov	r18, r11
    37c2:	26 95       	lsr	r18
    37c4:	26 95       	lsr	r18
    37c6:	23 70       	andi	r18, 0x03	; 3
    37c8:	30 e0       	ldi	r19, 0x00	; 0
    37ca:	21 15       	cp	r18, r1
    37cc:	31 05       	cpc	r19, r1
    37ce:	29 f0       	breq	.+10     	; 0x37da <process_action+0x1fc>
    37d0:	21 30       	cpi	r18, 0x01	; 1
    37d2:	31 05       	cpc	r19, r1
    37d4:	09 f0       	breq	.+2      	; 0x37d8 <process_action+0x1fa>
    37d6:	a9 c2       	rjmp	.+1362   	; 0x3d2a <process_action+0x74c>
    37d8:	19 c0       	rjmp	.+50     	; 0x380c <process_action+0x22e>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    37da:	ff 20       	and	r15, r15
    37dc:	21 f0       	breq	.+8      	; 0x37e6 <process_action+0x208>
                        host_system_send(action.usage.code);
    37de:	86 2f       	mov	r24, r22
    37e0:	9b 2d       	mov	r25, r11
    37e2:	93 70       	andi	r25, 0x03	; 3
    37e4:	02 c0       	rjmp	.+4      	; 0x37ea <process_action+0x20c>
                    } else {
                        host_system_send(0);
    37e6:	80 e0       	ldi	r24, 0x00	; 0
    37e8:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    37ea:	27 96       	adiw	r28, 0x07	; 7
    37ec:	0f b6       	in	r0, 0x3f	; 63
    37ee:	f8 94       	cli
    37f0:	de bf       	out	0x3e, r29	; 62
    37f2:	0f be       	out	0x3f, r0	; 63
    37f4:	cd bf       	out	0x3d, r28	; 61
    37f6:	df 91       	pop	r29
    37f8:	cf 91       	pop	r28
    37fa:	1f 91       	pop	r17
    37fc:	0f 91       	pop	r16
    37fe:	ff 90       	pop	r15
    3800:	ef 90       	pop	r14
    3802:	df 90       	pop	r13
    3804:	cf 90       	pop	r12
    3806:	bf 90       	pop	r11
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    3808:	0c 94 a8 18 	jmp	0x3150	; 0x3150 <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    380c:	ff 20       	and	r15, r15
    380e:	21 f0       	breq	.+8      	; 0x3818 <process_action+0x23a>
                        host_consumer_send(action.usage.code);
    3810:	86 2f       	mov	r24, r22
    3812:	9b 2d       	mov	r25, r11
    3814:	93 70       	andi	r25, 0x03	; 3
    3816:	02 c0       	rjmp	.+4      	; 0x381c <process_action+0x23e>
                    } else {
                        host_consumer_send(0);
    3818:	80 e0       	ldi	r24, 0x00	; 0
    381a:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    381c:	27 96       	adiw	r28, 0x07	; 7
    381e:	0f b6       	in	r0, 0x3f	; 63
    3820:	f8 94       	cli
    3822:	de bf       	out	0x3e, r29	; 62
    3824:	0f be       	out	0x3f, r0	; 63
    3826:	cd bf       	out	0x3d, r28	; 61
    3828:	df 91       	pop	r29
    382a:	cf 91       	pop	r28
    382c:	1f 91       	pop	r17
    382e:	0f 91       	pop	r16
    3830:	ff 90       	pop	r15
    3832:	ef 90       	pop	r14
    3834:	df 90       	pop	r13
    3836:	cf 90       	pop	r12
    3838:	bf 90       	pop	r11
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    383a:	0c 94 be 18 	jmp	0x317c	; 0x317c <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    383e:	86 2f       	mov	r24, r22
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    3840:	ff 20       	and	r15, r15
    3842:	19 f0       	breq	.+6      	; 0x384a <process_action+0x26c>
                mousekey_on(action.key.code);
    3844:	0e 94 f9 27 	call	0x4ff2	; 0x4ff2 <mousekey_on>
    3848:	02 c0       	rjmp	.+4      	; 0x384e <process_action+0x270>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    384a:	0e 94 61 28 	call	0x50c2	; 0x50c2 <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    384e:	27 96       	adiw	r28, 0x07	; 7
    3850:	0f b6       	in	r0, 0x3f	; 63
    3852:	f8 94       	cli
    3854:	de bf       	out	0x3e, r29	; 62
    3856:	0f be       	out	0x3f, r0	; 63
    3858:	cd bf       	out	0x3d, r28	; 61
    385a:	df 91       	pop	r29
    385c:	cf 91       	pop	r28
    385e:	1f 91       	pop	r17
    3860:	0f 91       	pop	r16
    3862:	ff 90       	pop	r15
    3864:	ef 90       	pop	r14
    3866:	df 90       	pop	r13
    3868:	cf 90       	pop	r12
    386a:	bf 90       	pop	r11
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    386c:	0c 94 e8 28 	jmp	0x51d0	; 0x51d0 <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    3870:	8b 2d       	mov	r24, r11
    3872:	83 70       	andi	r24, 0x03	; 3
    3874:	09 f0       	breq	.+2      	; 0x3878 <process_action+0x29a>
    3876:	79 c0       	rjmp	.+242    	; 0x396a <process_action+0x38c>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    3878:	f1 10       	cpse	r15, r1
    387a:	57 c2       	rjmp	.+1198   	; 0x3d2a <process_action+0x74c>
                    uint8_t shift = action.layer_bitop.part*4;
    387c:	26 2f       	mov	r18, r22
    387e:	22 95       	swap	r18
    3880:	26 95       	lsr	r18
    3882:	27 70       	andi	r18, 0x07	; 7
    3884:	22 0f       	add	r18, r18
    3886:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    3888:	86 2f       	mov	r24, r22
    388a:	8f 70       	andi	r24, 0x0F	; 15
    388c:	c8 2e       	mov	r12, r24
    388e:	d1 2c       	mov	r13, r1
    3890:	e1 2c       	mov	r14, r1
    3892:	f1 2c       	mov	r15, r1
    3894:	02 2e       	mov	r0, r18
    3896:	04 c0       	rjmp	.+8      	; 0x38a0 <process_action+0x2c2>
    3898:	cc 0c       	add	r12, r12
    389a:	dd 1c       	adc	r13, r13
    389c:	ee 1c       	adc	r14, r14
    389e:	ff 1c       	adc	r15, r15
    38a0:	0a 94       	dec	r0
    38a2:	d2 f7       	brpl	.-12     	; 0x3898 <process_action+0x2ba>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    38a4:	64 ff       	sbrs	r22, 4
    38a6:	10 c0       	rjmp	.+32     	; 0x38c8 <process_action+0x2ea>
    38a8:	6f e0       	ldi	r22, 0x0F	; 15
    38aa:	70 e0       	ldi	r23, 0x00	; 0
    38ac:	80 e0       	ldi	r24, 0x00	; 0
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	04 c0       	rjmp	.+8      	; 0x38ba <process_action+0x2dc>
    38b2:	66 0f       	add	r22, r22
    38b4:	77 1f       	adc	r23, r23
    38b6:	88 1f       	adc	r24, r24
    38b8:	99 1f       	adc	r25, r25
    38ba:	2a 95       	dec	r18
    38bc:	d2 f7       	brpl	.-12     	; 0x38b2 <process_action+0x2d4>
    38be:	60 95       	com	r22
    38c0:	70 95       	com	r23
    38c2:	80 95       	com	r24
    38c4:	90 95       	com	r25
    38c6:	03 c0       	rjmp	.+6      	; 0x38ce <process_action+0x2f0>
    38c8:	60 e0       	ldi	r22, 0x00	; 0
    38ca:	70 e0       	ldi	r23, 0x00	; 0
    38cc:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    38ce:	2b 2d       	mov	r18, r11
    38d0:	26 95       	lsr	r18
    38d2:	26 95       	lsr	r18
    38d4:	23 70       	andi	r18, 0x03	; 3
    38d6:	42 2f       	mov	r20, r18
    38d8:	50 e0       	ldi	r21, 0x00	; 0
    38da:	42 30       	cpi	r20, 0x02	; 2
    38dc:	51 05       	cpc	r21, r1
    38de:	d9 f0       	breq	.+54     	; 0x3916 <process_action+0x338>
    38e0:	43 30       	cpi	r20, 0x03	; 3
    38e2:	51 05       	cpc	r21, r1
    38e4:	69 f1       	breq	.+90     	; 0x3940 <process_action+0x362>
    38e6:	6c 29       	or	r22, r12
    38e8:	7d 29       	or	r23, r13
    38ea:	8e 29       	or	r24, r14
    38ec:	9f 29       	or	r25, r15
    38ee:	41 30       	cpi	r20, 0x01	; 1
    38f0:	51 05       	cpc	r21, r1
    38f2:	51 f1       	breq	.+84     	; 0x3948 <process_action+0x36a>
            break;
#endif
        default:
            break;
    }
}
    38f4:	27 96       	adiw	r28, 0x07	; 7
    38f6:	0f b6       	in	r0, 0x3f	; 63
    38f8:	f8 94       	cli
    38fa:	de bf       	out	0x3e, r29	; 62
    38fc:	0f be       	out	0x3f, r0	; 63
    38fe:	cd bf       	out	0x3d, r28	; 61
    3900:	df 91       	pop	r29
    3902:	cf 91       	pop	r28
    3904:	1f 91       	pop	r17
    3906:	0f 91       	pop	r16
    3908:	ff 90       	pop	r15
    390a:	ef 90       	pop	r14
    390c:	df 90       	pop	r13
    390e:	cf 90       	pop	r12
    3910:	bf 90       	pop	r11
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    3912:	0c 94 d6 22 	jmp	0x45ac	; 0x45ac <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    3916:	6c 29       	or	r22, r12
    3918:	7d 29       	or	r23, r13
    391a:	8e 29       	or	r24, r14
    391c:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    391e:	27 96       	adiw	r28, 0x07	; 7
    3920:	0f b6       	in	r0, 0x3f	; 63
    3922:	f8 94       	cli
    3924:	de bf       	out	0x3e, r29	; 62
    3926:	0f be       	out	0x3f, r0	; 63
    3928:	cd bf       	out	0x3d, r28	; 61
    392a:	df 91       	pop	r29
    392c:	cf 91       	pop	r28
    392e:	1f 91       	pop	r17
    3930:	0f 91       	pop	r16
    3932:	ff 90       	pop	r15
    3934:	ef 90       	pop	r14
    3936:	df 90       	pop	r13
    3938:	cf 90       	pop	r12
    393a:	bf 90       	pop	r11
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    393c:	0c 94 e8 22 	jmp	0x45d0	; 0x45d0 <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    3940:	0e 94 d6 22 	call	0x45ac	; 0x45ac <default_layer_and>
    3944:	c7 01       	movw	r24, r14
    3946:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    3948:	27 96       	adiw	r28, 0x07	; 7
    394a:	0f b6       	in	r0, 0x3f	; 63
    394c:	f8 94       	cli
    394e:	de bf       	out	0x3e, r29	; 62
    3950:	0f be       	out	0x3f, r0	; 63
    3952:	cd bf       	out	0x3d, r28	; 61
    3954:	df 91       	pop	r29
    3956:	cf 91       	pop	r28
    3958:	1f 91       	pop	r17
    395a:	0f 91       	pop	r16
    395c:	ff 90       	pop	r15
    395e:	ef 90       	pop	r14
    3960:	df 90       	pop	r13
    3962:	cf 90       	pop	r12
    3964:	bf 90       	pop	r11
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    3966:	0c 94 c4 22 	jmp	0x4588	; 0x4588 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    396a:	ff 20       	and	r15, r15
    396c:	19 f0       	breq	.+6      	; 0x3974 <process_action+0x396>
    396e:	8b 2d       	mov	r24, r11
    3970:	81 70       	andi	r24, 0x01	; 1
    3972:	01 c0       	rjmp	.+2      	; 0x3976 <process_action+0x398>
    3974:	86 95       	lsr	r24
    3976:	88 23       	and	r24, r24
    3978:	09 f4       	brne	.+2      	; 0x397c <process_action+0x39e>
    397a:	d7 c1       	rjmp	.+942    	; 0x3d2a <process_action+0x74c>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    397c:	26 2f       	mov	r18, r22
    397e:	22 95       	swap	r18
    3980:	26 95       	lsr	r18
    3982:	27 70       	andi	r18, 0x07	; 7
    3984:	22 0f       	add	r18, r18
    3986:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    3988:	86 2f       	mov	r24, r22
    398a:	8f 70       	andi	r24, 0x0F	; 15
    398c:	c8 2e       	mov	r12, r24
    398e:	d1 2c       	mov	r13, r1
    3990:	e1 2c       	mov	r14, r1
    3992:	f1 2c       	mov	r15, r1
    3994:	02 2e       	mov	r0, r18
    3996:	04 c0       	rjmp	.+8      	; 0x39a0 <process_action+0x3c2>
    3998:	cc 0c       	add	r12, r12
    399a:	dd 1c       	adc	r13, r13
    399c:	ee 1c       	adc	r14, r14
    399e:	ff 1c       	adc	r15, r15
    39a0:	0a 94       	dec	r0
    39a2:	d2 f7       	brpl	.-12     	; 0x3998 <process_action+0x3ba>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    39a4:	64 ff       	sbrs	r22, 4
    39a6:	10 c0       	rjmp	.+32     	; 0x39c8 <process_action+0x3ea>
    39a8:	6f e0       	ldi	r22, 0x0F	; 15
    39aa:	70 e0       	ldi	r23, 0x00	; 0
    39ac:	80 e0       	ldi	r24, 0x00	; 0
    39ae:	90 e0       	ldi	r25, 0x00	; 0
    39b0:	04 c0       	rjmp	.+8      	; 0x39ba <process_action+0x3dc>
    39b2:	66 0f       	add	r22, r22
    39b4:	77 1f       	adc	r23, r23
    39b6:	88 1f       	adc	r24, r24
    39b8:	99 1f       	adc	r25, r25
    39ba:	2a 95       	dec	r18
    39bc:	d2 f7       	brpl	.-12     	; 0x39b2 <process_action+0x3d4>
    39be:	60 95       	com	r22
    39c0:	70 95       	com	r23
    39c2:	80 95       	com	r24
    39c4:	90 95       	com	r25
    39c6:	03 c0       	rjmp	.+6      	; 0x39ce <process_action+0x3f0>
    39c8:	60 e0       	ldi	r22, 0x00	; 0
    39ca:	70 e0       	ldi	r23, 0x00	; 0
    39cc:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    39ce:	2b 2d       	mov	r18, r11
    39d0:	26 95       	lsr	r18
    39d2:	26 95       	lsr	r18
    39d4:	23 70       	andi	r18, 0x03	; 3
    39d6:	42 2f       	mov	r20, r18
    39d8:	50 e0       	ldi	r21, 0x00	; 0
    39da:	42 30       	cpi	r20, 0x02	; 2
    39dc:	51 05       	cpc	r21, r1
    39de:	d9 f0       	breq	.+54     	; 0x3a16 <process_action+0x438>
    39e0:	43 30       	cpi	r20, 0x03	; 3
    39e2:	51 05       	cpc	r21, r1
    39e4:	69 f1       	breq	.+90     	; 0x3a40 <process_action+0x462>
    39e6:	6c 29       	or	r22, r12
    39e8:	7d 29       	or	r23, r13
    39ea:	8e 29       	or	r24, r14
    39ec:	9f 29       	or	r25, r15
    39ee:	41 30       	cpi	r20, 0x01	; 1
    39f0:	51 05       	cpc	r21, r1
    39f2:	51 f1       	breq	.+84     	; 0x3a48 <process_action+0x46a>
            break;
#endif
        default:
            break;
    }
}
    39f4:	27 96       	adiw	r28, 0x07	; 7
    39f6:	0f b6       	in	r0, 0x3f	; 63
    39f8:	f8 94       	cli
    39fa:	de bf       	out	0x3e, r29	; 62
    39fc:	0f be       	out	0x3f, r0	; 63
    39fe:	cd bf       	out	0x3d, r28	; 61
    3a00:	df 91       	pop	r29
    3a02:	cf 91       	pop	r28
    3a04:	1f 91       	pop	r17
    3a06:	0f 91       	pop	r16
    3a08:	ff 90       	pop	r15
    3a0a:	ef 90       	pop	r14
    3a0c:	df 90       	pop	r13
    3a0e:	cf 90       	pop	r12
    3a10:	bf 90       	pop	r11
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    3a12:	0c 94 75 23 	jmp	0x46ea	; 0x46ea <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    3a16:	6c 29       	or	r22, r12
    3a18:	7d 29       	or	r23, r13
    3a1a:	8e 29       	or	r24, r14
    3a1c:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    3a1e:	27 96       	adiw	r28, 0x07	; 7
    3a20:	0f b6       	in	r0, 0x3f	; 63
    3a22:	f8 94       	cli
    3a24:	de bf       	out	0x3e, r29	; 62
    3a26:	0f be       	out	0x3f, r0	; 63
    3a28:	cd bf       	out	0x3d, r28	; 61
    3a2a:	df 91       	pop	r29
    3a2c:	cf 91       	pop	r28
    3a2e:	1f 91       	pop	r17
    3a30:	0f 91       	pop	r16
    3a32:	ff 90       	pop	r15
    3a34:	ef 90       	pop	r14
    3a36:	df 90       	pop	r13
    3a38:	cf 90       	pop	r12
    3a3a:	bf 90       	pop	r11
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    3a3c:	0c 94 87 23 	jmp	0x470e	; 0x470e <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    3a40:	0e 94 75 23 	call	0x46ea	; 0x46ea <layer_and>
    3a44:	c7 01       	movw	r24, r14
    3a46:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    3a48:	27 96       	adiw	r28, 0x07	; 7
    3a4a:	0f b6       	in	r0, 0x3f	; 63
    3a4c:	f8 94       	cli
    3a4e:	de bf       	out	0x3e, r29	; 62
    3a50:	0f be       	out	0x3f, r0	; 63
    3a52:	cd bf       	out	0x3d, r28	; 61
    3a54:	df 91       	pop	r29
    3a56:	cf 91       	pop	r28
    3a58:	1f 91       	pop	r17
    3a5a:	0f 91       	pop	r16
    3a5c:	ff 90       	pop	r15
    3a5e:	ef 90       	pop	r14
    3a60:	df 90       	pop	r13
    3a62:	cf 90       	pop	r12
    3a64:	bf 90       	pop	r11
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    3a66:	0c 94 63 23 	jmp	0x46c6	; 0x46c6 <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    3a6a:	60 3f       	cpi	r22, 0xF0	; 240
    3a6c:	59 f1       	breq	.+86     	; 0x3ac4 <process_action+0x4e6>
    3a6e:	20 f4       	brcc	.+8      	; 0x3a78 <process_action+0x49a>
    3a70:	60 3e       	cpi	r22, 0xE0	; 224
    3a72:	08 f4       	brcc	.+2      	; 0x3a76 <process_action+0x498>
    3a74:	94 c0       	rjmp	.+296    	; 0x3b9e <process_action+0x5c0>
    3a76:	08 c0       	rjmp	.+16     	; 0x3a88 <process_action+0x4aa>
    3a78:	62 3f       	cpi	r22, 0xF2	; 242
    3a7a:	09 f4       	brne	.+2      	; 0x3a7e <process_action+0x4a0>
    3a7c:	67 c0       	rjmp	.+206    	; 0x3b4c <process_action+0x56e>
    3a7e:	f0 f1       	brcs	.+124    	; 0x3afc <process_action+0x51e>
    3a80:	63 3f       	cpi	r22, 0xF3	; 243
    3a82:	09 f0       	breq	.+2      	; 0x3a86 <process_action+0x4a8>
    3a84:	8c c0       	rjmp	.+280    	; 0x3b9e <process_action+0x5c0>
    3a86:	65 c0       	rjmp	.+202    	; 0x3b52 <process_action+0x574>
    3a88:	16 2f       	mov	r17, r22
    3a8a:	1f 70       	andi	r17, 0x0F	; 15
    3a8c:	8b 2d       	mov	r24, r11
    3a8e:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    3a90:	ff 20       	and	r15, r15
    3a92:	21 f0       	breq	.+8      	; 0x3a9c <process_action+0x4be>
                        layer_on(action.layer_tap.val);
    3a94:	0e 94 0e 23 	call	0x461c	; 0x461c <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    3a98:	81 2f       	mov	r24, r17
    3a9a:	7d ce       	rjmp	.-774    	; 0x3796 <process_action+0x1b8>
                    } else {
                        layer_off(action.layer_tap.val);
    3a9c:	0e 94 29 23 	call	0x4652	; 0x4652 <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    3aa0:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    3aa2:	27 96       	adiw	r28, 0x07	; 7
    3aa4:	0f b6       	in	r0, 0x3f	; 63
    3aa6:	f8 94       	cli
    3aa8:	de bf       	out	0x3e, r29	; 62
    3aaa:	0f be       	out	0x3f, r0	; 63
    3aac:	cd bf       	out	0x3d, r28	; 61
    3aae:	df 91       	pop	r29
    3ab0:	cf 91       	pop	r28
    3ab2:	1f 91       	pop	r17
    3ab4:	0f 91       	pop	r16
    3ab6:	ff 90       	pop	r15
    3ab8:	ef 90       	pop	r14
    3aba:	df 90       	pop	r13
    3abc:	cf 90       	pop	r12
    3abe:	bf 90       	pop	r11
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    3ac0:	0c 94 e8 1a 	jmp	0x35d0	; 0x35d0 <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    3ac4:	ff 20       	and	r15, r15
    3ac6:	b1 f0       	breq	.+44     	; 0x3af4 <process_action+0x516>
                        if (tap_count < TAPPING_TOGGLE) {
    3ac8:	55 30       	cpi	r21, 0x05	; 5
    3aca:	08 f0       	brcs	.+2      	; 0x3ace <process_action+0x4f0>
    3acc:	2e c1       	rjmp	.+604    	; 0x3d2a <process_action+0x74c>
                            layer_invert(action.layer_tap.val);
    3ace:	8b 2d       	mov	r24, r11
    3ad0:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    3ad2:	27 96       	adiw	r28, 0x07	; 7
    3ad4:	0f b6       	in	r0, 0x3f	; 63
    3ad6:	f8 94       	cli
    3ad8:	de bf       	out	0x3e, r29	; 62
    3ada:	0f be       	out	0x3f, r0	; 63
    3adc:	cd bf       	out	0x3d, r28	; 61
    3ade:	df 91       	pop	r29
    3ae0:	cf 91       	pop	r28
    3ae2:	1f 91       	pop	r17
    3ae4:	0f 91       	pop	r16
    3ae6:	ff 90       	pop	r15
    3ae8:	ef 90       	pop	r14
    3aea:	df 90       	pop	r13
    3aec:	cf 90       	pop	r12
    3aee:	bf 90       	pop	r11
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    3af0:	0c 94 48 23 	jmp	0x4690	; 0x4690 <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    3af4:	56 30       	cpi	r21, 0x06	; 6
    3af6:	08 f0       	brcs	.+2      	; 0x3afa <process_action+0x51c>
    3af8:	18 c1       	rjmp	.+560    	; 0x3d2a <process_action+0x74c>
    3afa:	e9 cf       	rjmp	.-46     	; 0x3ace <process_action+0x4f0>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    3afc:	ff 20       	and	r15, r15
    3afe:	99 f0       	breq	.+38     	; 0x3b26 <process_action+0x548>
    3b00:	8b 2d       	mov	r24, r11
    3b02:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    3b04:	27 96       	adiw	r28, 0x07	; 7
    3b06:	0f b6       	in	r0, 0x3f	; 63
    3b08:	f8 94       	cli
    3b0a:	de bf       	out	0x3e, r29	; 62
    3b0c:	0f be       	out	0x3f, r0	; 63
    3b0e:	cd bf       	out	0x3d, r28	; 61
    3b10:	df 91       	pop	r29
    3b12:	cf 91       	pop	r28
    3b14:	1f 91       	pop	r17
    3b16:	0f 91       	pop	r16
    3b18:	ff 90       	pop	r15
    3b1a:	ef 90       	pop	r14
    3b1c:	df 90       	pop	r13
    3b1e:	cf 90       	pop	r12
    3b20:	bf 90       	pop	r11
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    3b22:	0c 94 0e 23 	jmp	0x461c	; 0x461c <layer_on>
                                    layer_off(action.layer_tap.val);
    3b26:	8b 2d       	mov	r24, r11
    3b28:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    3b2a:	27 96       	adiw	r28, 0x07	; 7
    3b2c:	0f b6       	in	r0, 0x3f	; 63
    3b2e:	f8 94       	cli
    3b30:	de bf       	out	0x3e, r29	; 62
    3b32:	0f be       	out	0x3f, r0	; 63
    3b34:	cd bf       	out	0x3d, r28	; 61
    3b36:	df 91       	pop	r29
    3b38:	cf 91       	pop	r28
    3b3a:	1f 91       	pop	r17
    3b3c:	0f 91       	pop	r16
    3b3e:	ff 90       	pop	r15
    3b40:	ef 90       	pop	r14
    3b42:	df 90       	pop	r13
    3b44:	cf 90       	pop	r12
    3b46:	bf 90       	pop	r11
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    3b48:	0c 94 29 23 	jmp	0x4652	; 0x4652 <layer_off>
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    3b4c:	f1 10       	cpse	r15, r1
    3b4e:	eb cf       	rjmp	.-42     	; 0x3b26 <process_action+0x548>
    3b50:	d7 cf       	rjmp	.-82     	; 0x3b00 <process_action+0x522>
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    3b52:	ff 20       	and	r15, r15
    3b54:	99 f0       	breq	.+38     	; 0x3b7c <process_action+0x59e>
    3b56:	8b 2d       	mov	r24, r11
    3b58:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    3b5a:	27 96       	adiw	r28, 0x07	; 7
    3b5c:	0f b6       	in	r0, 0x3f	; 63
    3b5e:	f8 94       	cli
    3b60:	de bf       	out	0x3e, r29	; 62
    3b62:	0f be       	out	0x3f, r0	; 63
    3b64:	cd bf       	out	0x3d, r28	; 61
    3b66:	df 91       	pop	r29
    3b68:	cf 91       	pop	r28
    3b6a:	1f 91       	pop	r17
    3b6c:	0f 91       	pop	r16
    3b6e:	ff 90       	pop	r15
    3b70:	ef 90       	pop	r14
    3b72:	df 90       	pop	r13
    3b74:	cf 90       	pop	r12
    3b76:	bf 90       	pop	r11
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    3b78:	0c 94 ff 22 	jmp	0x45fe	; 0x45fe <layer_move>
            break;
#endif
        default:
            break;
    }
}
    3b7c:	27 96       	adiw	r28, 0x07	; 7
    3b7e:	0f b6       	in	r0, 0x3f	; 63
    3b80:	f8 94       	cli
    3b82:	de bf       	out	0x3e, r29	; 62
    3b84:	0f be       	out	0x3f, r0	; 63
    3b86:	cd bf       	out	0x3d, r28	; 61
    3b88:	df 91       	pop	r29
    3b8a:	cf 91       	pop	r28
    3b8c:	1f 91       	pop	r17
    3b8e:	0f 91       	pop	r16
    3b90:	ff 90       	pop	r15
    3b92:	ef 90       	pop	r14
    3b94:	df 90       	pop	r13
    3b96:	cf 90       	pop	r12
    3b98:	bf 90       	pop	r11
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    3b9a:	0c 94 fa 22 	jmp	0x45f4	; 0x45f4 <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    3b9e:	ff 20       	and	r15, r15
    3ba0:	a9 f0       	breq	.+42     	; 0x3bcc <process_action+0x5ee>
                        if (tap_count > 0) {
    3ba2:	55 23       	and	r21, r21
    3ba4:	09 f4       	brne	.+2      	; 0x3ba8 <process_action+0x5ca>
    3ba6:	ac cf       	rjmp	.-168    	; 0x3b00 <process_action+0x522>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    3ba8:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    3baa:	27 96       	adiw	r28, 0x07	; 7
    3bac:	0f b6       	in	r0, 0x3f	; 63
    3bae:	f8 94       	cli
    3bb0:	de bf       	out	0x3e, r29	; 62
    3bb2:	0f be       	out	0x3f, r0	; 63
    3bb4:	cd bf       	out	0x3d, r28	; 61
    3bb6:	df 91       	pop	r29
    3bb8:	cf 91       	pop	r28
    3bba:	1f 91       	pop	r17
    3bbc:	0f 91       	pop	r16
    3bbe:	ff 90       	pop	r15
    3bc0:	ef 90       	pop	r14
    3bc2:	df 90       	pop	r13
    3bc4:	cf 90       	pop	r12
    3bc6:	bf 90       	pop	r11
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    3bc8:	0c 94 c8 19 	jmp	0x3390	; 0x3390 <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    3bcc:	55 23       	and	r21, r21
    3bce:	09 f4       	brne	.+2      	; 0x3bd2 <process_action+0x5f4>
    3bd0:	aa cf       	rjmp	.-172    	; 0x3b26 <process_action+0x548>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    3bd2:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    3bd4:	27 96       	adiw	r28, 0x07	; 7
    3bd6:	0f b6       	in	r0, 0x3f	; 63
    3bd8:	f8 94       	cli
    3bda:	de bf       	out	0x3e, r29	; 62
    3bdc:	0f be       	out	0x3f, r0	; 63
    3bde:	cd bf       	out	0x3d, r28	; 61
    3be0:	df 91       	pop	r29
    3be2:	cf 91       	pop	r28
    3be4:	1f 91       	pop	r17
    3be6:	0f 91       	pop	r16
    3be8:	ff 90       	pop	r15
    3bea:	ef 90       	pop	r14
    3bec:	df 90       	pop	r13
    3bee:	cf 90       	pop	r12
    3bf0:	bf 90       	pop	r11
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    3bf2:	0c 94 90 1a 	jmp	0x3520	; 0x3520 <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    3bf6:	4b 2d       	mov	r20, r11
    3bf8:	4f 70       	andi	r20, 0x0F	; 15
    3bfa:	c8 01       	movw	r24, r16
    3bfc:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    3c00:	27 96       	adiw	r28, 0x07	; 7
    3c02:	0f b6       	in	r0, 0x3f	; 63
    3c04:	f8 94       	cli
    3c06:	de bf       	out	0x3e, r29	; 62
    3c08:	0f be       	out	0x3f, r0	; 63
    3c0a:	cd bf       	out	0x3d, r28	; 61
    3c0c:	df 91       	pop	r29
    3c0e:	cf 91       	pop	r28
    3c10:	1f 91       	pop	r17
    3c12:	0f 91       	pop	r16
    3c14:	ff 90       	pop	r15
    3c16:	ef 90       	pop	r14
    3c18:	df 90       	pop	r13
    3c1a:	cf 90       	pop	r12
    3c1c:	bf 90       	pop	r11
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    3c1e:	0c 94 2c 22 	jmp	0x4458	; 0x4458 <action_macro_play>
            break;
#endif
#ifdef BACKLIGHT_ENABLE
        case ACT_BACKLIGHT:
            if (!event.pressed) {
    3c22:	f1 10       	cpse	r15, r1
    3c24:	82 c0       	rjmp	.+260    	; 0x3d2a <process_action+0x74c>
                switch (action.backlight.opt) {
    3c26:	9b 2d       	mov	r25, r11
    3c28:	9f 70       	andi	r25, 0x0F	; 15
    3c2a:	49 2f       	mov	r20, r25
    3c2c:	50 e0       	ldi	r21, 0x00	; 0
    3c2e:	42 30       	cpi	r20, 0x02	; 2
    3c30:	51 05       	cpc	r21, r1
    3c32:	99 f1       	breq	.+102    	; 0x3c9a <process_action+0x6bc>
    3c34:	44 f4       	brge	.+16     	; 0x3c46 <process_action+0x668>
    3c36:	41 15       	cp	r20, r1
    3c38:	51 05       	cpc	r21, r1
    3c3a:	69 f0       	breq	.+26     	; 0x3c56 <process_action+0x678>
    3c3c:	41 30       	cpi	r20, 0x01	; 1
    3c3e:	51 05       	cpc	r21, r1
    3c40:	09 f0       	breq	.+2      	; 0x3c44 <process_action+0x666>
    3c42:	73 c0       	rjmp	.+230    	; 0x3d2a <process_action+0x74c>
    3c44:	19 c0       	rjmp	.+50     	; 0x3c78 <process_action+0x69a>
    3c46:	43 30       	cpi	r20, 0x03	; 3
    3c48:	51 05       	cpc	r21, r1
    3c4a:	c1 f1       	breq	.+112    	; 0x3cbc <process_action+0x6de>
    3c4c:	44 30       	cpi	r20, 0x04	; 4
    3c4e:	51 05       	cpc	r21, r1
    3c50:	09 f0       	breq	.+2      	; 0x3c54 <process_action+0x676>
    3c52:	6b c0       	rjmp	.+214    	; 0x3d2a <process_action+0x74c>
    3c54:	44 c0       	rjmp	.+136    	; 0x3cde <process_action+0x700>
            break;
#endif
        default:
            break;
    }
}
    3c56:	27 96       	adiw	r28, 0x07	; 7
    3c58:	0f b6       	in	r0, 0x3f	; 63
    3c5a:	f8 94       	cli
    3c5c:	de bf       	out	0x3e, r29	; 62
    3c5e:	0f be       	out	0x3f, r0	; 63
    3c60:	cd bf       	out	0x3d, r28	; 61
    3c62:	df 91       	pop	r29
    3c64:	cf 91       	pop	r28
    3c66:	1f 91       	pop	r17
    3c68:	0f 91       	pop	r16
    3c6a:	ff 90       	pop	r15
    3c6c:	ef 90       	pop	r14
    3c6e:	df 90       	pop	r13
    3c70:	cf 90       	pop	r12
    3c72:	bf 90       	pop	r11
#ifdef BACKLIGHT_ENABLE
        case ACT_BACKLIGHT:
            if (!event.pressed) {
                switch (action.backlight.opt) {
                    case BACKLIGHT_INCREASE:
                        backlight_increase();
    3c74:	0c 94 cc 2b 	jmp	0x5798	; 0x5798 <backlight_increase>
            break;
#endif
        default:
            break;
    }
}
    3c78:	27 96       	adiw	r28, 0x07	; 7
    3c7a:	0f b6       	in	r0, 0x3f	; 63
    3c7c:	f8 94       	cli
    3c7e:	de bf       	out	0x3e, r29	; 62
    3c80:	0f be       	out	0x3f, r0	; 63
    3c82:	cd bf       	out	0x3d, r28	; 61
    3c84:	df 91       	pop	r29
    3c86:	cf 91       	pop	r28
    3c88:	1f 91       	pop	r17
    3c8a:	0f 91       	pop	r16
    3c8c:	ff 90       	pop	r15
    3c8e:	ef 90       	pop	r14
    3c90:	df 90       	pop	r13
    3c92:	cf 90       	pop	r12
    3c94:	bf 90       	pop	r11
                switch (action.backlight.opt) {
                    case BACKLIGHT_INCREASE:
                        backlight_increase();
                        break;
                    case BACKLIGHT_DECREASE:
                        backlight_decrease();
    3c96:	0c 94 e3 2b 	jmp	0x57c6	; 0x57c6 <backlight_decrease>
            break;
#endif
        default:
            break;
    }
}
    3c9a:	27 96       	adiw	r28, 0x07	; 7
    3c9c:	0f b6       	in	r0, 0x3f	; 63
    3c9e:	f8 94       	cli
    3ca0:	de bf       	out	0x3e, r29	; 62
    3ca2:	0f be       	out	0x3f, r0	; 63
    3ca4:	cd bf       	out	0x3d, r28	; 61
    3ca6:	df 91       	pop	r29
    3ca8:	cf 91       	pop	r28
    3caa:	1f 91       	pop	r17
    3cac:	0f 91       	pop	r16
    3cae:	ff 90       	pop	r15
    3cb0:	ef 90       	pop	r14
    3cb2:	df 90       	pop	r13
    3cb4:	cf 90       	pop	r12
    3cb6:	bf 90       	pop	r11
                        break;
                    case BACKLIGHT_DECREASE:
                        backlight_decrease();
                        break;
                    case BACKLIGHT_TOGGLE:
                        backlight_toggle();
    3cb8:	0c 94 ff 2b 	jmp	0x57fe	; 0x57fe <backlight_toggle>
            break;
#endif
        default:
            break;
    }
}
    3cbc:	27 96       	adiw	r28, 0x07	; 7
    3cbe:	0f b6       	in	r0, 0x3f	; 63
    3cc0:	f8 94       	cli
    3cc2:	de bf       	out	0x3e, r29	; 62
    3cc4:	0f be       	out	0x3f, r0	; 63
    3cc6:	cd bf       	out	0x3d, r28	; 61
    3cc8:	df 91       	pop	r29
    3cca:	cf 91       	pop	r28
    3ccc:	1f 91       	pop	r17
    3cce:	0f 91       	pop	r16
    3cd0:	ff 90       	pop	r15
    3cd2:	ef 90       	pop	r14
    3cd4:	df 90       	pop	r13
    3cd6:	cf 90       	pop	r12
    3cd8:	bf 90       	pop	r11
                        break;
                    case BACKLIGHT_TOGGLE:
                        backlight_toggle();
                        break;
                    case BACKLIGHT_STEP:
                        backlight_step();
    3cda:	0c 94 12 2c 	jmp	0x5824	; 0x5824 <backlight_step>
                        break;
                    case BACKLIGHT_LEVEL:
                        backlight_level(action.backlight.level);
    3cde:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    3ce0:	27 96       	adiw	r28, 0x07	; 7
    3ce2:	0f b6       	in	r0, 0x3f	; 63
    3ce4:	f8 94       	cli
    3ce6:	de bf       	out	0x3e, r29	; 62
    3ce8:	0f be       	out	0x3f, r0	; 63
    3cea:	cd bf       	out	0x3d, r28	; 61
    3cec:	df 91       	pop	r29
    3cee:	cf 91       	pop	r28
    3cf0:	1f 91       	pop	r17
    3cf2:	0f 91       	pop	r16
    3cf4:	ff 90       	pop	r15
    3cf6:	ef 90       	pop	r14
    3cf8:	df 90       	pop	r13
    3cfa:	cf 90       	pop	r12
    3cfc:	bf 90       	pop	r11
                        break;
                    case BACKLIGHT_STEP:
                        backlight_step();
                        break;
                    case BACKLIGHT_LEVEL:
                        backlight_level(action.backlight.level);
    3cfe:	0c 94 36 2c 	jmp	0x586c	; 0x586c <backlight_level>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    3d02:	4b 2d       	mov	r20, r11
    3d04:	4f 70       	andi	r20, 0x0F	; 15
    3d06:	c8 01       	movw	r24, r16
            break;
#endif
        default:
            break;
    }
}
    3d08:	27 96       	adiw	r28, 0x07	; 7
    3d0a:	0f b6       	in	r0, 0x3f	; 63
    3d0c:	f8 94       	cli
    3d0e:	de bf       	out	0x3e, r29	; 62
    3d10:	0f be       	out	0x3f, r0	; 63
    3d12:	cd bf       	out	0x3d, r28	; 61
    3d14:	df 91       	pop	r29
    3d16:	cf 91       	pop	r28
    3d18:	1f 91       	pop	r17
    3d1a:	0f 91       	pop	r16
    3d1c:	ff 90       	pop	r15
    3d1e:	ef 90       	pop	r14
    3d20:	df 90       	pop	r13
    3d22:	cf 90       	pop	r12
    3d24:	bf 90       	pop	r11
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    3d26:	0c 94 5f 04 	jmp	0x8be	; 0x8be <action_function>
            break;
#endif
        default:
            break;
    }
}
    3d2a:	27 96       	adiw	r28, 0x07	; 7
    3d2c:	0f b6       	in	r0, 0x3f	; 63
    3d2e:	f8 94       	cli
    3d30:	de bf       	out	0x3e, r29	; 62
    3d32:	0f be       	out	0x3f, r0	; 63
    3d34:	cd bf       	out	0x3d, r28	; 61
    3d36:	df 91       	pop	r29
    3d38:	cf 91       	pop	r28
    3d3a:	1f 91       	pop	r17
    3d3c:	0f 91       	pop	r16
    3d3e:	ff 90       	pop	r15
    3d40:	ef 90       	pop	r14
    3d42:	df 90       	pop	r13
    3d44:	cf 90       	pop	r12
    3d46:	bf 90       	pop	r11
    3d48:	08 95       	ret

00003d4a <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    3d4a:	0e 94 7f 24 	call	0x48fe	; 0x48fe <clear_weak_mods>
    clear_keys();
    3d4e:	0e 94 51 24 	call	0x48a2	; 0x48a2 <clear_keys>
    send_keyboard_report();
    3d52:	0e 94 9b 24 	call	0x4936	; 0x4936 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    3d56:	0e 94 94 29 	call	0x5328	; 0x5328 <mousekey_clear>
    mousekey_send();
    3d5a:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    3d5e:	80 e0       	ldi	r24, 0x00	; 0
    3d60:	90 e0       	ldi	r25, 0x00	; 0
    3d62:	0e 94 a8 18 	call	0x3150	; 0x3150 <host_system_send>
    host_consumer_send(0);
    3d66:	80 e0       	ldi	r24, 0x00	; 0
    3d68:	90 e0       	ldi	r25, 0x00	; 0
    3d6a:	0c 94 be 18 	jmp	0x317c	; 0x317c <host_consumer_send>

00003d6e <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    3d6e:	0e 94 6f 24 	call	0x48de	; 0x48de <clear_mods>
    clear_keyboard_but_mods();
    3d72:	0c 94 a5 1e 	jmp	0x3d4a	; 0x3d4a <clear_keyboard_but_mods>

00003d76 <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    3d76:	0e 94 9a 23 	call	0x4734	; 0x4734 <layer_switch_get_action>

    switch (action.kind.id) {
    3d7a:	29 2f       	mov	r18, r25
    3d7c:	22 95       	swap	r18
    3d7e:	2f 70       	andi	r18, 0x0F	; 15
    3d80:	30 e0       	ldi	r19, 0x00	; 0
    3d82:	2c 30       	cpi	r18, 0x0C	; 12
    3d84:	31 05       	cpc	r19, r1
    3d86:	4c f4       	brge	.+18     	; 0x3d9a <is_tap_key+0x24>
    3d88:	2a 30       	cpi	r18, 0x0A	; 10
    3d8a:	31 05       	cpc	r19, r1
    3d8c:	6c f4       	brge	.+26     	; 0x3da8 <is_tap_key+0x32>
    3d8e:	22 50       	subi	r18, 0x02	; 2
    3d90:	31 09       	sbc	r19, r1
    3d92:	22 30       	cpi	r18, 0x02	; 2
    3d94:	31 05       	cpc	r19, r1
    3d96:	90 f4       	brcc	.+36     	; 0x3dbc <is_tap_key+0x46>
    3d98:	07 c0       	rjmp	.+14     	; 0x3da8 <is_tap_key+0x32>
    3d9a:	2c 30       	cpi	r18, 0x0C	; 12
    3d9c:	31 05       	cpc	r19, r1
    3d9e:	51 f0       	breq	.+20     	; 0x3db4 <is_tap_key+0x3e>
    3da0:	2f 30       	cpi	r18, 0x0F	; 15
    3da2:	31 05       	cpc	r19, r1
    3da4:	59 f4       	brne	.+22     	; 0x3dbc <is_tap_key+0x46>
    3da6:	06 c0       	rjmp	.+12     	; 0x3db4 <is_tap_key+0x3e>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    3da8:	80 3e       	cpi	r24, 0xE0	; 224
    3daa:	10 f0       	brcs	.+4      	; 0x3db0 <is_tap_key+0x3a>
    3dac:	80 3f       	cpi	r24, 0xF0	; 240
    3dae:	31 f4       	brne	.+12     	; 0x3dbc <is_tap_key+0x46>
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
    3db0:	81 e0       	ldi	r24, 0x01	; 1
    3db2:	08 95       	ret
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    3db4:	93 fb       	bst	r25, 3
    3db6:	88 27       	eor	r24, r24
    3db8:	80 f9       	bld	r24, 0
    3dba:	08 95       	ret
            switch (action.layer_tap.code) {
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
            }
            return false;
    3dbc:	80 e0       	ldi	r24, 0x00	; 0
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    3dbe:	08 95       	ret

00003dc0 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    3dc0:	cf 93       	push	r28
    3dc2:	df 93       	push	r29
    3dc4:	00 d0       	rcall	.+0      	; 0x3dc6 <debug_event+0x6>
    3dc6:	00 d0       	rcall	.+0      	; 0x3dc8 <debug_event+0x8>
    3dc8:	1f 92       	push	r1
    3dca:	cd b7       	in	r28, 0x3d	; 61
    3dcc:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    3dce:	0f 90       	pop	r0
    3dd0:	0f 90       	pop	r0
    3dd2:	0f 90       	pop	r0
    3dd4:	0f 90       	pop	r0
    3dd6:	0f 90       	pop	r0
    3dd8:	df 91       	pop	r29
    3dda:	cf 91       	pop	r28
    3ddc:	08 95       	ret

00003dde <debug_record>:

void debug_record(keyrecord_t record)
{
    3dde:	cf 93       	push	r28
    3de0:	df 93       	push	r29
    3de2:	00 d0       	rcall	.+0      	; 0x3de4 <debug_record+0x6>
    3de4:	00 d0       	rcall	.+0      	; 0x3de6 <debug_record+0x8>
    3de6:	00 d0       	rcall	.+0      	; 0x3de8 <debug_record+0xa>
    3de8:	cd b7       	in	r28, 0x3d	; 61
    3dea:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    3dec:	26 96       	adiw	r28, 0x06	; 6
    3dee:	0f b6       	in	r0, 0x3f	; 63
    3df0:	f8 94       	cli
    3df2:	de bf       	out	0x3e, r29	; 62
    3df4:	0f be       	out	0x3f, r0	; 63
    3df6:	cd bf       	out	0x3d, r28	; 61
    3df8:	df 91       	pop	r29
    3dfa:	cf 91       	pop	r28
    3dfc:	08 95       	ret

00003dfe <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    3dfe:	1f 93       	push	r17
    3e00:	cf 93       	push	r28
    3e02:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3e04:	c0 91 e8 01 	lds	r28, 0x01E8
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    3e08:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3e0a:	12 c0       	rjmp	.+36     	; 0x3e30 <debug_waiting_buffer+0x32>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    3e0c:	d0 e0       	ldi	r29, 0x00	; 0
    3e0e:	1c 9f       	mul	r17, r28
    3e10:	f0 01       	movw	r30, r0
    3e12:	1d 9f       	mul	r17, r29
    3e14:	f0 0d       	add	r31, r0
    3e16:	11 24       	eor	r1, r1
    3e18:	e8 54       	subi	r30, 0x48	; 72
    3e1a:	fe 4f       	sbci	r31, 0xFE	; 254
    3e1c:	40 81       	ld	r20, Z
    3e1e:	51 81       	ldd	r21, Z+1	; 0x01
    3e20:	62 81       	ldd	r22, Z+2	; 0x02
    3e22:	73 81       	ldd	r23, Z+3	; 0x03
    3e24:	84 81       	ldd	r24, Z+4	; 0x04
    3e26:	95 81       	ldd	r25, Z+5	; 0x05
    3e28:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3e2c:	21 96       	adiw	r28, 0x01	; 1
    3e2e:	c7 70       	andi	r28, 0x07	; 7
    3e30:	80 91 e9 01 	lds	r24, 0x01E9
    3e34:	c8 13       	cpse	r28, r24
    3e36:	ea cf       	rjmp	.-44     	; 0x3e0c <debug_waiting_buffer+0xe>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    3e38:	df 91       	pop	r29
    3e3a:	cf 91       	pop	r28
    3e3c:	1f 91       	pop	r17
    3e3e:	08 95       	ret

00003e40 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    3e40:	40 91 b2 01 	lds	r20, 0x01B2
    3e44:	50 91 b3 01 	lds	r21, 0x01B3
    3e48:	60 91 b4 01 	lds	r22, 0x01B4
    3e4c:	70 91 b5 01 	lds	r23, 0x01B5
    3e50:	80 91 b6 01 	lds	r24, 0x01B6
    3e54:	90 91 b7 01 	lds	r25, 0x01B7
    3e58:	0c 94 ef 1e 	jmp	0x3dde	; 0x3dde <debug_record>

00003e5c <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    3e5c:	0f 93       	push	r16
    3e5e:	1f 93       	push	r17
    3e60:	cf 93       	push	r28
    3e62:	df 93       	push	r29
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    3e64:	80 91 b7 01 	lds	r24, 0x01B7
    3e68:	82 95       	swap	r24
    3e6a:	8f 70       	andi	r24, 0x0F	; 15
    3e6c:	09 f0       	breq	.+2      	; 0x3e70 <waiting_buffer_scan_tap+0x14>
    3e6e:	69 c0       	rjmp	.+210    	; 0x3f42 <waiting_buffer_scan_tap+0xe6>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    3e70:	80 91 b4 01 	lds	r24, 0x01B4
    3e74:	88 23       	and	r24, r24
    3e76:	09 f4       	brne	.+2      	; 0x3e7a <waiting_buffer_scan_tap+0x1e>
    3e78:	64 c0       	rjmp	.+200    	; 0x3f42 <waiting_buffer_scan_tap+0xe6>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3e7a:	a0 91 e8 01 	lds	r26, 0x01E8
    3e7e:	d0 91 e9 01 	lds	r29, 0x01E9
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    3e82:	b0 91 b2 01 	lds	r27, 0x01B2
    3e86:	c0 91 b3 01 	lds	r28, 0x01B3
    3e8a:	80 91 b5 01 	lds	r24, 0x01B5
    3e8e:	90 91 b6 01 	lds	r25, 0x01B6
    3e92:	21 e0       	ldi	r18, 0x01	; 1
    3e94:	30 e0       	ldi	r19, 0x00	; 0
    3e96:	bf 3f       	cpi	r27, 0xFF	; 255
    3e98:	11 f0       	breq	.+4      	; 0x3e9e <waiting_buffer_scan_tap+0x42>
    3e9a:	20 e0       	ldi	r18, 0x00	; 0
    3e9c:	30 e0       	ldi	r19, 0x00	; 0
    3e9e:	12 2f       	mov	r17, r18
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    3ea0:	bc 01       	movw	r22, r24
    3ea2:	60 95       	com	r22
    3ea4:	70 95       	com	r23
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    3ea6:	06 e0       	ldi	r16, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3ea8:	4a c0       	rjmp	.+148    	; 0x3f3e <waiting_buffer_scan_tap+0xe2>
    3eaa:	00 97       	sbiw	r24, 0x00	; 0
    3eac:	21 f0       	breq	.+8      	; 0x3eb6 <waiting_buffer_scan_tap+0x5a>
    3eae:	cf 3f       	cpi	r28, 0xFF	; 255
    3eb0:	29 f4       	brne	.+10     	; 0x3ebc <waiting_buffer_scan_tap+0x60>
    3eb2:	21 2f       	mov	r18, r17
    3eb4:	05 c0       	rjmp	.+10     	; 0x3ec0 <waiting_buffer_scan_tap+0x64>
    3eb6:	21 e0       	ldi	r18, 0x01	; 1
    3eb8:	30 e0       	ldi	r19, 0x00	; 0
    3eba:	02 c0       	rjmp	.+4      	; 0x3ec0 <waiting_buffer_scan_tap+0x64>
    3ebc:	20 e0       	ldi	r18, 0x00	; 0
    3ebe:	30 e0       	ldi	r19, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    3ec0:	20 fd       	sbrc	r18, 0
    3ec2:	3b c0       	rjmp	.+118    	; 0x3f3a <waiting_buffer_scan_tap+0xde>
    3ec4:	4a 2f       	mov	r20, r26
    3ec6:	50 e0       	ldi	r21, 0x00	; 0
    3ec8:	04 9f       	mul	r16, r20
    3eca:	f0 01       	movw	r30, r0
    3ecc:	05 9f       	mul	r16, r21
    3ece:	f0 0d       	add	r31, r0
    3ed0:	11 24       	eor	r1, r1
    3ed2:	e8 54       	subi	r30, 0x48	; 72
    3ed4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ed6:	21 81       	ldd	r18, Z+1	; 0x01
    3ed8:	c2 13       	cpse	r28, r18
    3eda:	2f c0       	rjmp	.+94     	; 0x3f3a <waiting_buffer_scan_tap+0xde>
    3edc:	20 81       	ld	r18, Z
    3ede:	b2 13       	cpse	r27, r18
    3ee0:	2c c0       	rjmp	.+88     	; 0x3f3a <waiting_buffer_scan_tap+0xde>
    3ee2:	22 81       	ldd	r18, Z+2	; 0x02
    3ee4:	21 11       	cpse	r18, r1
    3ee6:	29 c0       	rjmp	.+82     	; 0x3f3a <waiting_buffer_scan_tap+0xde>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    3ee8:	23 81       	ldd	r18, Z+3	; 0x03
    3eea:	34 81       	ldd	r19, Z+4	; 0x04
    3eec:	28 17       	cp	r18, r24
    3eee:	39 07       	cpc	r19, r25
    3ef0:	18 f0       	brcs	.+6      	; 0x3ef8 <waiting_buffer_scan_tap+0x9c>
    3ef2:	28 1b       	sub	r18, r24
    3ef4:	39 0b       	sbc	r19, r25
    3ef6:	02 c0       	rjmp	.+4      	; 0x3efc <waiting_buffer_scan_tap+0xa0>
    3ef8:	26 0f       	add	r18, r22
    3efa:	37 1f       	adc	r19, r23
    3efc:	28 3c       	cpi	r18, 0xC8	; 200
    3efe:	31 05       	cpc	r19, r1
    3f00:	e0 f4       	brcc	.+56     	; 0x3f3a <waiting_buffer_scan_tap+0xde>
            tapping_key.tap.count = 1;
    3f02:	80 91 b7 01 	lds	r24, 0x01B7
    3f06:	8f 70       	andi	r24, 0x0F	; 15
    3f08:	80 61       	ori	r24, 0x10	; 16
    3f0a:	80 93 b7 01 	sts	0x01B7, r24
            waiting_buffer[i].tap.count = 1;
    3f0e:	86 e0       	ldi	r24, 0x06	; 6
    3f10:	84 9f       	mul	r24, r20
    3f12:	f0 01       	movw	r30, r0
    3f14:	85 9f       	mul	r24, r21
    3f16:	f0 0d       	add	r31, r0
    3f18:	11 24       	eor	r1, r1
    3f1a:	e3 54       	subi	r30, 0x43	; 67
    3f1c:	fe 4f       	sbci	r31, 0xFE	; 254
    3f1e:	80 81       	ld	r24, Z
    3f20:	8f 70       	andi	r24, 0x0F	; 15
    3f22:	80 61       	ori	r24, 0x10	; 16
    3f24:	80 83       	st	Z, r24
            process_action(&tapping_key);
    3f26:	82 eb       	ldi	r24, 0xB2	; 178
    3f28:	91 e0       	ldi	r25, 0x01	; 1
    3f2a:	0e 94 ef 1a 	call	0x35de	; 0x35de <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    3f2e:	df 91       	pop	r29
    3f30:	cf 91       	pop	r28
    3f32:	1f 91       	pop	r17
    3f34:	0f 91       	pop	r16
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    3f36:	0c 94 ff 1e 	jmp	0x3dfe	; 0x3dfe <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3f3a:	af 5f       	subi	r26, 0xFF	; 255
    3f3c:	a7 70       	andi	r26, 0x07	; 7
    3f3e:	ad 13       	cpse	r26, r29
    3f40:	b4 cf       	rjmp	.-152    	; 0x3eaa <waiting_buffer_scan_tap+0x4e>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    3f42:	df 91       	pop	r29
    3f44:	cf 91       	pop	r28
    3f46:	1f 91       	pop	r17
    3f48:	0f 91       	pop	r16
    3f4a:	08 95       	ret

00003f4c <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    3f4c:	ef 92       	push	r14
    3f4e:	ff 92       	push	r15
    3f50:	0f 93       	push	r16
    3f52:	1f 93       	push	r17
    3f54:	cf 93       	push	r28
    3f56:	df 93       	push	r29
    3f58:	cd b7       	in	r28, 0x3d	; 61
    3f5a:	de b7       	in	r29, 0x3e	; 62
    3f5c:	62 97       	sbiw	r28, 0x12	; 18
    3f5e:	0f b6       	in	r0, 0x3f	; 63
    3f60:	f8 94       	cli
    3f62:	de bf       	out	0x3e, r29	; 62
    3f64:	0f be       	out	0x3f, r0	; 63
    3f66:	cd bf       	out	0x3d, r28	; 61
    3f68:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    3f6a:	85 e0       	ldi	r24, 0x05	; 5
    3f6c:	f8 01       	movw	r30, r16
    3f6e:	de 01       	movw	r26, r28
    3f70:	1d 96       	adiw	r26, 0x0d	; 13
    3f72:	01 90       	ld	r0, Z+
    3f74:	0d 92       	st	X+, r0
    3f76:	8a 95       	dec	r24
    3f78:	e1 f7       	brne	.-8      	; 0x3f72 <process_tapping+0x26>
    3f7a:	d8 01       	movw	r26, r16
    3f7c:	4c 91       	ld	r20, X
    3f7e:	11 96       	adiw	r26, 0x01	; 1
    3f80:	5c 91       	ld	r21, X
    3f82:	11 97       	sbiw	r26, 0x01	; 1
    3f84:	12 96       	adiw	r26, 0x02	; 2
    3f86:	6c 91       	ld	r22, X
    3f88:	12 97       	sbiw	r26, 0x02	; 2
    3f8a:	13 96       	adiw	r26, 0x03	; 3
    3f8c:	ed 90       	ld	r14, X+
    3f8e:	fc 90       	ld	r15, X
    3f90:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    3f92:	70 91 b2 01 	lds	r23, 0x01B2
    3f96:	e0 91 b3 01 	lds	r30, 0x01B3
    3f9a:	80 91 b5 01 	lds	r24, 0x01B5
    3f9e:	90 91 b6 01 	lds	r25, 0x01B6
    3fa2:	00 97       	sbiw	r24, 0x00	; 0
    3fa4:	39 f0       	breq	.+14     	; 0x3fb4 <process_tapping+0x68>
    3fa6:	ef 3f       	cpi	r30, 0xFF	; 255
    3fa8:	41 f4       	brne	.+16     	; 0x3fba <process_tapping+0x6e>
    3faa:	21 e0       	ldi	r18, 0x01	; 1
    3fac:	30 e0       	ldi	r19, 0x00	; 0
    3fae:	7f 3f       	cpi	r23, 0xFF	; 255
    3fb0:	31 f0       	breq	.+12     	; 0x3fbe <process_tapping+0x72>
    3fb2:	03 c0       	rjmp	.+6      	; 0x3fba <process_tapping+0x6e>
    3fb4:	21 e0       	ldi	r18, 0x01	; 1
    3fb6:	30 e0       	ldi	r19, 0x00	; 0
    3fb8:	02 c0       	rjmp	.+4      	; 0x3fbe <process_tapping+0x72>
    3fba:	20 e0       	ldi	r18, 0x00	; 0
    3fbc:	30 e0       	ldi	r19, 0x00	; 0
    3fbe:	20 fd       	sbrc	r18, 0
    3fc0:	5c c1       	rjmp	.+696    	; 0x427a <process_tapping+0x32e>
    3fc2:	20 91 b4 01 	lds	r18, 0x01B4
    3fc6:	22 23       	and	r18, r18
    3fc8:	09 f4       	brne	.+2      	; 0x3fcc <process_tapping+0x80>
    3fca:	f1 c0       	rjmp	.+482    	; 0x41ae <process_tapping+0x262>
        if (WITHIN_TAPPING_TERM(event)) {
    3fcc:	e8 16       	cp	r14, r24
    3fce:	f9 06       	cpc	r15, r25
    3fd0:	28 f0       	brcs	.+10     	; 0x3fdc <process_tapping+0x90>
    3fd2:	97 01       	movw	r18, r14
    3fd4:	28 1b       	sub	r18, r24
    3fd6:	39 0b       	sbc	r19, r25
    3fd8:	c9 01       	movw	r24, r18
    3fda:	04 c0       	rjmp	.+8      	; 0x3fe4 <process_tapping+0x98>
    3fdc:	80 95       	com	r24
    3fde:	90 95       	com	r25
    3fe0:	8e 0d       	add	r24, r14
    3fe2:	9f 1d       	adc	r25, r15
    3fe4:	88 3c       	cpi	r24, 0xC8	; 200
    3fe6:	91 05       	cpc	r25, r1
    3fe8:	08 f0       	brcs	.+2      	; 0x3fec <process_tapping+0xa0>
    3fea:	98 c0       	rjmp	.+304    	; 0x411c <process_tapping+0x1d0>
            if (tapping_key.tap.count == 0) {
    3fec:	80 91 b7 01 	lds	r24, 0x01B7
    3ff0:	98 2f       	mov	r25, r24
    3ff2:	90 7f       	andi	r25, 0xF0	; 240
    3ff4:	09 f0       	breq	.+2      	; 0x3ff8 <process_tapping+0xac>
    3ff6:	64 c0       	rjmp	.+200    	; 0x40c0 <process_tapping+0x174>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3ff8:	e5 13       	cpse	r30, r21
    3ffa:	14 c0       	rjmp	.+40     	; 0x4024 <process_tapping+0xd8>
    3ffc:	74 13       	cpse	r23, r20
    3ffe:	12 c0       	rjmp	.+36     	; 0x4024 <process_tapping+0xd8>
    4000:	61 11       	cpse	r22, r1
    4002:	10 c0       	rjmp	.+32     	; 0x4024 <process_tapping+0xd8>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    4004:	8f 70       	andi	r24, 0x0F	; 15
    4006:	80 61       	ori	r24, 0x10	; 16
    4008:	80 93 b7 01 	sts	0x01B7, r24
                    debug_tapping_key();
    400c:	0e 94 20 1f 	call	0x3e40	; 0x3e40 <debug_tapping_key>
                    process_action(&tapping_key);
    4010:	82 eb       	ldi	r24, 0xB2	; 178
    4012:	91 e0       	ldi	r25, 0x01	; 1
    4014:	0e 94 ef 1a 	call	0x35de	; 0x35de <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    4018:	80 91 b7 01 	lds	r24, 0x01B7
    401c:	d8 01       	movw	r26, r16
    401e:	15 96       	adiw	r26, 0x05	; 5
    4020:	8c 93       	st	X, r24
    4022:	43 c1       	rjmp	.+646    	; 0x42aa <process_tapping+0x35e>
    4024:	ef 28       	or	r14, r15
    4026:	39 f0       	breq	.+14     	; 0x4036 <process_tapping+0xea>
    4028:	5f 3f       	cpi	r21, 0xFF	; 255
    402a:	41 f4       	brne	.+16     	; 0x403c <process_tapping+0xf0>
    402c:	81 e0       	ldi	r24, 0x01	; 1
    402e:	90 e0       	ldi	r25, 0x00	; 0
    4030:	4f 3f       	cpi	r20, 0xFF	; 255
    4032:	31 f0       	breq	.+12     	; 0x4040 <process_tapping+0xf4>
    4034:	03 c0       	rjmp	.+6      	; 0x403c <process_tapping+0xf0>
    4036:	81 e0       	ldi	r24, 0x01	; 1
    4038:	90 e0       	ldi	r25, 0x00	; 0
    403a:	02 c0       	rjmp	.+4      	; 0x4040 <process_tapping+0xf4>
    403c:	80 e0       	ldi	r24, 0x00	; 0
    403e:	90 e0       	ldi	r25, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    4040:	80 fd       	sbrc	r24, 0
    4042:	03 c0       	rjmp	.+6      	; 0x404a <process_tapping+0xfe>
    4044:	81 e0       	ldi	r24, 0x01	; 1
    4046:	86 27       	eor	r24, r22
    4048:	02 c0       	rjmp	.+4      	; 0x404e <process_tapping+0x102>
    404a:	80 e0       	ldi	r24, 0x00	; 0
    404c:	90 e0       	ldi	r25, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    404e:	80 ff       	sbrs	r24, 0
    4050:	2e c0       	rjmp	.+92     	; 0x40ae <process_tapping+0x162>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    4052:	80 91 e8 01 	lds	r24, 0x01E8
    4056:	20 91 e9 01 	lds	r18, 0x01E9
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    405a:	36 e0       	ldi	r19, 0x06	; 6
    405c:	13 c0       	rjmp	.+38     	; 0x4084 <process_tapping+0x138>
    405e:	90 e0       	ldi	r25, 0x00	; 0
    4060:	38 9f       	mul	r19, r24
    4062:	f0 01       	movw	r30, r0
    4064:	39 9f       	mul	r19, r25
    4066:	f0 0d       	add	r31, r0
    4068:	11 24       	eor	r1, r1
    406a:	e8 54       	subi	r30, 0x48	; 72
    406c:	fe 4f       	sbci	r31, 0xFE	; 254
    406e:	71 81       	ldd	r23, Z+1	; 0x01
    4070:	57 13       	cpse	r21, r23
    4072:	06 c0       	rjmp	.+12     	; 0x4080 <process_tapping+0x134>
    4074:	70 81       	ld	r23, Z
    4076:	47 13       	cpse	r20, r23
    4078:	03 c0       	rjmp	.+6      	; 0x4080 <process_tapping+0x134>
    407a:	72 81       	ldd	r23, Z+2	; 0x02
    407c:	67 13       	cpse	r22, r23
    407e:	17 c0       	rjmp	.+46     	; 0x40ae <process_tapping+0x162>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    4080:	01 96       	adiw	r24, 0x01	; 1
    4082:	87 70       	andi	r24, 0x07	; 7
    4084:	82 13       	cpse	r24, r18
    4086:	eb cf       	rjmp	.-42     	; 0x405e <process_tapping+0x112>
    4088:	12 c1       	rjmp	.+548    	; 0x42ae <process_tapping+0x362>
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    408a:	9f 70       	andi	r25, 0x0F	; 15
    408c:	59 f0       	breq	.+22     	; 0x40a4 <process_tapping+0x158>
    408e:	88 23       	and	r24, r24
    4090:	09 f4       	brne	.+2      	; 0x4094 <process_tapping+0x148>
    4092:	0b c1       	rjmp	.+534    	; 0x42aa <process_tapping+0x35e>
    4094:	07 c0       	rjmp	.+14     	; 0x40a4 <process_tapping+0x158>
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    4096:	9f 70       	andi	r25, 0x0F	; 15
    4098:	29 f0       	breq	.+10     	; 0x40a4 <process_tapping+0x158>
    409a:	f8 01       	movw	r30, r16
    409c:	95 81       	ldd	r25, Z+5	; 0x05
    409e:	90 7f       	andi	r25, 0xF0	; 240
    40a0:	09 f4       	brne	.+2      	; 0x40a4 <process_tapping+0x158>
    40a2:	03 c1       	rjmp	.+518    	; 0x42aa <process_tapping+0x35e>
                            if (IS_MOD(action.key.code)) return false;
    40a4:	80 5e       	subi	r24, 0xE0	; 224
    40a6:	88 30       	cpi	r24, 0x08	; 8
    40a8:	08 f4       	brcc	.+2      	; 0x40ac <process_tapping+0x160>
    40aa:	ff c0       	rjmp	.+510    	; 0x42aa <process_tapping+0x35e>
    40ac:	d2 c0       	rjmp	.+420    	; 0x4252 <process_tapping+0x306>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    40ae:	66 23       	and	r22, r22
    40b0:	09 f4       	brne	.+2      	; 0x40b4 <process_tapping+0x168>
    40b2:	fb c0       	rjmp	.+502    	; 0x42aa <process_tapping+0x35e>
                        tapping_key.tap.interrupted = true;
    40b4:	80 91 b7 01 	lds	r24, 0x01B7
    40b8:	81 60       	ori	r24, 0x01	; 1
    40ba:	80 93 b7 01 	sts	0x01B7, r24
    40be:	f5 c0       	rjmp	.+490    	; 0x42aa <process_tapping+0x35e>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    40c0:	e5 13       	cpse	r30, r21
    40c2:	08 c0       	rjmp	.+16     	; 0x40d4 <process_tapping+0x188>
    40c4:	74 13       	cpse	r23, r20
    40c6:	06 c0       	rjmp	.+12     	; 0x40d4 <process_tapping+0x188>
    40c8:	61 11       	cpse	r22, r1
    40ca:	04 c0       	rjmp	.+8      	; 0x40d4 <process_tapping+0x188>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    40cc:	d8 01       	movw	r26, r16
    40ce:	15 96       	adiw	r26, 0x05	; 5
    40d0:	8c 93       	st	X, r24
    40d2:	9d c0       	rjmp	.+314    	; 0x420e <process_tapping+0x2c2>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    40d4:	4d 87       	std	Y+13, r20	; 0x0d
    40d6:	5e 87       	std	Y+14, r21	; 0x0e
    40d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    40da:	9e 85       	ldd	r25, Y+14	; 0x0e
    40dc:	6a 8b       	std	Y+18, r22	; 0x12
    40de:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <is_tap_key>
    40e2:	6a 89       	ldd	r22, Y+18	; 0x12
    40e4:	88 23       	and	r24, r24
    40e6:	09 f4       	brne	.+2      	; 0x40ea <process_tapping+0x19e>
    40e8:	b4 c0       	rjmp	.+360    	; 0x4252 <process_tapping+0x306>
    40ea:	66 23       	and	r22, r22
    40ec:	09 f4       	brne	.+2      	; 0x40f0 <process_tapping+0x1a4>
    40ee:	b1 c0       	rjmp	.+354    	; 0x4252 <process_tapping+0x306>
                    if (tapping_key.tap.count > 1) {
    40f0:	20 91 b7 01 	lds	r18, 0x01B7
    40f4:	82 2f       	mov	r24, r18
    40f6:	82 95       	swap	r24
    40f8:	8f 70       	andi	r24, 0x0F	; 15
    40fa:	90 e0       	ldi	r25, 0x00	; 0
    40fc:	02 97       	sbiw	r24, 0x02	; 2
    40fe:	0c f4       	brge	.+2      	; 0x4102 <process_tapping+0x1b6>
    4100:	c6 c0       	rjmp	.+396    	; 0x428e <process_tapping+0x342>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    4102:	80 91 b2 01 	lds	r24, 0x01B2
    4106:	90 91 b3 01 	lds	r25, 0x01B3
    410a:	98 87       	std	Y+8, r25	; 0x08
    410c:	8f 83       	std	Y+7, r24	; 0x07
    410e:	19 86       	std	Y+9, r1	; 0x09
    4110:	fb 86       	std	Y+11, r15	; 0x0b
    4112:	ea 86       	std	Y+10, r14	; 0x0a
    4114:	2c 87       	std	Y+12, r18	; 0x0c
    4116:	ce 01       	movw	r24, r28
    4118:	07 96       	adiw	r24, 0x07	; 7
    411a:	46 c0       	rjmp	.+140    	; 0x41a8 <process_tapping+0x25c>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    411c:	80 91 b7 01 	lds	r24, 0x01B7
    4120:	98 2f       	mov	r25, r24
    4122:	90 7f       	andi	r25, 0xF0	; 240
    4124:	59 f4       	brne	.+22     	; 0x413c <process_tapping+0x1f0>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    4126:	7e 2d       	mov	r23, r14
    4128:	f9 8a       	std	Y+17, r15	; 0x11
    412a:	e8 8a       	std	Y+16, r14	; 0x10
    412c:	89 89       	ldd	r24, Y+17	; 0x11
    412e:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <debug_event>
                process_action(&tapping_key);
    4132:	82 eb       	ldi	r24, 0xB2	; 178
    4134:	91 e0       	ldi	r25, 0x01	; 1
    4136:	0e 94 ef 1a 	call	0x35de	; 0x35de <process_action>
    413a:	95 c0       	rjmp	.+298    	; 0x4266 <process_tapping+0x31a>
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    413c:	e5 13       	cpse	r30, r21
    413e:	11 c0       	rjmp	.+34     	; 0x4162 <process_tapping+0x216>
    4140:	74 13       	cpse	r23, r20
    4142:	0f c0       	rjmp	.+30     	; 0x4162 <process_tapping+0x216>
    4144:	61 11       	cpse	r22, r1
    4146:	0d c0       	rjmp	.+26     	; 0x4162 <process_tapping+0x216>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    4148:	f8 01       	movw	r30, r16
    414a:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    414c:	c8 01       	movw	r24, r16
    414e:	0e 94 ef 1a 	call	0x35de	; 0x35de <process_action>
                    tapping_key = (keyrecord_t){};
    4152:	e2 eb       	ldi	r30, 0xB2	; 178
    4154:	f1 e0       	ldi	r31, 0x01	; 1
    4156:	86 e0       	ldi	r24, 0x06	; 6
    4158:	df 01       	movw	r26, r30
    415a:	1d 92       	st	X+, r1
    415c:	8a 95       	dec	r24
    415e:	e9 f7       	brne	.-6      	; 0x415a <process_tapping+0x20e>
    4160:	a2 c0       	rjmp	.+324    	; 0x42a6 <process_tapping+0x35a>
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    4162:	4d 87       	std	Y+13, r20	; 0x0d
    4164:	5e 87       	std	Y+14, r21	; 0x0e
    4166:	8d 85       	ldd	r24, Y+13	; 0x0d
    4168:	9e 85       	ldd	r25, Y+14	; 0x0e
    416a:	6a 8b       	std	Y+18, r22	; 0x12
    416c:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <is_tap_key>
    4170:	6a 89       	ldd	r22, Y+18	; 0x12
    4172:	88 23       	and	r24, r24
    4174:	09 f4       	brne	.+2      	; 0x4178 <process_tapping+0x22c>
    4176:	6d c0       	rjmp	.+218    	; 0x4252 <process_tapping+0x306>
    4178:	66 23       	and	r22, r22
    417a:	09 f4       	brne	.+2      	; 0x417e <process_tapping+0x232>
    417c:	6a c0       	rjmp	.+212    	; 0x4252 <process_tapping+0x306>
                    if (tapping_key.tap.count > 1) {
    417e:	20 91 b7 01 	lds	r18, 0x01B7
    4182:	82 2f       	mov	r24, r18
    4184:	82 95       	swap	r24
    4186:	8f 70       	andi	r24, 0x0F	; 15
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	02 97       	sbiw	r24, 0x02	; 2
    418c:	0c f4       	brge	.+2      	; 0x4190 <process_tapping+0x244>
    418e:	7f c0       	rjmp	.+254    	; 0x428e <process_tapping+0x342>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    4190:	80 91 b2 01 	lds	r24, 0x01B2
    4194:	90 91 b3 01 	lds	r25, 0x01B3
    4198:	9a 83       	std	Y+2, r25	; 0x02
    419a:	89 83       	std	Y+1, r24	; 0x01
    419c:	1b 82       	std	Y+3, r1	; 0x03
    419e:	fd 82       	std	Y+5, r15	; 0x05
    41a0:	ec 82       	std	Y+4, r14	; 0x04
    41a2:	2e 83       	std	Y+6, r18	; 0x06
    41a4:	ce 01       	movw	r24, r28
    41a6:	01 96       	adiw	r24, 0x01	; 1
    41a8:	0e 94 ef 1a 	call	0x35de	; 0x35de <process_action>
    41ac:	70 c0       	rjmp	.+224    	; 0x428e <process_tapping+0x342>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    41ae:	e8 16       	cp	r14, r24
    41b0:	f9 06       	cpc	r15, r25
    41b2:	28 f0       	brcs	.+10     	; 0x41be <process_tapping+0x272>
    41b4:	97 01       	movw	r18, r14
    41b6:	28 1b       	sub	r18, r24
    41b8:	39 0b       	sbc	r19, r25
    41ba:	c9 01       	movw	r24, r18
    41bc:	04 c0       	rjmp	.+8      	; 0x41c6 <process_tapping+0x27a>
    41be:	80 95       	com	r24
    41c0:	90 95       	com	r25
    41c2:	8e 0d       	add	r24, r14
    41c4:	9f 1d       	adc	r25, r15
    41c6:	88 3c       	cpi	r24, 0xC8	; 200
    41c8:	91 05       	cpc	r25, r1
    41ca:	08 f0       	brcs	.+2      	; 0x41ce <process_tapping+0x282>
    41cc:	46 c0       	rjmp	.+140    	; 0x425a <process_tapping+0x30e>
            if (event.pressed) {
    41ce:	66 23       	and	r22, r22
    41d0:	09 f4       	brne	.+2      	; 0x41d4 <process_tapping+0x288>
    41d2:	3f c0       	rjmp	.+126    	; 0x4252 <process_tapping+0x306>
                if (IS_TAPPING_KEY(event.key)) {
    41d4:	e5 13       	cpse	r30, r21
    41d6:	30 c0       	rjmp	.+96     	; 0x4238 <process_tapping+0x2ec>
    41d8:	74 13       	cpse	r23, r20
    41da:	2e c0       	rjmp	.+92     	; 0x4238 <process_tapping+0x2ec>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    41dc:	20 91 b7 01 	lds	r18, 0x01B7
    41e0:	20 fd       	sbrc	r18, 0
    41e2:	21 c0       	rjmp	.+66     	; 0x4226 <process_tapping+0x2da>
    41e4:	32 2f       	mov	r19, r18
    41e6:	32 95       	swap	r19
    41e8:	3f 70       	andi	r19, 0x0F	; 15
    41ea:	83 2f       	mov	r24, r19
    41ec:	90 e0       	ldi	r25, 0x00	; 0
    41ee:	00 97       	sbiw	r24, 0x00	; 0
    41f0:	d1 f0       	breq	.+52     	; 0x4226 <process_tapping+0x2da>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    41f2:	d8 01       	movw	r26, r16
    41f4:	15 96       	adiw	r26, 0x05	; 5
    41f6:	2c 93       	st	X, r18
    41f8:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    41fa:	0f 97       	sbiw	r24, 0x0f	; 15
    41fc:	41 f0       	breq	.+16     	; 0x420e <process_tapping+0x2c2>
    41fe:	83 2f       	mov	r24, r19
    4200:	8f 5f       	subi	r24, 0xFF	; 255
    4202:	82 95       	swap	r24
    4204:	80 7f       	andi	r24, 0xF0	; 240
    4206:	2f 70       	andi	r18, 0x0F	; 15
    4208:	28 2b       	or	r18, r24
    420a:	15 96       	adiw	r26, 0x05	; 5
    420c:	2c 93       	st	X, r18
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    420e:	c8 01       	movw	r24, r16
    4210:	0e 94 ef 1a 	call	0x35de	; 0x35de <process_action>
                        tapping_key = *keyp;
    4214:	86 e0       	ldi	r24, 0x06	; 6
    4216:	f8 01       	movw	r30, r16
    4218:	a2 eb       	ldi	r26, 0xB2	; 178
    421a:	b1 e0       	ldi	r27, 0x01	; 1
    421c:	01 90       	ld	r0, Z+
    421e:	0d 92       	st	X+, r0
    4220:	8a 95       	dec	r24
    4222:	e1 f7       	brne	.-8      	; 0x421c <process_tapping+0x2d0>
    4224:	3e c0       	rjmp	.+124    	; 0x42a2 <process_tapping+0x356>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    4226:	86 e0       	ldi	r24, 0x06	; 6
    4228:	f8 01       	movw	r30, r16
    422a:	a2 eb       	ldi	r26, 0xB2	; 178
    422c:	b1 e0       	ldi	r27, 0x01	; 1
    422e:	01 90       	ld	r0, Z+
    4230:	0d 92       	st	X+, r0
    4232:	8a 95       	dec	r24
    4234:	e1 f7       	brne	.-8      	; 0x422e <process_tapping+0x2e2>
    4236:	37 c0       	rjmp	.+110    	; 0x42a6 <process_tapping+0x35a>
                        return true;
                    }
                } else if (is_tap_key(event.key)) {
    4238:	4d 87       	std	Y+13, r20	; 0x0d
    423a:	5e 87       	std	Y+14, r21	; 0x0e
    423c:	8d 85       	ldd	r24, Y+13	; 0x0d
    423e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4240:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <is_tap_key>
    4244:	81 11       	cpse	r24, r1
    4246:	23 c0       	rjmp	.+70     	; 0x428e <process_tapping+0x342>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    4248:	80 91 b7 01 	lds	r24, 0x01B7
    424c:	81 60       	ori	r24, 0x01	; 1
    424e:	80 93 b7 01 	sts	0x01B7, r24
                    process_action(keyp);
    4252:	c8 01       	movw	r24, r16
    4254:	0e 94 ef 1a 	call	0x35de	; 0x35de <process_action>
    4258:	26 c0       	rjmp	.+76     	; 0x42a6 <process_tapping+0x35a>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    425a:	7e 2d       	mov	r23, r14
    425c:	f9 8a       	std	Y+17, r15	; 0x11
    425e:	e8 8a       	std	Y+16, r14	; 0x10
    4260:	89 89       	ldd	r24, Y+17	; 0x11
    4262:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <debug_event>
            tapping_key = (keyrecord_t){};
    4266:	e2 eb       	ldi	r30, 0xB2	; 178
    4268:	f1 e0       	ldi	r31, 0x01	; 1
    426a:	86 e0       	ldi	r24, 0x06	; 6
    426c:	df 01       	movw	r26, r30
    426e:	1d 92       	st	X+, r1
    4270:	8a 95       	dec	r24
    4272:	e9 f7       	brne	.-6      	; 0x426e <process_tapping+0x322>
            debug_tapping_key();
    4274:	0e 94 20 1f 	call	0x3e40	; 0x3e40 <debug_tapping_key>
    4278:	18 c0       	rjmp	.+48     	; 0x42aa <process_tapping+0x35e>
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    427a:	66 23       	and	r22, r22
    427c:	51 f3       	breq	.-44     	; 0x4252 <process_tapping+0x306>
    427e:	4d 87       	std	Y+13, r20	; 0x0d
    4280:	5e 87       	std	Y+14, r21	; 0x0e
    4282:	8d 85       	ldd	r24, Y+13	; 0x0d
    4284:	9e 85       	ldd	r25, Y+14	; 0x0e
    4286:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <is_tap_key>
    428a:	88 23       	and	r24, r24
    428c:	11 f3       	breq	.-60     	; 0x4252 <process_tapping+0x306>
            debug("Tapping: Start(Press tap key).\n");
            tapping_key = *keyp;
    428e:	86 e0       	ldi	r24, 0x06	; 6
    4290:	f8 01       	movw	r30, r16
    4292:	a2 eb       	ldi	r26, 0xB2	; 178
    4294:	b1 e0       	ldi	r27, 0x01	; 1
    4296:	01 90       	ld	r0, Z+
    4298:	0d 92       	st	X+, r0
    429a:	8a 95       	dec	r24
    429c:	e1 f7       	brne	.-8      	; 0x4296 <process_tapping+0x34a>
            waiting_buffer_scan_tap();
    429e:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <waiting_buffer_scan_tap>
            debug_tapping_key();
    42a2:	0e 94 20 1f 	call	0x3e40	; 0x3e40 <debug_tapping_key>
            return true;
    42a6:	81 e0       	ldi	r24, 0x01	; 1
    42a8:	14 c0       	rjmp	.+40     	; 0x42d2 <process_tapping+0x386>
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
                        tapping_key.tap.interrupted = true;
                    }
                    // enqueue 
                    return false;
    42aa:	80 e0       	ldi	r24, 0x00	; 0
    42ac:	12 c0       	rjmp	.+36     	; 0x42d2 <process_tapping+0x386>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    42ae:	4d 87       	std	Y+13, r20	; 0x0d
    42b0:	5e 87       	std	Y+14, r21	; 0x0e
    42b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    42b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    42b6:	0e 94 9a 23 	call	0x4734	; 0x4734 <layer_switch_get_action>
                    switch (action.kind.id) {
    42ba:	29 2f       	mov	r18, r25
    42bc:	22 95       	swap	r18
    42be:	2f 70       	andi	r18, 0x0F	; 15
    42c0:	30 e0       	ldi	r19, 0x00	; 0
    42c2:	22 30       	cpi	r18, 0x02	; 2
    42c4:	31 05       	cpc	r19, r1
    42c6:	0c f4       	brge	.+2      	; 0x42ca <process_tapping+0x37e>
    42c8:	e0 ce       	rjmp	.-576    	; 0x408a <process_tapping+0x13e>
    42ca:	24 30       	cpi	r18, 0x04	; 4
    42cc:	31 05       	cpc	r19, r1
    42ce:	0c f6       	brge	.-126    	; 0x4252 <process_tapping+0x306>
    42d0:	e2 ce       	rjmp	.-572    	; 0x4096 <process_tapping+0x14a>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    42d2:	62 96       	adiw	r28, 0x12	; 18
    42d4:	0f b6       	in	r0, 0x3f	; 63
    42d6:	f8 94       	cli
    42d8:	de bf       	out	0x3e, r29	; 62
    42da:	0f be       	out	0x3f, r0	; 63
    42dc:	cd bf       	out	0x3d, r28	; 61
    42de:	df 91       	pop	r29
    42e0:	cf 91       	pop	r28
    42e2:	1f 91       	pop	r17
    42e4:	0f 91       	pop	r16
    42e6:	ff 90       	pop	r15
    42e8:	ef 90       	pop	r14
    42ea:	08 95       	ret

000042ec <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    42ec:	1f 93       	push	r17
    42ee:	cf 93       	push	r28
    42f0:	df 93       	push	r29
    42f2:	cd b7       	in	r28, 0x3d	; 61
    42f4:	de b7       	in	r29, 0x3e	; 62
    42f6:	2c 97       	sbiw	r28, 0x0c	; 12
    42f8:	0f b6       	in	r0, 0x3f	; 63
    42fa:	f8 94       	cli
    42fc:	de bf       	out	0x3e, r29	; 62
    42fe:	0f be       	out	0x3f, r0	; 63
    4300:	cd bf       	out	0x3d, r28	; 61
    4302:	4f 83       	std	Y+7, r20	; 0x07
    4304:	58 87       	std	Y+8, r21	; 0x08
    4306:	69 87       	std	Y+9, r22	; 0x09
    4308:	7a 87       	std	Y+10, r23	; 0x0a
    430a:	8b 87       	std	Y+11, r24	; 0x0b
    430c:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    430e:	ce 01       	movw	r24, r28
    4310:	07 96       	adiw	r24, 0x07	; 7
    4312:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <process_tapping>
    4316:	88 23       	and	r24, r24
    4318:	d9 f0       	breq	.+54     	; 0x4350 <action_tapping_process+0x64>
        if (!IS_NOEVENT(record.event)) {
    431a:	2f 81       	ldd	r18, Y+7	; 0x07
    431c:	38 85       	ldd	r19, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    431e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4320:	9b 85       	ldd	r25, Y+11	; 0x0b
    4322:	89 2b       	or	r24, r25
    4324:	39 f0       	breq	.+14     	; 0x4334 <action_tapping_process+0x48>
    4326:	3f 3f       	cpi	r19, 0xFF	; 255
    4328:	19 f0       	breq	.+6      	; 0x4330 <action_tapping_process+0x44>
    432a:	80 e0       	ldi	r24, 0x00	; 0
    432c:	90 e0       	ldi	r25, 0x00	; 0
    432e:	04 c0       	rjmp	.+8      	; 0x4338 <action_tapping_process+0x4c>
    4330:	2f 3f       	cpi	r18, 0xFF	; 255
    4332:	d9 f7       	brne	.-10     	; 0x432a <action_tapping_process+0x3e>
    4334:	81 e0       	ldi	r24, 0x01	; 1
    4336:	90 e0       	ldi	r25, 0x00	; 0
    4338:	89 2b       	or	r24, r25
    433a:	09 f0       	breq	.+2      	; 0x433e <action_tapping_process+0x52>
    433c:	6d c0       	rjmp	.+218    	; 0x4418 <action_tapping_process+0x12c>
            debug("processed: "); debug_record(record); debug("\n");
    433e:	4f 81       	ldd	r20, Y+7	; 0x07
    4340:	58 85       	ldd	r21, Y+8	; 0x08
    4342:	69 85       	ldd	r22, Y+9	; 0x09
    4344:	7a 85       	ldd	r23, Y+10	; 0x0a
    4346:	8b 85       	ldd	r24, Y+11	; 0x0b
    4348:	9c 85       	ldd	r25, Y+12	; 0x0c
    434a:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <debug_record>
    434e:	64 c0       	rjmp	.+200    	; 0x4418 <action_tapping_process+0x12c>
    4350:	86 e0       	ldi	r24, 0x06	; 6
    4352:	fe 01       	movw	r30, r28
    4354:	37 96       	adiw	r30, 0x07	; 7
    4356:	de 01       	movw	r26, r28
    4358:	11 96       	adiw	r26, 0x01	; 1
    435a:	01 90       	ld	r0, Z+
    435c:	0d 92       	st	X+, r0
    435e:	8a 95       	dec	r24
    4360:	e1 f7       	brne	.-8      	; 0x435a <action_tapping_process+0x6e>
    4362:	ff 81       	ldd	r31, Y+7	; 0x07
    4364:	e8 85       	ldd	r30, Y+8	; 0x08
    4366:	4a 85       	ldd	r20, Y+10	; 0x0a
    4368:	5b 85       	ldd	r21, Y+11	; 0x0b
    436a:	41 15       	cp	r20, r1
    436c:	51 05       	cpc	r21, r1
    436e:	39 f0       	breq	.+14     	; 0x437e <action_tapping_process+0x92>
    4370:	ef 3f       	cpi	r30, 0xFF	; 255
    4372:	41 f4       	brne	.+16     	; 0x4384 <action_tapping_process+0x98>
    4374:	81 e0       	ldi	r24, 0x01	; 1
    4376:	90 e0       	ldi	r25, 0x00	; 0
    4378:	ff 3f       	cpi	r31, 0xFF	; 255
    437a:	31 f0       	breq	.+12     	; 0x4388 <action_tapping_process+0x9c>
    437c:	03 c0       	rjmp	.+6      	; 0x4384 <action_tapping_process+0x98>
    437e:	81 e0       	ldi	r24, 0x01	; 1
    4380:	90 e0       	ldi	r25, 0x00	; 0
    4382:	02 c0       	rjmp	.+4      	; 0x4388 <action_tapping_process+0x9c>
    4384:	80 e0       	ldi	r24, 0x00	; 0
    4386:	90 e0       	ldi	r25, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    4388:	80 fd       	sbrc	r24, 0
    438a:	46 c0       	rjmp	.+140    	; 0x4418 <action_tapping_process+0x12c>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    438c:	20 91 e9 01 	lds	r18, 0x01E9
    4390:	30 e0       	ldi	r19, 0x00	; 0
    4392:	c9 01       	movw	r24, r18
    4394:	01 96       	adiw	r24, 0x01	; 1
    4396:	87 70       	andi	r24, 0x07	; 7
    4398:	99 27       	eor	r25, r25
    439a:	60 91 e8 01 	lds	r22, 0x01E8
    439e:	70 e0       	ldi	r23, 0x00	; 0
    43a0:	86 17       	cp	r24, r22
    43a2:	97 07       	cpc	r25, r23
    43a4:	09 f4       	brne	.+2      	; 0x43a8 <action_tapping_process+0xbc>
    43a6:	40 c0       	rjmp	.+128    	; 0x4428 <action_tapping_process+0x13c>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    43a8:	f9 83       	std	Y+1, r31	; 0x01
    43aa:	ea 83       	std	Y+2, r30	; 0x02
    43ac:	5d 83       	std	Y+5, r21	; 0x05
    43ae:	4c 83       	std	Y+4, r20	; 0x04
    43b0:	96 e0       	ldi	r25, 0x06	; 6
    43b2:	92 9f       	mul	r25, r18
    43b4:	d0 01       	movw	r26, r0
    43b6:	93 9f       	mul	r25, r19
    43b8:	b0 0d       	add	r27, r0
    43ba:	11 24       	eor	r1, r1
    43bc:	a8 54       	subi	r26, 0x48	; 72
    43be:	be 4f       	sbci	r27, 0xFE	; 254
    43c0:	fe 01       	movw	r30, r28
    43c2:	31 96       	adiw	r30, 0x01	; 1
    43c4:	01 90       	ld	r0, Z+
    43c6:	0d 92       	st	X+, r0
    43c8:	9a 95       	dec	r25
    43ca:	e1 f7       	brne	.-8      	; 0x43c4 <action_tapping_process+0xd8>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    43cc:	80 93 e9 01 	sts	0x01E9, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    43d0:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <debug_waiting_buffer>
    43d4:	21 c0       	rjmp	.+66     	; 0x4418 <action_tapping_process+0x12c>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    43d6:	18 9f       	mul	r17, r24
    43d8:	c0 01       	movw	r24, r0
    43da:	11 24       	eor	r1, r1
    43dc:	88 54       	subi	r24, 0x48	; 72
    43de:	9e 4f       	sbci	r25, 0xFE	; 254
    43e0:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <process_tapping>
    43e4:	88 23       	and	r24, r24
    43e6:	71 f1       	breq	.+92     	; 0x4444 <action_tapping_process+0x158>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    43e8:	e0 91 e8 01 	lds	r30, 0x01E8
    43ec:	1e 9f       	mul	r17, r30
    43ee:	f0 01       	movw	r30, r0
    43f0:	11 24       	eor	r1, r1
    43f2:	e8 54       	subi	r30, 0x48	; 72
    43f4:	fe 4f       	sbci	r31, 0xFE	; 254
    43f6:	40 81       	ld	r20, Z
    43f8:	51 81       	ldd	r21, Z+1	; 0x01
    43fa:	62 81       	ldd	r22, Z+2	; 0x02
    43fc:	73 81       	ldd	r23, Z+3	; 0x03
    43fe:	84 81       	ldd	r24, Z+4	; 0x04
    4400:	95 81       	ldd	r25, Z+5	; 0x05
    4402:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    4406:	80 91 e8 01 	lds	r24, 0x01E8
    440a:	90 e0       	ldi	r25, 0x00	; 0
    440c:	01 96       	adiw	r24, 0x01	; 1
    440e:	87 70       	andi	r24, 0x07	; 7
    4410:	99 27       	eor	r25, r25
    4412:	80 93 e8 01 	sts	0x01E8, r24
    4416:	01 c0       	rjmp	.+2      	; 0x441a <action_tapping_process+0x12e>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    4418:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    441a:	80 91 e8 01 	lds	r24, 0x01E8
    441e:	90 91 e9 01 	lds	r25, 0x01E9
    4422:	89 13       	cpse	r24, r25
    4424:	d8 cf       	rjmp	.-80     	; 0x43d6 <action_tapping_process+0xea>
    4426:	0e c0       	rjmp	.+28     	; 0x4444 <action_tapping_process+0x158>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    4428:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    442c:	10 92 e9 01 	sts	0x01E9, r1
    waiting_buffer_tail = 0;
    4430:	10 92 e8 01 	sts	0x01E8, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    4434:	e2 eb       	ldi	r30, 0xB2	; 178
    4436:	f1 e0       	ldi	r31, 0x01	; 1
    4438:	86 e0       	ldi	r24, 0x06	; 6
    443a:	df 01       	movw	r26, r30
    443c:	1d 92       	st	X+, r1
    443e:	8a 95       	dec	r24
    4440:	e9 f7       	brne	.-6      	; 0x443c <action_tapping_process+0x150>
    4442:	ea cf       	rjmp	.-44     	; 0x4418 <action_tapping_process+0x12c>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    4444:	2c 96       	adiw	r28, 0x0c	; 12
    4446:	0f b6       	in	r0, 0x3f	; 63
    4448:	f8 94       	cli
    444a:	de bf       	out	0x3e, r29	; 62
    444c:	0f be       	out	0x3f, r0	; 63
    444e:	cd bf       	out	0x3d, r28	; 61
    4450:	df 91       	pop	r29
    4452:	cf 91       	pop	r28
    4454:	1f 91       	pop	r17
    4456:	08 95       	ret

00004458 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    4458:	df 92       	push	r13
    445a:	ef 92       	push	r14
    445c:	ff 92       	push	r15
    445e:	0f 93       	push	r16
    4460:	1f 93       	push	r17
    4462:	cf 93       	push	r28
    4464:	df 93       	push	r29
    4466:	ec 01       	movw	r28, r24
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    4468:	00 97       	sbiw	r24, 0x00	; 0
    446a:	09 f4       	brne	.+2      	; 0x446e <action_macro_play+0x16>
    446c:	6e c0       	rjmp	.+220    	; 0x454a <action_macro_play+0xf2>
    446e:	d1 2c       	mov	r13, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    4470:	ee 24       	eor	r14, r14
    4472:	e3 94       	inc	r14
    4474:	f1 2c       	mov	r15, r1
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    4476:	8e 01       	movw	r16, r28
    4478:	0f 5f       	subi	r16, 0xFF	; 255
    447a:	1f 4f       	sbci	r17, 0xFF	; 255
    447c:	fe 01       	movw	r30, r28
    447e:	84 91       	lpm	r24, Z
    4480:	84 37       	cpi	r24, 0x74	; 116
    4482:	48 f4       	brcc	.+18     	; 0x4496 <action_macro_play+0x3e>
    4484:	84 30       	cpi	r24, 0x04	; 4
    4486:	08 f0       	brcs	.+2      	; 0x448a <action_macro_play+0x32>
    4488:	4c c0       	rjmp	.+152    	; 0x4522 <action_macro_play+0xca>
    448a:	81 30       	cpi	r24, 0x01	; 1
    448c:	71 f0       	breq	.+28     	; 0x44aa <action_macro_play+0x52>
    448e:	82 30       	cpi	r24, 0x02	; 2
    4490:	09 f0       	breq	.+2      	; 0x4494 <action_macro_play+0x3c>
    4492:	5b c0       	rjmp	.+182    	; 0x454a <action_macro_play+0xf2>
    4494:	1e c0       	rjmp	.+60     	; 0x44d2 <action_macro_play+0x7a>
    4496:	85 37       	cpi	r24, 0x75	; 117
    4498:	09 f4       	brne	.+2      	; 0x449c <action_macro_play+0x44>
    449a:	3f c0       	rjmp	.+126    	; 0x451a <action_macro_play+0xc2>
    449c:	80 f1       	brcs	.+96     	; 0x44fe <action_macro_play+0xa6>
    449e:	98 2f       	mov	r25, r24
    44a0:	94 58       	subi	r25, 0x84	; 132
    44a2:	90 37       	cpi	r25, 0x70	; 112
    44a4:	08 f0       	brcs	.+2      	; 0x44a8 <action_macro_play+0x50>
    44a6:	51 c0       	rjmp	.+162    	; 0x454a <action_macro_play+0xf2>
    44a8:	3f c0       	rjmp	.+126    	; 0x4528 <action_macro_play+0xd0>
            case KEY_DOWN:
                MACRO_READ();
    44aa:	22 96       	adiw	r28, 0x02	; 2
    44ac:	f8 01       	movw	r30, r16
    44ae:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    44b0:	98 2f       	mov	r25, r24
    44b2:	90 5e       	subi	r25, 0xE0	; 224
    44b4:	98 30       	cpi	r25, 0x08	; 8
    44b6:	50 f4       	brcc	.+20     	; 0x44cc <action_macro_play+0x74>
                    add_weak_mods(MOD_BIT(macro));
    44b8:	87 70       	andi	r24, 0x07	; 7
    44ba:	fe 2d       	mov	r31, r14
    44bc:	01 c0       	rjmp	.+2      	; 0x44c0 <action_macro_play+0x68>
    44be:	ff 0f       	add	r31, r31
    44c0:	8a 95       	dec	r24
    44c2:	ea f7       	brpl	.-6      	; 0x44be <action_macro_play+0x66>
    44c4:	8f 2f       	mov	r24, r31
    44c6:	0e 94 72 24 	call	0x48e4	; 0x48e4 <add_weak_mods>
    44ca:	13 c0       	rjmp	.+38     	; 0x44f2 <action_macro_play+0x9a>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    44cc:	0e 94 c8 19 	call	0x3390	; 0x3390 <register_code>
    44d0:	2f c0       	rjmp	.+94     	; 0x4530 <action_macro_play+0xd8>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    44d2:	22 96       	adiw	r28, 0x02	; 2
    44d4:	f8 01       	movw	r30, r16
    44d6:	84 91       	lpm	r24, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    44d8:	98 2f       	mov	r25, r24
    44da:	90 5e       	subi	r25, 0xE0	; 224
    44dc:	98 30       	cpi	r25, 0x08	; 8
    44de:	60 f4       	brcc	.+24     	; 0x44f8 <action_macro_play+0xa0>
                    del_weak_mods(MOD_BIT(macro));
    44e0:	87 70       	andi	r24, 0x07	; 7
    44e2:	fe 2d       	mov	r31, r14
    44e4:	01 c0       	rjmp	.+2      	; 0x44e8 <action_macro_play+0x90>
    44e6:	ff 0f       	add	r31, r31
    44e8:	8a 95       	dec	r24
    44ea:	ea f7       	brpl	.-6      	; 0x44e6 <action_macro_play+0x8e>
    44ec:	8f 2f       	mov	r24, r31
    44ee:	0e 94 78 24 	call	0x48f0	; 0x48f0 <del_weak_mods>
                    send_keyboard_report();
    44f2:	0e 94 9b 24 	call	0x4936	; 0x4936 <send_keyboard_report>
    44f6:	1c c0       	rjmp	.+56     	; 0x4530 <action_macro_play+0xd8>
                } else {
                    unregister_code(macro);
    44f8:	0e 94 90 1a 	call	0x3520	; 0x3520 <unregister_code>
    44fc:	19 c0       	rjmp	.+50     	; 0x4530 <action_macro_play+0xd8>
                }
                break;
            case WAIT:
                MACRO_READ();
    44fe:	22 96       	adiw	r28, 0x02	; 2
    4500:	f8 01       	movw	r30, r16
    4502:	04 91       	lpm	r16, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    4504:	07 c0       	rjmp	.+14     	; 0x4514 <action_macro_play+0xbc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4506:	8f e9       	ldi	r24, 0x9F	; 159
    4508:	9f e0       	ldi	r25, 0x0F	; 15
    450a:	01 97       	sbiw	r24, 0x01	; 1
    450c:	f1 f7       	brne	.-4      	; 0x450a <action_macro_play+0xb2>
    450e:	00 c0       	rjmp	.+0      	; 0x4510 <action_macro_play+0xb8>
    4510:	00 00       	nop
    4512:	01 50       	subi	r16, 0x01	; 1
    4514:	01 11       	cpse	r16, r1
    4516:	f7 cf       	rjmp	.-18     	; 0x4506 <action_macro_play+0xae>
    4518:	0b c0       	rjmp	.+22     	; 0x4530 <action_macro_play+0xd8>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    451a:	22 96       	adiw	r28, 0x02	; 2
    451c:	f8 01       	movw	r30, r16
    451e:	d4 90       	lpm	r13, Z
                dprintf("INTERVAL(%u)\n", interval);
                break;
    4520:	07 c0       	rjmp	.+14     	; 0x4530 <action_macro_play+0xd8>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    4522:	0e 94 c8 19 	call	0x3390	; 0x3390 <register_code>
    4526:	03 c0       	rjmp	.+6      	; 0x452e <action_macro_play+0xd6>
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    4528:	8f 77       	andi	r24, 0x7F	; 127
    452a:	0e 94 90 1a 	call	0x3520	; 0x3520 <unregister_code>
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    452e:	e8 01       	movw	r28, r16
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    4530:	8d 2d       	mov	r24, r13
    4532:	07 c0       	rjmp	.+14     	; 0x4542 <action_macro_play+0xea>
    4534:	81 50       	subi	r24, 0x01	; 1
    4536:	ef e9       	ldi	r30, 0x9F	; 159
    4538:	ff e0       	ldi	r31, 0x0F	; 15
    453a:	31 97       	sbiw	r30, 0x01	; 1
    453c:	f1 f7       	brne	.-4      	; 0x453a <action_macro_play+0xe2>
    453e:	00 c0       	rjmp	.+0      	; 0x4540 <action_macro_play+0xe8>
    4540:	00 00       	nop
    4542:	88 23       	and	r24, r24
    4544:	09 f4       	brne	.+2      	; 0x4548 <action_macro_play+0xf0>
    4546:	97 cf       	rjmp	.-210    	; 0x4476 <action_macro_play+0x1e>
    4548:	f5 cf       	rjmp	.-22     	; 0x4534 <action_macro_play+0xdc>
    }
}
    454a:	df 91       	pop	r29
    454c:	cf 91       	pop	r28
    454e:	1f 91       	pop	r17
    4550:	0f 91       	pop	r16
    4552:	ff 90       	pop	r15
    4554:	ef 90       	pop	r14
    4556:	df 90       	pop	r13
    4558:	08 95       	ret

0000455a <default_layer_state_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    455a:	60 93 ee 01 	sts	0x01EE, r22
    455e:	70 93 ef 01 	sts	0x01EF, r23
    4562:	80 93 f0 01 	sts	0x01F0, r24
    4566:	90 93 f1 01 	sts	0x01F1, r25
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    456a:	0c 94 a5 1e 	jmp	0x3d4a	; 0x3d4a <clear_keyboard_but_mods>

0000456e <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    456e:	60 93 ea 01 	sts	0x01EA, r22
    4572:	70 93 eb 01 	sts	0x01EB, r23
    4576:	80 93 ec 01 	sts	0x01EC, r24
    457a:	90 93 ed 01 	sts	0x01ED, r25
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    457e:	0c 94 a5 1e 	jmp	0x3d4a	; 0x3d4a <clear_keyboard_but_mods>

00004582 <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    4582:	08 95       	ret

00004584 <default_layer_set>:
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}

void default_layer_set(uint32_t state)
{
    default_layer_state_set(state);
    4584:	0c 94 ad 22 	jmp	0x455a	; 0x455a <default_layer_state_set>

00004588 <default_layer_or>:
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    4588:	0f 93       	push	r16
    458a:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    458c:	00 91 ee 01 	lds	r16, 0x01EE
    4590:	10 91 ef 01 	lds	r17, 0x01EF
    4594:	20 91 f0 01 	lds	r18, 0x01F0
    4598:	30 91 f1 01 	lds	r19, 0x01F1
    459c:	60 2b       	or	r22, r16
    459e:	71 2b       	or	r23, r17
    45a0:	82 2b       	or	r24, r18
    45a2:	93 2b       	or	r25, r19
}
    45a4:	1f 91       	pop	r17
    45a6:	0f 91       	pop	r16
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
    45a8:	0c 94 ad 22 	jmp	0x455a	; 0x455a <default_layer_state_set>

000045ac <default_layer_and>:
}
void default_layer_and(uint32_t state)
{
    45ac:	0f 93       	push	r16
    45ae:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    45b0:	00 91 ee 01 	lds	r16, 0x01EE
    45b4:	10 91 ef 01 	lds	r17, 0x01EF
    45b8:	20 91 f0 01 	lds	r18, 0x01F0
    45bc:	30 91 f1 01 	lds	r19, 0x01F1
    45c0:	60 23       	and	r22, r16
    45c2:	71 23       	and	r23, r17
    45c4:	82 23       	and	r24, r18
    45c6:	93 23       	and	r25, r19
}
    45c8:	1f 91       	pop	r17
    45ca:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
    45cc:	0c 94 ad 22 	jmp	0x455a	; 0x455a <default_layer_state_set>

000045d0 <default_layer_xor>:
}
void default_layer_xor(uint32_t state)
{
    45d0:	0f 93       	push	r16
    45d2:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    45d4:	00 91 ee 01 	lds	r16, 0x01EE
    45d8:	10 91 ef 01 	lds	r17, 0x01EF
    45dc:	20 91 f0 01 	lds	r18, 0x01F0
    45e0:	30 91 f1 01 	lds	r19, 0x01F1
    45e4:	60 27       	eor	r22, r16
    45e6:	71 27       	eor	r23, r17
    45e8:	82 27       	eor	r24, r18
    45ea:	93 27       	eor	r25, r19
}
    45ec:	1f 91       	pop	r17
    45ee:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
    45f0:	0c 94 ad 22 	jmp	0x455a	; 0x455a <default_layer_state_set>

000045f4 <layer_clear>:
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void layer_clear(void)
{
    layer_state_set(0);
    45f4:	60 e0       	ldi	r22, 0x00	; 0
    45f6:	70 e0       	ldi	r23, 0x00	; 0
    45f8:	cb 01       	movw	r24, r22
    45fa:	0c 94 b7 22 	jmp	0x456e	; 0x456e <layer_state_set>

000045fe <layer_move>:
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    45fe:	41 e0       	ldi	r20, 0x01	; 1
    4600:	50 e0       	ldi	r21, 0x00	; 0
    4602:	60 e0       	ldi	r22, 0x00	; 0
    4604:	70 e0       	ldi	r23, 0x00	; 0
    4606:	04 c0       	rjmp	.+8      	; 0x4610 <layer_move+0x12>
    4608:	44 0f       	add	r20, r20
    460a:	55 1f       	adc	r21, r21
    460c:	66 1f       	adc	r22, r22
    460e:	77 1f       	adc	r23, r23
    4610:	8a 95       	dec	r24
    4612:	d2 f7       	brpl	.-12     	; 0x4608 <layer_move+0xa>
    4614:	cb 01       	movw	r24, r22
    4616:	ba 01       	movw	r22, r20
    4618:	0c 94 b7 22 	jmp	0x456e	; 0x456e <layer_state_set>

0000461c <layer_on>:
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    461c:	41 e0       	ldi	r20, 0x01	; 1
    461e:	50 e0       	ldi	r21, 0x00	; 0
    4620:	60 e0       	ldi	r22, 0x00	; 0
    4622:	70 e0       	ldi	r23, 0x00	; 0
    4624:	04 c0       	rjmp	.+8      	; 0x462e <layer_on+0x12>
    4626:	44 0f       	add	r20, r20
    4628:	55 1f       	adc	r21, r21
    462a:	66 1f       	adc	r22, r22
    462c:	77 1f       	adc	r23, r23
    462e:	8a 95       	dec	r24
    4630:	d2 f7       	brpl	.-12     	; 0x4626 <layer_on+0xa>
    4632:	80 91 ea 01 	lds	r24, 0x01EA
    4636:	90 91 eb 01 	lds	r25, 0x01EB
    463a:	a0 91 ec 01 	lds	r26, 0x01EC
    463e:	b0 91 ed 01 	lds	r27, 0x01ED
    4642:	48 2b       	or	r20, r24
    4644:	59 2b       	or	r21, r25
    4646:	6a 2b       	or	r22, r26
    4648:	7b 2b       	or	r23, r27
    464a:	cb 01       	movw	r24, r22
    464c:	ba 01       	movw	r22, r20
    464e:	0c 94 b7 22 	jmp	0x456e	; 0x456e <layer_state_set>

00004652 <layer_off>:
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    4652:	41 e0       	ldi	r20, 0x01	; 1
    4654:	50 e0       	ldi	r21, 0x00	; 0
    4656:	60 e0       	ldi	r22, 0x00	; 0
    4658:	70 e0       	ldi	r23, 0x00	; 0
    465a:	04 c0       	rjmp	.+8      	; 0x4664 <layer_off+0x12>
    465c:	44 0f       	add	r20, r20
    465e:	55 1f       	adc	r21, r21
    4660:	66 1f       	adc	r22, r22
    4662:	77 1f       	adc	r23, r23
    4664:	8a 95       	dec	r24
    4666:	d2 f7       	brpl	.-12     	; 0x465c <layer_off+0xa>
    4668:	40 95       	com	r20
    466a:	50 95       	com	r21
    466c:	60 95       	com	r22
    466e:	70 95       	com	r23
    4670:	80 91 ea 01 	lds	r24, 0x01EA
    4674:	90 91 eb 01 	lds	r25, 0x01EB
    4678:	a0 91 ec 01 	lds	r26, 0x01EC
    467c:	b0 91 ed 01 	lds	r27, 0x01ED
    4680:	48 23       	and	r20, r24
    4682:	59 23       	and	r21, r25
    4684:	6a 23       	and	r22, r26
    4686:	7b 23       	and	r23, r27
    4688:	cb 01       	movw	r24, r22
    468a:	ba 01       	movw	r22, r20
    468c:	0c 94 b7 22 	jmp	0x456e	; 0x456e <layer_state_set>

00004690 <layer_invert>:
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    4690:	41 e0       	ldi	r20, 0x01	; 1
    4692:	50 e0       	ldi	r21, 0x00	; 0
    4694:	60 e0       	ldi	r22, 0x00	; 0
    4696:	70 e0       	ldi	r23, 0x00	; 0
    4698:	04 c0       	rjmp	.+8      	; 0x46a2 <layer_invert+0x12>
    469a:	44 0f       	add	r20, r20
    469c:	55 1f       	adc	r21, r21
    469e:	66 1f       	adc	r22, r22
    46a0:	77 1f       	adc	r23, r23
    46a2:	8a 95       	dec	r24
    46a4:	d2 f7       	brpl	.-12     	; 0x469a <layer_invert+0xa>
    46a6:	80 91 ea 01 	lds	r24, 0x01EA
    46aa:	90 91 eb 01 	lds	r25, 0x01EB
    46ae:	a0 91 ec 01 	lds	r26, 0x01EC
    46b2:	b0 91 ed 01 	lds	r27, 0x01ED
    46b6:	48 27       	eor	r20, r24
    46b8:	59 27       	eor	r21, r25
    46ba:	6a 27       	eor	r22, r26
    46bc:	7b 27       	eor	r23, r27
    46be:	cb 01       	movw	r24, r22
    46c0:	ba 01       	movw	r22, r20
    46c2:	0c 94 b7 22 	jmp	0x456e	; 0x456e <layer_state_set>

000046c6 <layer_or>:
}

void layer_or(uint32_t state)
{
    46c6:	0f 93       	push	r16
    46c8:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    46ca:	00 91 ea 01 	lds	r16, 0x01EA
    46ce:	10 91 eb 01 	lds	r17, 0x01EB
    46d2:	20 91 ec 01 	lds	r18, 0x01EC
    46d6:	30 91 ed 01 	lds	r19, 0x01ED
    46da:	60 2b       	or	r22, r16
    46dc:	71 2b       	or	r23, r17
    46de:	82 2b       	or	r24, r18
    46e0:	93 2b       	or	r25, r19
}
    46e2:	1f 91       	pop	r17
    46e4:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
    46e6:	0c 94 b7 22 	jmp	0x456e	; 0x456e <layer_state_set>

000046ea <layer_and>:
}
void layer_and(uint32_t state)
{
    46ea:	0f 93       	push	r16
    46ec:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    46ee:	00 91 ea 01 	lds	r16, 0x01EA
    46f2:	10 91 eb 01 	lds	r17, 0x01EB
    46f6:	20 91 ec 01 	lds	r18, 0x01EC
    46fa:	30 91 ed 01 	lds	r19, 0x01ED
    46fe:	60 23       	and	r22, r16
    4700:	71 23       	and	r23, r17
    4702:	82 23       	and	r24, r18
    4704:	93 23       	and	r25, r19
}
    4706:	1f 91       	pop	r17
    4708:	0f 91       	pop	r16
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
    470a:	0c 94 b7 22 	jmp	0x456e	; 0x456e <layer_state_set>

0000470e <layer_xor>:
}
void layer_xor(uint32_t state)
{
    470e:	0f 93       	push	r16
    4710:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    4712:	00 91 ea 01 	lds	r16, 0x01EA
    4716:	10 91 eb 01 	lds	r17, 0x01EB
    471a:	20 91 ec 01 	lds	r18, 0x01EC
    471e:	30 91 ed 01 	lds	r19, 0x01ED
    4722:	60 27       	eor	r22, r16
    4724:	71 27       	eor	r23, r17
    4726:	82 27       	eor	r24, r18
    4728:	93 27       	eor	r25, r19
}
    472a:	1f 91       	pop	r17
    472c:	0f 91       	pop	r16
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
    472e:	0c 94 b7 22 	jmp	0x456e	; 0x456e <layer_state_set>

00004732 <layer_debug>:
}

void layer_debug(void)
{
    4732:	08 95       	ret

00004734 <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    4734:	cf 92       	push	r12
    4736:	df 92       	push	r13
    4738:	ef 92       	push	r14
    473a:	ff 92       	push	r15
    473c:	0f 93       	push	r16
    473e:	1f 93       	push	r17
    4740:	cf 93       	push	r28
    4742:	df 93       	push	r29
    4744:	ec 01       	movw	r28, r24
    action_t action;
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    4746:	c0 90 ee 01 	lds	r12, 0x01EE
    474a:	d0 90 ef 01 	lds	r13, 0x01EF
    474e:	e0 90 f0 01 	lds	r14, 0x01F0
    4752:	f0 90 f1 01 	lds	r15, 0x01F1
    4756:	80 91 ea 01 	lds	r24, 0x01EA
    475a:	90 91 eb 01 	lds	r25, 0x01EB
    475e:	a0 91 ec 01 	lds	r26, 0x01EC
    4762:	b0 91 ed 01 	lds	r27, 0x01ED
    4766:	c8 2a       	or	r12, r24
    4768:	d9 2a       	or	r13, r25
    476a:	ea 2a       	or	r14, r26
    476c:	fb 2a       	or	r15, r27
    476e:	0f e1       	ldi	r16, 0x1F	; 31
    4770:	10 e0       	ldi	r17, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    4772:	b7 01       	movw	r22, r14
    4774:	a6 01       	movw	r20, r12
    4776:	00 2e       	mov	r0, r16
    4778:	04 c0       	rjmp	.+8      	; 0x4782 <layer_switch_get_action+0x4e>
    477a:	76 95       	lsr	r23
    477c:	67 95       	ror	r22
    477e:	57 95       	ror	r21
    4780:	47 95       	ror	r20
    4782:	0a 94       	dec	r0
    4784:	d2 f7       	brpl	.-12     	; 0x477a <layer_switch_get_action+0x46>
    4786:	40 ff       	sbrs	r20, 0
    4788:	08 c0       	rjmp	.+16     	; 0x479a <layer_switch_get_action+0x66>
            action = action_for_key(i, key);
    478a:	be 01       	movw	r22, r28
    478c:	80 2f       	mov	r24, r16
    478e:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    4792:	81 30       	cpi	r24, 0x01	; 1
    4794:	91 05       	cpc	r25, r1
    4796:	09 f0       	breq	.+2      	; 0x479a <layer_switch_get_action+0x66>
    4798:	07 c0       	rjmp	.+14     	; 0x47a8 <layer_switch_get_action+0x74>
    479a:	01 50       	subi	r16, 0x01	; 1
    479c:	11 09       	sbc	r17, r1
    479e:	48 f7       	brcc	.-46     	; 0x4772 <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    47a0:	be 01       	movw	r22, r28
    47a2:	80 e0       	ldi	r24, 0x00	; 0
    47a4:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    47a8:	df 91       	pop	r29
    47aa:	cf 91       	pop	r28
    47ac:	1f 91       	pop	r17
    47ae:	0f 91       	pop	r16
    47b0:	ff 90       	pop	r15
    47b2:	ef 90       	pop	r14
    47b4:	df 90       	pop	r13
    47b6:	cf 90       	pop	r12
    47b8:	08 95       	ret

000047ba <add_key>:

/* key */
void add_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    47ba:	90 91 0d 01 	lds	r25, 0x010D
    47be:	99 23       	and	r25, r25
    47c0:	d9 f0       	breq	.+54     	; 0x47f8 <add_key+0x3e>
    47c2:	90 91 0e 01 	lds	r25, 0x010E
    47c6:	99 23       	and	r25, r25
    47c8:	b9 f0       	breq	.+46     	; 0x47f8 <add_key+0x3e>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    47ca:	98 2f       	mov	r25, r24
    47cc:	96 95       	lsr	r25
    47ce:	96 95       	lsr	r25
    47d0:	96 95       	lsr	r25
    47d2:	9f 30       	cpi	r25, 0x0F	; 15
    47d4:	90 f5       	brcc	.+100    	; 0x483a <add_key+0x80>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    47d6:	e0 91 0f 01 	lds	r30, 0x010F
    47da:	f0 91 10 01 	lds	r31, 0x0110
    47de:	e9 0f       	add	r30, r25
    47e0:	f1 1d       	adc	r31, r1
    47e2:	87 70       	andi	r24, 0x07	; 7
    47e4:	21 e0       	ldi	r18, 0x01	; 1
    47e6:	30 e0       	ldi	r19, 0x00	; 0
    47e8:	01 c0       	rjmp	.+2      	; 0x47ec <add_key+0x32>
    47ea:	22 0f       	add	r18, r18
    47ec:	8a 95       	dec	r24
    47ee:	ea f7       	brpl	.-6      	; 0x47ea <add_key+0x30>
    47f0:	81 81       	ldd	r24, Z+1	; 0x01
    47f2:	82 2b       	or	r24, r18
    47f4:	81 83       	std	Z+1, r24	; 0x01
    47f6:	08 95       	ret
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    47f8:	40 91 0f 01 	lds	r20, 0x010F
    47fc:	50 91 10 01 	lds	r21, 0x0110
    4800:	20 e0       	ldi	r18, 0x00	; 0
    4802:	30 e0       	ldi	r19, 0x00	; 0
    4804:	9f ef       	ldi	r25, 0xFF	; 255
#endif
    host_keyboard_send(keyboard_report);
}

/* key */
void add_key(uint8_t key)
    4806:	fa 01       	movw	r30, r20
    4808:	e2 0f       	add	r30, r18
    480a:	f3 1f       	adc	r31, r19
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    480c:	62 81       	ldd	r22, Z+2	; 0x02
    480e:	68 17       	cp	r22, r24
    4810:	a1 f0       	breq	.+40     	; 0x483a <add_key+0x80>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    4812:	9f 3f       	cpi	r25, 0xFF	; 255
    4814:	19 f4       	brne	.+6      	; 0x481c <add_key+0x62>
    4816:	61 11       	cpse	r22, r1
    4818:	01 c0       	rjmp	.+2      	; 0x481c <add_key+0x62>
    481a:	92 2f       	mov	r25, r18
    481c:	2f 5f       	subi	r18, 0xFF	; 255
    481e:	3f 4f       	sbci	r19, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    4820:	2e 30       	cpi	r18, 0x0E	; 14
    4822:	31 05       	cpc	r19, r1
    4824:	81 f7       	brne	.-32     	; 0x4806 <add_key+0x4c>
    4826:	07 c0       	rjmp	.+14     	; 0x4836 <add_key+0x7c>
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
            keyboard_report->keys[empty] = code;
    4828:	fa 01       	movw	r30, r20
    482a:	e9 0f       	add	r30, r25
    482c:	f1 1d       	adc	r31, r1
    482e:	97 fd       	sbrc	r25, 7
    4830:	fa 95       	dec	r31
    4832:	82 83       	std	Z+2, r24	; 0x02
    4834:	08 95       	ret
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    4836:	9f 3f       	cpi	r25, 0xFF	; 255
    4838:	b9 f7       	brne	.-18     	; 0x4828 <add_key+0x6e>
    483a:	08 95       	ret

0000483c <del_key>:
}

void del_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    483c:	90 91 0d 01 	lds	r25, 0x010D
    4840:	99 23       	and	r25, r25
    4842:	e1 f0       	breq	.+56     	; 0x487c <del_key+0x40>
    4844:	90 91 0e 01 	lds	r25, 0x010E
    4848:	99 23       	and	r25, r25
    484a:	c1 f0       	breq	.+48     	; 0x487c <del_key+0x40>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    484c:	98 2f       	mov	r25, r24
    484e:	96 95       	lsr	r25
    4850:	96 95       	lsr	r25
    4852:	96 95       	lsr	r25
    4854:	9f 30       	cpi	r25, 0x0F	; 15
    4856:	20 f5       	brcc	.+72     	; 0x48a0 <del_key+0x64>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    4858:	e0 91 0f 01 	lds	r30, 0x010F
    485c:	f0 91 10 01 	lds	r31, 0x0110
    4860:	e9 0f       	add	r30, r25
    4862:	f1 1d       	adc	r31, r1
    4864:	87 70       	andi	r24, 0x07	; 7
    4866:	21 e0       	ldi	r18, 0x01	; 1
    4868:	30 e0       	ldi	r19, 0x00	; 0
    486a:	01 c0       	rjmp	.+2      	; 0x486e <del_key+0x32>
    486c:	22 0f       	add	r18, r18
    486e:	8a 95       	dec	r24
    4870:	ea f7       	brpl	.-6      	; 0x486c <del_key+0x30>
    4872:	20 95       	com	r18
    4874:	81 81       	ldd	r24, Z+1	; 0x01
    4876:	28 23       	and	r18, r24
    4878:	21 83       	std	Z+1, r18	; 0x01
    487a:	08 95       	ret
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    487c:	40 91 0f 01 	lds	r20, 0x010F
    4880:	50 91 10 01 	lds	r21, 0x0110
    4884:	20 e0       	ldi	r18, 0x00	; 0
    4886:	30 e0       	ldi	r19, 0x00	; 0
    }
#endif
    add_key_byte(key);
}

void del_key(uint8_t key)
    4888:	fa 01       	movw	r30, r20
    488a:	e2 0f       	add	r30, r18
    488c:	f3 1f       	adc	r31, r19
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    488e:	92 81       	ldd	r25, Z+2	; 0x02
    4890:	98 13       	cpse	r25, r24
    4892:	01 c0       	rjmp	.+2      	; 0x4896 <del_key+0x5a>
            keyboard_report->keys[i] = 0;
    4894:	12 82       	std	Z+2, r1	; 0x02
    4896:	2f 5f       	subi	r18, 0xFF	; 255
    4898:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    489a:	2e 30       	cpi	r18, 0x0E	; 14
    489c:	31 05       	cpc	r19, r1
    489e:	a1 f7       	brne	.-24     	; 0x4888 <del_key+0x4c>
    48a0:	08 95       	ret

000048a2 <clear_keys>:
#endif
    del_key_byte(key);
}

void clear_keys(void)
{
    48a2:	81 e0       	ldi	r24, 0x01	; 1
    48a4:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    48a6:	e0 91 0f 01 	lds	r30, 0x010F
    48aa:	f0 91 10 01 	lds	r31, 0x0110
    48ae:	e8 0f       	add	r30, r24
    48b0:	f9 1f       	adc	r31, r25
    48b2:	10 82       	st	Z, r1
    48b4:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    48b6:	80 31       	cpi	r24, 0x10	; 16
    48b8:	91 05       	cpc	r25, r1
    48ba:	a9 f7       	brne	.-22     	; 0x48a6 <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    48bc:	08 95       	ret

000048be <get_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
    48be:	80 91 f2 01 	lds	r24, 0x01F2
    48c2:	08 95       	ret

000048c4 <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    48c4:	90 91 f2 01 	lds	r25, 0x01F2
    48c8:	98 2b       	or	r25, r24
    48ca:	90 93 f2 01 	sts	0x01F2, r25
    48ce:	08 95       	ret

000048d0 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    48d0:	80 95       	com	r24
    48d2:	90 91 f2 01 	lds	r25, 0x01F2
    48d6:	98 23       	and	r25, r24
    48d8:	90 93 f2 01 	sts	0x01F2, r25
    48dc:	08 95       	ret

000048de <clear_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }
    48de:	10 92 f2 01 	sts	0x01F2, r1
    48e2:	08 95       	ret

000048e4 <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    48e4:	90 91 f3 01 	lds	r25, 0x01F3
    48e8:	98 2b       	or	r25, r24
    48ea:	90 93 f3 01 	sts	0x01F3, r25
    48ee:	08 95       	ret

000048f0 <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    48f0:	80 95       	com	r24
    48f2:	90 91 f3 01 	lds	r25, 0x01F3
    48f6:	98 23       	and	r25, r24
    48f8:	90 93 f3 01 	sts	0x01F3, r25
    48fc:	08 95       	ret

000048fe <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    48fe:	10 92 f3 01 	sts	0x01F3, r1
    4902:	08 95       	ret

00004904 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    4904:	80 93 f4 01 	sts	0x01F4, r24
    4908:	08 95       	ret

0000490a <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    490a:	10 92 f4 01 	sts	0x01F4, r1
    490e:	08 95       	ret

00004910 <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    4910:	40 91 0f 01 	lds	r20, 0x010F
    4914:	50 91 10 01 	lds	r21, 0x0110
    4918:	20 e0       	ldi	r18, 0x00	; 0
    491a:	30 e0       	ldi	r19, 0x00	; 0
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    491c:	80 e0       	ldi	r24, 0x00	; 0


/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
    491e:	fa 01       	movw	r30, r20
    4920:	e2 0f       	add	r30, r18
    4922:	f3 1f       	adc	r31, r19
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    4924:	91 81       	ldd	r25, Z+1	; 0x01
    4926:	91 11       	cpse	r25, r1
            cnt++;
    4928:	8f 5f       	subi	r24, 0xFF	; 255
    492a:	2f 5f       	subi	r18, 0xFF	; 255
    492c:	3f 4f       	sbci	r19, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    492e:	2f 30       	cpi	r18, 0x0F	; 15
    4930:	31 05       	cpc	r19, r1
    4932:	a9 f7       	brne	.-22     	; 0x491e <has_anykey+0xe>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    4934:	08 95       	ret

00004936 <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    4936:	e0 91 0f 01 	lds	r30, 0x010F
    493a:	f0 91 10 01 	lds	r31, 0x0110
    493e:	80 91 f2 01 	lds	r24, 0x01F2
    4942:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    4944:	e0 91 0f 01 	lds	r30, 0x010F
    4948:	f0 91 10 01 	lds	r31, 0x0110
    494c:	80 81       	ld	r24, Z
    494e:	90 91 f3 01 	lds	r25, 0x01F3
    4952:	89 2b       	or	r24, r25
    4954:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    4956:	90 91 f4 01 	lds	r25, 0x01F4
    495a:	99 23       	and	r25, r25
    495c:	61 f0       	breq	.+24     	; 0x4976 <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    495e:	e0 91 0f 01 	lds	r30, 0x010F
    4962:	f0 91 10 01 	lds	r31, 0x0110
    4966:	80 81       	ld	r24, Z
    4968:	89 2b       	or	r24, r25
    496a:	80 83       	st	Z, r24
        if (has_anykey()) {
    496c:	0e 94 88 24 	call	0x4910	; 0x4910 <has_anykey>
    4970:	81 11       	cpse	r24, r1
            clear_oneshot_mods();
    4972:	0e 94 85 24 	call	0x490a	; 0x490a <clear_oneshot_mods>
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    4976:	80 91 0f 01 	lds	r24, 0x010F
    497a:	90 91 10 01 	lds	r25, 0x0110
    497e:	0c 94 92 18 	jmp	0x3124	; 0x3124 <host_keyboard_send>

00004982 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    4982:	80 91 3c 02 	lds	r24, 0x023C
    4986:	84 30       	cpi	r24, 0x04	; 4
    4988:	09 f1       	breq	.+66     	; 0x49cc <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    498a:	10 92 06 02 	sts	0x0206, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    498e:	20 e4       	ldi	r18, 0x40	; 64
    4990:	88 e1       	ldi	r24, 0x18	; 24
    4992:	90 e0       	ldi	r25, 0x00	; 0
    4994:	0f b6       	in	r0, 0x3f	; 63
    4996:	f8 94       	cli
    4998:	a8 95       	wdr
    499a:	80 93 60 00 	sts	0x0060, r24
    499e:	0f be       	out	0x3f, r0	; 63
    49a0:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    49a4:	83 b7       	in	r24, 0x33	; 51
    49a6:	81 7f       	andi	r24, 0xF1	; 241
    49a8:	84 60       	ori	r24, 0x04	; 4
    49aa:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    49ac:	83 b7       	in	r24, 0x33	; 51
    49ae:	81 60       	ori	r24, 0x01	; 1
    49b0:	83 bf       	out	0x33, r24	; 51
    sei();
    49b2:	78 94       	sei
    sleep_cpu();
    49b4:	88 95       	sleep
    sleep_disable();
    49b6:	83 b7       	in	r24, 0x33	; 51
    49b8:	8e 7f       	andi	r24, 0xFE	; 254
    49ba:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    49bc:	88 e1       	ldi	r24, 0x18	; 24
    49be:	0f b6       	in	r0, 0x3f	; 63
    49c0:	f8 94       	cli
    49c2:	80 93 60 00 	sts	0x0060, r24
    49c6:	10 92 60 00 	sts	0x0060, r1
    49ca:	0f be       	out	0x3f, r0	; 63
    49cc:	08 95       	ret

000049ce <matrix_power_up>:
void suspend_power_down(void)
{
    power_down(WDTO_15MS);
}

__attribute__ ((weak)) void matrix_power_up(void) {}
    49ce:	08 95       	ret

000049d0 <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    49d0:	08 95       	ret

000049d2 <suspend_wakeup_condition>:
bool suspend_wakeup_condition(void)
{
    49d2:	cf 93       	push	r28
    matrix_power_up();
    49d4:	0e 94 e7 24 	call	0x49ce	; 0x49ce <matrix_power_up>
    matrix_scan();
    49d8:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <matrix_scan>
    matrix_power_down();
    49dc:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    49e0:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    49e2:	8c 2f       	mov	r24, r28
    49e4:	0e 94 05 11 	call	0x220a	; 0x220a <matrix_get_row>
    49e8:	89 2b       	or	r24, r25
    49ea:	29 f4       	brne	.+10     	; 0x49f6 <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    49ec:	cf 5f       	subi	r28, 0xFF	; 255
    49ee:	c5 30       	cpi	r28, 0x05	; 5
    49f0:	c1 f7       	brne	.-16     	; 0x49e2 <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    49f2:	80 e0       	ldi	r24, 0x00	; 0
    49f4:	01 c0       	rjmp	.+2      	; 0x49f8 <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    49f6:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    49f8:	cf 91       	pop	r28
    49fa:	08 95       	ret

000049fc <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    49fc:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <clear_keyboard>
#ifdef BACKLIGHT_ENABLE
    backlight_init();
    4a00:	0c 94 bb 2b 	jmp	0x5776	; 0x5776 <backlight_init>

00004a04 <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    4a04:	1f 92       	push	r1
    4a06:	0f 92       	push	r0
    4a08:	0f b6       	in	r0, 0x3f	; 63
    4a0a:	0f 92       	push	r0
    4a0c:	11 24       	eor	r1, r1
    4a0e:	8f 93       	push	r24
    4a10:	9f 93       	push	r25
    4a12:	af 93       	push	r26
    4a14:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    4a16:	80 91 06 02 	lds	r24, 0x0206
    4a1a:	81 11       	cpse	r24, r1
    4a1c:	13 c0       	rjmp	.+38     	; 0x4a44 <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    4a1e:	80 91 07 02 	lds	r24, 0x0207
    4a22:	90 91 08 02 	lds	r25, 0x0208
    4a26:	a0 91 09 02 	lds	r26, 0x0209
    4a2a:	b0 91 0a 02 	lds	r27, 0x020A
    4a2e:	41 96       	adiw	r24, 0x11	; 17
    4a30:	a1 1d       	adc	r26, r1
    4a32:	b1 1d       	adc	r27, r1
    4a34:	80 93 07 02 	sts	0x0207, r24
    4a38:	90 93 08 02 	sts	0x0208, r25
    4a3c:	a0 93 09 02 	sts	0x0209, r26
    4a40:	b0 93 0a 02 	sts	0x020A, r27
            break;
        default:
            ;
    }
}
    4a44:	bf 91       	pop	r27
    4a46:	af 91       	pop	r26
    4a48:	9f 91       	pop	r25
    4a4a:	8f 91       	pop	r24
    4a4c:	0f 90       	pop	r0
    4a4e:	0f be       	out	0x3f, r0	; 63
    4a50:	0f 90       	pop	r0
    4a52:	1f 90       	pop	r1
    4a54:	18 95       	reti

00004a56 <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    4a56:	82 e0       	ldi	r24, 0x02	; 2
    4a58:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    4a5a:	93 e0       	ldi	r25, 0x03	; 3
    4a5c:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    4a5e:	9a ef       	ldi	r25, 0xFA	; 250
    4a60:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    4a62:	80 93 6e 00 	sts	0x006E, r24
    4a66:	08 95       	ret

00004a68 <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    4a68:	8f b7       	in	r24, 0x3f	; 63
    cli();
    4a6a:	f8 94       	cli
    t = timer_count;
    4a6c:	40 91 07 02 	lds	r20, 0x0207
    4a70:	50 91 08 02 	lds	r21, 0x0208
    4a74:	60 91 09 02 	lds	r22, 0x0209
    4a78:	70 91 0a 02 	lds	r23, 0x020A
    SREG = sreg;
    4a7c:	8f bf       	out	0x3f, r24	; 63

    return (t & 0xFFFF);
}
    4a7e:	ca 01       	movw	r24, r20
    4a80:	08 95       	ret

00004a82 <timer_elapsed>:
    return t;
}

inline
uint16_t timer_elapsed(uint16_t last)
{
    4a82:	cf 92       	push	r12
    4a84:	df 92       	push	r13
    4a86:	ef 92       	push	r14
    4a88:	ff 92       	push	r15
    4a8a:	0f 93       	push	r16
    4a8c:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    4a8e:	2f b7       	in	r18, 0x3f	; 63
    cli();
    4a90:	f8 94       	cli
    t = timer_count;
    4a92:	40 91 07 02 	lds	r20, 0x0207
    4a96:	50 91 08 02 	lds	r21, 0x0208
    4a9a:	60 91 09 02 	lds	r22, 0x0209
    4a9e:	70 91 0a 02 	lds	r23, 0x020A
    SREG = sreg;
    4aa2:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    4aa4:	6a 01       	movw	r12, r20
    4aa6:	7b 01       	movw	r14, r22
    4aa8:	ee 24       	eor	r14, r14
    4aaa:	ff 24       	eor	r15, r15
    4aac:	8c 01       	movw	r16, r24
    4aae:	20 e0       	ldi	r18, 0x00	; 0
    4ab0:	30 e0       	ldi	r19, 0x00	; 0
    4ab2:	c0 16       	cp	r12, r16
    4ab4:	d1 06       	cpc	r13, r17
    4ab6:	e2 06       	cpc	r14, r18
    4ab8:	f3 06       	cpc	r15, r19
    4aba:	20 f0       	brcs	.+8      	; 0x4ac4 <timer_elapsed+0x42>
    4abc:	9a 01       	movw	r18, r20
    4abe:	28 1b       	sub	r18, r24
    4ac0:	39 0b       	sbc	r19, r25
    4ac2:	05 c0       	rjmp	.+10     	; 0x4ace <timer_elapsed+0x4c>
    4ac4:	9c 01       	movw	r18, r24
    4ac6:	20 95       	com	r18
    4ac8:	30 95       	com	r19
    4aca:	24 0f       	add	r18, r20
    4acc:	35 1f       	adc	r19, r21
}
    4ace:	c9 01       	movw	r24, r18
    4ad0:	1f 91       	pop	r17
    4ad2:	0f 91       	pop	r16
    4ad4:	ff 90       	pop	r15
    4ad6:	ef 90       	pop	r14
    4ad8:	df 90       	pop	r13
    4ada:	cf 90       	pop	r12
    4adc:	08 95       	ret

00004ade <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    4ade:	1f 92       	push	r1
    4ae0:	0f 92       	push	r0
    4ae2:	0f b6       	in	r0, 0x3f	; 63
    4ae4:	0f 92       	push	r0
    4ae6:	11 24       	eor	r1, r1
    4ae8:	8f 93       	push	r24
    4aea:	9f 93       	push	r25
    4aec:	af 93       	push	r26
    4aee:	bf 93       	push	r27
    timer_count++;
    4af0:	80 91 07 02 	lds	r24, 0x0207
    4af4:	90 91 08 02 	lds	r25, 0x0208
    4af8:	a0 91 09 02 	lds	r26, 0x0209
    4afc:	b0 91 0a 02 	lds	r27, 0x020A
    4b00:	01 96       	adiw	r24, 0x01	; 1
    4b02:	a1 1d       	adc	r26, r1
    4b04:	b1 1d       	adc	r27, r1
    4b06:	80 93 07 02 	sts	0x0207, r24
    4b0a:	90 93 08 02 	sts	0x0208, r25
    4b0e:	a0 93 09 02 	sts	0x0209, r26
    4b12:	b0 93 0a 02 	sts	0x020A, r27
}
    4b16:	bf 91       	pop	r27
    4b18:	af 91       	pop	r26
    4b1a:	9f 91       	pop	r25
    4b1c:	8f 91       	pop	r24
    4b1e:	0f 90       	pop	r0
    4b20:	0f be       	out	0x3f, r0	; 63
    4b22:	0f 90       	pop	r0
    4b24:	1f 90       	pop	r1
    4b26:	18 95       	reti

00004b28 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    4b28:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <USB_Disable>
    cli();
    4b2c:	f8 94       	cli
    4b2e:	2f ef       	ldi	r18, 0xFF	; 255
    4b30:	87 ea       	ldi	r24, 0xA7	; 167
    4b32:	91 e6       	ldi	r25, 0x61	; 97
    4b34:	21 50       	subi	r18, 0x01	; 1
    4b36:	80 40       	sbci	r24, 0x00	; 0
    4b38:	90 40       	sbci	r25, 0x00	; 0
    4b3a:	e1 f7       	brne	.-8      	; 0x4b34 <bootloader_jump+0xc>
    4b3c:	00 c0       	rjmp	.+0      	; 0x4b3e <bootloader_jump+0x16>
    4b3e:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    4b40:	87 e0       	ldi	r24, 0x07	; 7
    4b42:	90 eb       	ldi	r25, 0xB0	; 176
    4b44:	dc 01       	movw	r26, r24
    4b46:	80 93 46 02 	sts	0x0246, r24
    4b4a:	90 93 47 02 	sts	0x0247, r25
    4b4e:	a0 93 48 02 	sts	0x0248, r26
    4b52:	b0 93 49 02 	sts	0x0249, r27
    wdt_enable(WDTO_250MS);
    4b56:	2c e0       	ldi	r18, 0x0C	; 12
    4b58:	88 e1       	ldi	r24, 0x18	; 24
    4b5a:	90 e0       	ldi	r25, 0x00	; 0
    4b5c:	0f b6       	in	r0, 0x3f	; 63
    4b5e:	f8 94       	cli
    4b60:	a8 95       	wdr
    4b62:	80 93 60 00 	sts	0x0060, r24
    4b66:	0f be       	out	0x3f, r0	; 63
    4b68:	20 93 60 00 	sts	0x0060, r18
    4b6c:	ff cf       	rjmp	.-2      	; 0x4b6c <bootloader_jump+0x44>

00004b6e <scan_keycode>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_keycode(uint8_t keycode)
{
    4b6e:	cf 92       	push	r12
    4b70:	df 92       	push	r13
    4b72:	ef 92       	push	r14
    4b74:	ff 92       	push	r15
    4b76:	0f 93       	push	r16
    4b78:	1f 93       	push	r17
    4b7a:	cf 93       	push	r28
    4b7c:	df 93       	push	r29
    4b7e:	c8 2e       	mov	r12, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    4b80:	d1 2c       	mov	r13, r1
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    4b82:	01 e0       	ldi	r16, 0x01	; 1
    4b84:	10 e0       	ldi	r17, 0x00	; 0
}

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
    4b86:	8d 2d       	mov	r24, r13
    4b88:	0e 94 05 11 	call	0x220a	; 0x220a <matrix_get_row>
    4b8c:	7c 01       	movw	r14, r24
    4b8e:	c0 e0       	ldi	r28, 0x00	; 0
    4b90:	d0 e0       	ldi	r29, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    4b92:	98 01       	movw	r18, r16
    4b94:	0c 2e       	mov	r0, r28
    4b96:	02 c0       	rjmp	.+4      	; 0x4b9c <scan_keycode+0x2e>
    4b98:	22 0f       	add	r18, r18
    4b9a:	33 1f       	adc	r19, r19
    4b9c:	0a 94       	dec	r0
    4b9e:	e2 f7       	brpl	.-8      	; 0x4b98 <scan_keycode+0x2a>
    4ba0:	2e 21       	and	r18, r14
    4ba2:	3f 21       	and	r19, r15
    4ba4:	23 2b       	or	r18, r19
    4ba6:	29 f4       	brne	.+10     	; 0x4bb2 <scan_keycode+0x44>
    4ba8:	21 96       	adiw	r28, 0x01	; 1

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    4baa:	ce 30       	cpi	r28, 0x0E	; 14
    4bac:	d1 05       	cpc	r29, r1
    4bae:	89 f7       	brne	.-30     	; 0x4b92 <scan_keycode+0x24>
    4bb0:	08 c0       	rjmp	.+16     	; 0x4bc2 <scan_keycode+0x54>
            if (matrix_row & ((matrix_row_t)1<<c)) {
                if (keycode == keymap_key_to_keycode(0, (keypos_t){ .row = r, .col = c })) {
    4bb2:	6c 2f       	mov	r22, r28
    4bb4:	7d 2d       	mov	r23, r13
    4bb6:	80 e0       	ldi	r24, 0x00	; 0
    4bb8:	0e 94 4f 0c 	call	0x189e	; 0x189e <keymap_key_to_keycode>
    4bbc:	c8 12       	cpse	r12, r24
    4bbe:	f4 cf       	rjmp	.-24     	; 0x4ba8 <scan_keycode+0x3a>
    4bc0:	06 c0       	rjmp	.+12     	; 0x4bce <scan_keycode+0x60>
    }
}

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    4bc2:	d3 94       	inc	r13
    4bc4:	85 e0       	ldi	r24, 0x05	; 5
    4bc6:	d8 12       	cpse	r13, r24
    4bc8:	de cf       	rjmp	.-68     	; 0x4b86 <scan_keycode+0x18>
                    return true;
                }
            }
        }
    }
    return false;
    4bca:	80 e0       	ldi	r24, 0x00	; 0
    4bcc:	01 c0       	rjmp	.+2      	; 0x4bd0 <scan_keycode+0x62>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
                if (keycode == keymap_key_to_keycode(0, (keypos_t){ .row = r, .col = c })) {
                    return true;
    4bce:	81 e0       	ldi	r24, 0x01	; 1
                }
            }
        }
    }
    return false;
}
    4bd0:	df 91       	pop	r29
    4bd2:	cf 91       	pop	r28
    4bd4:	1f 91       	pop	r17
    4bd6:	0f 91       	pop	r16
    4bd8:	ff 90       	pop	r15
    4bda:	ef 90       	pop	r14
    4bdc:	df 90       	pop	r13
    4bde:	cf 90       	pop	r12
    4be0:	08 95       	ret

00004be2 <bootmagic_scan_keycode>:

bool bootmagic_scan_keycode(uint8_t keycode)
{
    4be2:	cf 93       	push	r28
    4be4:	c8 2f       	mov	r28, r24
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;
    4be6:	8c e2       	ldi	r24, 0x2C	; 44
    4be8:	0e 94 b7 25 	call	0x4b6e	; 0x4b6e <scan_keycode>
    4bec:	88 23       	and	r24, r24
    4bee:	21 f0       	breq	.+8      	; 0x4bf8 <bootmagic_scan_keycode+0x16>

    return scan_keycode(keycode);
    4bf0:	8c 2f       	mov	r24, r28
}
    4bf2:	cf 91       	pop	r28

bool bootmagic_scan_keycode(uint8_t keycode)
{
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;

    return scan_keycode(keycode);
    4bf4:	0c 94 b7 25 	jmp	0x4b6e	; 0x4b6e <scan_keycode>
}
    4bf8:	80 e0       	ldi	r24, 0x00	; 0
    4bfa:	cf 91       	pop	r28
    4bfc:	08 95       	ret

00004bfe <bootmagic>:
#include "eeconfig.h"
#include "bootmagic.h"


void bootmagic(void)
{
    4bfe:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    4c00:	0e 94 49 27 	call	0x4e92	; 0x4e92 <eeconfig_is_enabled>
    4c04:	81 11       	cpse	r24, r1
    4c06:	02 c0       	rjmp	.+4      	; 0x4c0c <bootmagic+0xe>
        eeconfig_init();
    4c08:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <eeconfig_init>
#include "eeconfig.h"
#include "bootmagic.h"


void bootmagic(void)
{
    4c0c:	c5 e6       	ldi	r28, 0x65	; 101
    4c0e:	08 c0       	rjmp	.+16     	; 0x4c20 <bootmagic+0x22>
    }

    /* do scans in case of bounce */
    print("boogmagic scan: ... ");
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); _delay_ms(10); }
    4c10:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <matrix_scan>
    4c14:	8f e3       	ldi	r24, 0x3F	; 63
    4c16:	9c e9       	ldi	r25, 0x9C	; 156
    4c18:	01 97       	sbiw	r24, 0x01	; 1
    4c1a:	f1 f7       	brne	.-4      	; 0x4c18 <bootmagic+0x1a>
    4c1c:	00 c0       	rjmp	.+0      	; 0x4c1e <bootmagic+0x20>
    4c1e:	00 00       	nop
    4c20:	c1 50       	subi	r28, 0x01	; 1
    4c22:	b1 f7       	brne	.-20     	; 0x4c10 <bootmagic+0x12>
    print("done.\n");

    /* bootmagic skip */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
    4c24:	89 e2       	ldi	r24, 0x29	; 41
    4c26:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <bootmagic_scan_keycode>
    4c2a:	81 11       	cpse	r24, r1
    4c2c:	11 c1       	rjmp	.+546    	; 0x4e50 <bootmagic+0x252>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    4c2e:	8a e2       	ldi	r24, 0x2A	; 42
    4c30:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <bootmagic_scan_keycode>
    4c34:	81 11       	cpse	r24, r1
        eeconfig_init();
    4c36:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
    4c3a:	85 e0       	ldi	r24, 0x05	; 5
    4c3c:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <bootmagic_scan_keycode>
    4c40:	81 11       	cpse	r24, r1
        bootloader_jump();
    4c42:	0e 94 94 25 	call	0x4b28	; 0x4b28 <bootloader_jump>
    }

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    4c46:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <eeconfig_read_debug>
    4c4a:	80 93 05 02 	sts	0x0205, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    4c4e:	87 e0       	ldi	r24, 0x07	; 7
    4c50:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <bootmagic_scan_keycode>
    4c54:	88 23       	and	r24, r24
    4c56:	99 f1       	breq	.+102    	; 0x4cbe <bootmagic+0xc0>
        if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    4c58:	8b e1       	ldi	r24, 0x1B	; 27
    4c5a:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <bootmagic_scan_keycode>
    4c5e:	88 23       	and	r24, r24
    4c60:	51 f0       	breq	.+20     	; 0x4c76 <bootmagic+0x78>
            debug_config.matrix = !debug_config.matrix;
    4c62:	90 91 05 02 	lds	r25, 0x0205
    4c66:	91 fb       	bst	r25, 1
    4c68:	88 27       	eor	r24, r24
    4c6a:	80 f9       	bld	r24, 0
    4c6c:	21 e0       	ldi	r18, 0x01	; 1
    4c6e:	82 27       	eor	r24, r18
    4c70:	80 fb       	bst	r24, 0
    4c72:	91 f9       	bld	r25, 1
    4c74:	22 c0       	rjmp	.+68     	; 0x4cba <bootmagic+0xbc>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    4c76:	8e e0       	ldi	r24, 0x0E	; 14
    4c78:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <bootmagic_scan_keycode>
    4c7c:	88 23       	and	r24, r24
    4c7e:	51 f0       	breq	.+20     	; 0x4c94 <bootmagic+0x96>
            debug_config.keyboard = !debug_config.keyboard;
    4c80:	90 91 05 02 	lds	r25, 0x0205
    4c84:	92 fb       	bst	r25, 2
    4c86:	88 27       	eor	r24, r24
    4c88:	80 f9       	bld	r24, 0
    4c8a:	21 e0       	ldi	r18, 0x01	; 1
    4c8c:	82 27       	eor	r24, r18
    4c8e:	80 fb       	bst	r24, 0
    4c90:	92 f9       	bld	r25, 2
    4c92:	13 c0       	rjmp	.+38     	; 0x4cba <bootmagic+0xbc>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    4c94:	80 e1       	ldi	r24, 0x10	; 16
    4c96:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <bootmagic_scan_keycode>
    4c9a:	90 91 05 02 	lds	r25, 0x0205
    4c9e:	88 23       	and	r24, r24
    4ca0:	41 f0       	breq	.+16     	; 0x4cb2 <bootmagic+0xb4>
            debug_config.mouse = !debug_config.mouse;
    4ca2:	93 fb       	bst	r25, 3
    4ca4:	88 27       	eor	r24, r24
    4ca6:	80 f9       	bld	r24, 0
    4ca8:	21 e0       	ldi	r18, 0x01	; 1
    4caa:	82 27       	eor	r24, r18
    4cac:	80 fb       	bst	r24, 0
    4cae:	93 f9       	bld	r25, 3
    4cb0:	04 c0       	rjmp	.+8      	; 0x4cba <bootmagic+0xbc>
        } else {
            debug_config.enable = !debug_config.enable;
    4cb2:	89 2f       	mov	r24, r25
    4cb4:	80 95       	com	r24
    4cb6:	80 fb       	bst	r24, 0
    4cb8:	90 f9       	bld	r25, 0
    4cba:	90 93 05 02 	sts	0x0205, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    4cbe:	80 91 05 02 	lds	r24, 0x0205
    4cc2:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    4cc6:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <eeconfig_read_keymap>
    4cca:	80 93 16 02 	sts	0x0216, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    4cce:	80 ee       	ldi	r24, 0xE0	; 224
    4cd0:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <bootmagic_scan_keycode>
    4cd4:	88 23       	and	r24, r24
    4cd6:	41 f0       	breq	.+16     	; 0x4ce8 <bootmagic+0xea>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    4cd8:	80 91 16 02 	lds	r24, 0x0216
    4cdc:	98 2f       	mov	r25, r24
    4cde:	90 95       	com	r25
    4ce0:	90 fb       	bst	r25, 0
    4ce2:	80 f9       	bld	r24, 0
    4ce4:	80 93 16 02 	sts	0x0216, r24
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    4ce8:	89 e3       	ldi	r24, 0x39	; 57
    4cea:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <bootmagic_scan_keycode>
    4cee:	88 23       	and	r24, r24
    4cf0:	59 f0       	breq	.+22     	; 0x4d08 <bootmagic+0x10a>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    4cf2:	90 91 16 02 	lds	r25, 0x0216
    4cf6:	91 fb       	bst	r25, 1
    4cf8:	88 27       	eor	r24, r24
    4cfa:	80 f9       	bld	r24, 0
    4cfc:	21 e0       	ldi	r18, 0x01	; 1
    4cfe:	82 27       	eor	r24, r18
    4d00:	80 fb       	bst	r24, 0
    4d02:	91 f9       	bld	r25, 1
    4d04:	90 93 16 02 	sts	0x0216, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    4d08:	82 ee       	ldi	r24, 0xE2	; 226
    4d0a:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <bootmagic_scan_keycode>
    4d0e:	88 23       	and	r24, r24
    4d10:	59 f0       	breq	.+22     	; 0x4d28 <bootmagic+0x12a>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    4d12:	90 91 16 02 	lds	r25, 0x0216
    4d16:	92 fb       	bst	r25, 2
    4d18:	88 27       	eor	r24, r24
    4d1a:	80 f9       	bld	r24, 0
    4d1c:	21 e0       	ldi	r18, 0x01	; 1
    4d1e:	82 27       	eor	r24, r18
    4d20:	80 fb       	bst	r24, 0
    4d22:	92 f9       	bld	r25, 2
    4d24:	90 93 16 02 	sts	0x0216, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    4d28:	86 ee       	ldi	r24, 0xE6	; 230
    4d2a:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <bootmagic_scan_keycode>
    4d2e:	88 23       	and	r24, r24
    4d30:	59 f0       	breq	.+22     	; 0x4d48 <bootmagic+0x14a>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    4d32:	90 91 16 02 	lds	r25, 0x0216
    4d36:	93 fb       	bst	r25, 3
    4d38:	88 27       	eor	r24, r24
    4d3a:	80 f9       	bld	r24, 0
    4d3c:	21 e0       	ldi	r18, 0x01	; 1
    4d3e:	82 27       	eor	r24, r18
    4d40:	80 fb       	bst	r24, 0
    4d42:	93 f9       	bld	r25, 3
    4d44:	90 93 16 02 	sts	0x0216, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
    4d48:	83 ee       	ldi	r24, 0xE3	; 227
    4d4a:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <bootmagic_scan_keycode>
    4d4e:	88 23       	and	r24, r24
    4d50:	59 f0       	breq	.+22     	; 0x4d68 <bootmagic+0x16a>
        keymap_config.no_gui = !keymap_config.no_gui;
    4d52:	90 91 16 02 	lds	r25, 0x0216
    4d56:	94 fb       	bst	r25, 4
    4d58:	88 27       	eor	r24, r24
    4d5a:	80 f9       	bld	r24, 0
    4d5c:	21 e0       	ldi	r18, 0x01	; 1
    4d5e:	82 27       	eor	r24, r18
    4d60:	80 fb       	bst	r24, 0
    4d62:	94 f9       	bld	r25, 4
    4d64:	90 93 16 02 	sts	0x0216, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    4d68:	85 e3       	ldi	r24, 0x35	; 53
    4d6a:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <bootmagic_scan_keycode>
    4d6e:	88 23       	and	r24, r24
    4d70:	59 f0       	breq	.+22     	; 0x4d88 <bootmagic+0x18a>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    4d72:	90 91 16 02 	lds	r25, 0x0216
    4d76:	95 fb       	bst	r25, 5
    4d78:	88 27       	eor	r24, r24
    4d7a:	80 f9       	bld	r24, 0
    4d7c:	21 e0       	ldi	r18, 0x01	; 1
    4d7e:	82 27       	eor	r24, r18
    4d80:	80 fb       	bst	r24, 0
    4d82:	95 f9       	bld	r25, 5
    4d84:	90 93 16 02 	sts	0x0216, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    4d88:	81 e3       	ldi	r24, 0x31	; 49
    4d8a:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <bootmagic_scan_keycode>
    4d8e:	88 23       	and	r24, r24
    4d90:	59 f0       	breq	.+22     	; 0x4da8 <bootmagic+0x1aa>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    4d92:	90 91 16 02 	lds	r25, 0x0216
    4d96:	96 fb       	bst	r25, 6
    4d98:	88 27       	eor	r24, r24
    4d9a:	80 f9       	bld	r24, 0
    4d9c:	21 e0       	ldi	r18, 0x01	; 1
    4d9e:	82 27       	eor	r24, r18
    4da0:	80 fb       	bst	r24, 0
    4da2:	96 f9       	bld	r25, 6
    4da4:	90 93 16 02 	sts	0x0216, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
    4da8:	81 e1       	ldi	r24, 0x11	; 17
    4daa:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <bootmagic_scan_keycode>
    4dae:	88 23       	and	r24, r24
    4db0:	59 f0       	breq	.+22     	; 0x4dc8 <bootmagic+0x1ca>
        keymap_config.nkro = !keymap_config.nkro;
    4db2:	90 91 16 02 	lds	r25, 0x0216
    4db6:	97 fb       	bst	r25, 7
    4db8:	88 27       	eor	r24, r24
    4dba:	80 f9       	bld	r24, 0
    4dbc:	21 e0       	ldi	r18, 0x01	; 1
    4dbe:	82 27       	eor	r24, r18
    4dc0:	80 fb       	bst	r24, 0
    4dc2:	97 f9       	bld	r25, 7
    4dc4:	90 93 16 02 	sts	0x0216, r25
    }
    eeconfig_write_keymap(keymap_config.raw);
    4dc8:	80 91 16 02 	lds	r24, 0x0216
    4dcc:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    4dd0:	80 91 16 02 	lds	r24, 0x0216
    4dd4:	87 fb       	bst	r24, 7
    4dd6:	88 27       	eor	r24, r24
    4dd8:	80 f9       	bld	r24, 0
    4dda:	80 93 0e 01 	sts	0x010E, r24
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    4dde:	87 e2       	ldi	r24, 0x27	; 39
    4de0:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <bootmagic_scan_keycode>
    4de4:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    4de6:	8e e1       	ldi	r24, 0x1E	; 30
    4de8:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <bootmagic_scan_keycode>
    4dec:	81 11       	cpse	r24, r1
    4dee:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    4df0:	8f e1       	ldi	r24, 0x1F	; 31
    4df2:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <bootmagic_scan_keycode>
    4df6:	81 11       	cpse	r24, r1
    4df8:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    4dfa:	80 e2       	ldi	r24, 0x20	; 32
    4dfc:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <bootmagic_scan_keycode>
    4e00:	81 11       	cpse	r24, r1
    4e02:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    4e04:	81 e2       	ldi	r24, 0x21	; 33
    4e06:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <bootmagic_scan_keycode>
    4e0a:	81 11       	cpse	r24, r1
    4e0c:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    4e0e:	82 e2       	ldi	r24, 0x22	; 34
    4e10:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <bootmagic_scan_keycode>
    4e14:	81 11       	cpse	r24, r1
    4e16:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    4e18:	83 e2       	ldi	r24, 0x23	; 35
    4e1a:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <bootmagic_scan_keycode>
    4e1e:	81 11       	cpse	r24, r1
    4e20:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    4e22:	84 e2       	ldi	r24, 0x24	; 36
    4e24:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <bootmagic_scan_keycode>
    4e28:	88 23       	and	r24, r24
    4e2a:	11 f0       	breq	.+4      	; 0x4e30 <bootmagic+0x232>
    4e2c:	c0 68       	ori	r28, 0x80	; 128
    4e2e:	02 c0       	rjmp	.+4      	; 0x4e34 <bootmagic+0x236>
    if (default_layer) {
    4e30:	cc 23       	and	r28, r28
    4e32:	29 f0       	breq	.+10     	; 0x4e3e <bootmagic+0x240>
        eeconfig_write_default_layer(default_layer);
    4e34:	8c 2f       	mov	r24, r28
    4e36:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    4e3a:	6c 2f       	mov	r22, r28
    4e3c:	03 c0       	rjmp	.+6      	; 0x4e44 <bootmagic+0x246>
    } else {
        default_layer = eeconfig_read_default_layer();
    4e3e:	0e 94 5d 27 	call	0x4eba	; 0x4eba <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    4e42:	68 2f       	mov	r22, r24
    4e44:	70 e0       	ldi	r23, 0x00	; 0
    4e46:	80 e0       	ldi	r24, 0x00	; 0
    4e48:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    4e4a:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    4e4c:	0c 94 c2 22 	jmp	0x4584	; 0x4584 <default_layer_set>
    }
}
    4e50:	cf 91       	pop	r28
    4e52:	08 95       	ret

00004e54 <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    4e54:	6d ee       	ldi	r22, 0xED	; 237
    4e56:	7e ef       	ldi	r23, 0xFE	; 254
    4e58:	80 e0       	ldi	r24, 0x00	; 0
    4e5a:	90 e0       	ldi	r25, 0x00	; 0
    4e5c:	0e 94 d2 2d 	call	0x5ba4	; 0x5ba4 <__eewr_word_m32u4>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    4e60:	60 e0       	ldi	r22, 0x00	; 0
    4e62:	82 e0       	ldi	r24, 0x02	; 2
    4e64:	90 e0       	ldi	r25, 0x00	; 0
    4e66:	0e 94 bc 2d 	call	0x5b78	; 0x5b78 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    4e6a:	60 e0       	ldi	r22, 0x00	; 0
    4e6c:	83 e0       	ldi	r24, 0x03	; 3
    4e6e:	90 e0       	ldi	r25, 0x00	; 0
    4e70:	0e 94 bc 2d 	call	0x5b78	; 0x5b78 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    4e74:	60 e0       	ldi	r22, 0x00	; 0
    4e76:	84 e0       	ldi	r24, 0x04	; 4
    4e78:	90 e0       	ldi	r25, 0x00	; 0
    4e7a:	0e 94 bc 2d 	call	0x5b78	; 0x5b78 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    4e7e:	60 e0       	ldi	r22, 0x00	; 0
    4e80:	85 e0       	ldi	r24, 0x05	; 5
    4e82:	90 e0       	ldi	r25, 0x00	; 0
    4e84:	0e 94 bc 2d 	call	0x5b78	; 0x5b78 <__eewr_byte_m32u4>
#ifdef BACKLIGHT_ENABLE
    eeprom_write_byte(EECONFIG_BACKLIGHT,      0);
    4e88:	60 e0       	ldi	r22, 0x00	; 0
    4e8a:	86 e0       	ldi	r24, 0x06	; 6
    4e8c:	90 e0       	ldi	r25, 0x00	; 0
    4e8e:	0c 94 bc 2d 	jmp	0x5b78	; 0x5b78 <__eewr_byte_m32u4>

00004e92 <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    4e92:	80 e0       	ldi	r24, 0x00	; 0
    4e94:	90 e0       	ldi	r25, 0x00	; 0
    4e96:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <__eerd_word_m32u4>
    4e9a:	21 e0       	ldi	r18, 0x01	; 1
    4e9c:	8d 3e       	cpi	r24, 0xED	; 237
    4e9e:	9e 4f       	sbci	r25, 0xFE	; 254
    4ea0:	09 f0       	breq	.+2      	; 0x4ea4 <eeconfig_is_enabled+0x12>
    4ea2:	20 e0       	ldi	r18, 0x00	; 0
}
    4ea4:	82 2f       	mov	r24, r18
    4ea6:	08 95       	ret

00004ea8 <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    4ea8:	82 e0       	ldi	r24, 0x02	; 2
    4eaa:	90 e0       	ldi	r25, 0x00	; 0
    4eac:	0c 94 a8 2d 	jmp	0x5b50	; 0x5b50 <__eerd_byte_m32u4>

00004eb0 <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    4eb0:	68 2f       	mov	r22, r24
    4eb2:	82 e0       	ldi	r24, 0x02	; 2
    4eb4:	90 e0       	ldi	r25, 0x00	; 0
    4eb6:	0c 94 bc 2d 	jmp	0x5b78	; 0x5b78 <__eewr_byte_m32u4>

00004eba <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    4eba:	83 e0       	ldi	r24, 0x03	; 3
    4ebc:	90 e0       	ldi	r25, 0x00	; 0
    4ebe:	0c 94 a8 2d 	jmp	0x5b50	; 0x5b50 <__eerd_byte_m32u4>

00004ec2 <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    4ec2:	68 2f       	mov	r22, r24
    4ec4:	83 e0       	ldi	r24, 0x03	; 3
    4ec6:	90 e0       	ldi	r25, 0x00	; 0
    4ec8:	0c 94 bc 2d 	jmp	0x5b78	; 0x5b78 <__eewr_byte_m32u4>

00004ecc <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    4ecc:	84 e0       	ldi	r24, 0x04	; 4
    4ece:	90 e0       	ldi	r25, 0x00	; 0
    4ed0:	0c 94 a8 2d 	jmp	0x5b50	; 0x5b50 <__eerd_byte_m32u4>

00004ed4 <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    4ed4:	68 2f       	mov	r22, r24
    4ed6:	84 e0       	ldi	r24, 0x04	; 4
    4ed8:	90 e0       	ldi	r25, 0x00	; 0
    4eda:	0c 94 bc 2d 	jmp	0x5b78	; 0x5b78 <__eewr_byte_m32u4>

00004ede <eeconfig_read_backlight>:

#ifdef BACKLIGHT_ENABLE
uint8_t eeconfig_read_backlight(void)      { return eeprom_read_byte(EECONFIG_BACKLIGHT); }
    4ede:	86 e0       	ldi	r24, 0x06	; 6
    4ee0:	90 e0       	ldi	r25, 0x00	; 0
    4ee2:	0c 94 a8 2d 	jmp	0x5b50	; 0x5b50 <__eerd_byte_m32u4>

00004ee6 <eeconfig_write_backlight>:
void eeconfig_write_backlight(uint8_t val) { eeprom_write_byte(EECONFIG_BACKLIGHT, val); }
    4ee6:	68 2f       	mov	r22, r24
    4ee8:	86 e0       	ldi	r24, 0x06	; 6
    4eea:	90 e0       	ldi	r25, 0x00	; 0
    4eec:	0c 94 bc 2d 	jmp	0x5b78	; 0x5b78 <__eewr_byte_m32u4>

00004ef0 <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4ef0:	80 91 13 02 	lds	r24, 0x0213
    4ef4:	80 ff       	sbrs	r24, 0
    4ef6:	0b c0       	rjmp	.+22     	; 0x4f0e <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    4ef8:	60 91 14 01 	lds	r22, 0x0114
    4efc:	85 e0       	ldi	r24, 0x05	; 5
    4efe:	68 9f       	mul	r22, r24
    4f00:	b0 01       	movw	r22, r0
    4f02:	11 24       	eor	r1, r1
    4f04:	75 95       	asr	r23
    4f06:	67 95       	ror	r22
    4f08:	75 95       	asr	r23
    4f0a:	67 95       	ror	r22
    4f0c:	2a c0       	rjmp	.+84     	; 0x4f62 <move_unit+0x72>
    } else if (mousekey_accel & (1<<1)) {
    4f0e:	81 ff       	sbrs	r24, 1
    4f10:	09 c0       	rjmp	.+18     	; 0x4f24 <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    4f12:	60 91 14 01 	lds	r22, 0x0114
    4f16:	85 e0       	ldi	r24, 0x05	; 5
    4f18:	68 9f       	mul	r22, r24
    4f1a:	b0 01       	movw	r22, r0
    4f1c:	11 24       	eor	r1, r1
    4f1e:	75 95       	asr	r23
    4f20:	67 95       	ror	r22
    4f22:	1f c0       	rjmp	.+62     	; 0x4f62 <move_unit+0x72>
    } else if (mousekey_accel & (1<<2)) {
    4f24:	82 ff       	sbrs	r24, 2
    4f26:	07 c0       	rjmp	.+14     	; 0x4f36 <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    4f28:	60 91 14 01 	lds	r22, 0x0114
    4f2c:	85 e0       	ldi	r24, 0x05	; 5
    4f2e:	68 9f       	mul	r22, r24
    4f30:	b0 01       	movw	r22, r0
    4f32:	11 24       	eor	r1, r1
    4f34:	16 c0       	rjmp	.+44     	; 0x4f62 <move_unit+0x72>
    } else if (mousekey_repeat == 0) {
    4f36:	40 91 0d 02 	lds	r20, 0x020D
    4f3a:	44 23       	and	r20, r20
    4f3c:	c9 f0       	breq	.+50     	; 0x4f70 <move_unit+0x80>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    4f3e:	60 91 13 01 	lds	r22, 0x0113
    4f42:	46 17       	cp	r20, r22
    4f44:	88 f7       	brcc	.-30     	; 0x4f28 <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    4f46:	20 91 14 01 	lds	r18, 0x0114
    4f4a:	85 e0       	ldi	r24, 0x05	; 5
    4f4c:	28 9f       	mul	r18, r24
    4f4e:	90 01       	movw	r18, r0
    4f50:	11 24       	eor	r1, r1
    4f52:	42 9f       	mul	r20, r18
    4f54:	c0 01       	movw	r24, r0
    4f56:	43 9f       	mul	r20, r19
    4f58:	90 0d       	add	r25, r0
    4f5a:	11 24       	eor	r1, r1
    4f5c:	70 e0       	ldi	r23, 0x00	; 0
    4f5e:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4f62:	60 38       	cpi	r22, 0x80	; 128
    4f64:	71 05       	cpc	r23, r1
    4f66:	40 f4       	brcc	.+16     	; 0x4f78 <move_unit+0x88>
    4f68:	61 15       	cp	r22, r1
    4f6a:	71 05       	cpc	r23, r1
    4f6c:	39 f0       	breq	.+14     	; 0x4f7c <move_unit+0x8c>
    4f6e:	02 c0       	rjmp	.+4      	; 0x4f74 <move_unit+0x84>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    4f70:	65 e0       	ldi	r22, 0x05	; 5
    4f72:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4f74:	86 2f       	mov	r24, r22
    4f76:	08 95       	ret
    4f78:	8f e7       	ldi	r24, 0x7F	; 127
    4f7a:	08 95       	ret
    4f7c:	81 e0       	ldi	r24, 0x01	; 1
}
    4f7e:	08 95       	ret

00004f80 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4f80:	80 91 13 02 	lds	r24, 0x0213
    4f84:	80 ff       	sbrs	r24, 0
    4f86:	08 c0       	rjmp	.+16     	; 0x4f98 <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    4f88:	60 91 12 01 	lds	r22, 0x0112
    4f8c:	70 e0       	ldi	r23, 0x00	; 0
    4f8e:	75 95       	asr	r23
    4f90:	67 95       	ror	r22
    4f92:	75 95       	asr	r23
    4f94:	67 95       	ror	r22
    4f96:	21 c0       	rjmp	.+66     	; 0x4fda <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    4f98:	81 ff       	sbrs	r24, 1
    4f9a:	06 c0       	rjmp	.+12     	; 0x4fa8 <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    4f9c:	60 91 12 01 	lds	r22, 0x0112
    4fa0:	70 e0       	ldi	r23, 0x00	; 0
    4fa2:	75 95       	asr	r23
    4fa4:	67 95       	ror	r22
    4fa6:	19 c0       	rjmp	.+50     	; 0x4fda <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    4fa8:	82 ff       	sbrs	r24, 2
    4faa:	04 c0       	rjmp	.+8      	; 0x4fb4 <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    4fac:	60 91 12 01 	lds	r22, 0x0112
    4fb0:	70 e0       	ldi	r23, 0x00	; 0
    4fb2:	10 c0       	rjmp	.+32     	; 0x4fd4 <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    4fb4:	80 91 0d 02 	lds	r24, 0x020D
    4fb8:	88 23       	and	r24, r24
    4fba:	c1 f0       	breq	.+48     	; 0x4fec <wheel_unit+0x6c>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    4fbc:	60 91 11 01 	lds	r22, 0x0111
    4fc0:	86 17       	cp	r24, r22
    4fc2:	a0 f7       	brcc	.-24     	; 0x4fac <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    4fc4:	90 91 12 01 	lds	r25, 0x0112
    4fc8:	98 9f       	mul	r25, r24
    4fca:	c0 01       	movw	r24, r0
    4fcc:	11 24       	eor	r1, r1
    4fce:	70 e0       	ldi	r23, 0x00	; 0
    4fd0:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    4fd4:	60 38       	cpi	r22, 0x80	; 128
    4fd6:	71 05       	cpc	r23, r1
    4fd8:	28 f4       	brcc	.+10     	; 0x4fe4 <wheel_unit+0x64>
    4fda:	61 15       	cp	r22, r1
    4fdc:	71 05       	cpc	r23, r1
    4fde:	21 f0       	breq	.+8      	; 0x4fe8 <wheel_unit+0x68>
    4fe0:	86 2f       	mov	r24, r22
    4fe2:	08 95       	ret
    4fe4:	8f e7       	ldi	r24, 0x7F	; 127
    4fe6:	08 95       	ret
    4fe8:	81 e0       	ldi	r24, 0x01	; 1
    4fea:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    4fec:	61 e0       	ldi	r22, 0x01	; 1
    4fee:	70 e0       	ldi	r23, 0x00	; 0
    4ff0:	f4 cf       	rjmp	.-24     	; 0x4fda <wheel_unit+0x5a>

00004ff2 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    4ff2:	80 3f       	cpi	r24, 0xF0	; 240
    4ff4:	21 f4       	brne	.+8      	; 0x4ffe <mousekey_on+0xc>
    4ff6:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <move_unit>
    4ffa:	81 95       	neg	r24
    4ffc:	04 c0       	rjmp	.+8      	; 0x5006 <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    4ffe:	81 3f       	cpi	r24, 0xF1	; 241
    5000:	29 f4       	brne	.+10     	; 0x500c <mousekey_on+0x1a>
    5002:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <move_unit>
    5006:	80 93 10 02 	sts	0x0210, r24
    500a:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    500c:	82 3f       	cpi	r24, 0xF2	; 242
    500e:	21 f4       	brne	.+8      	; 0x5018 <mousekey_on+0x26>
    5010:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <move_unit>
    5014:	81 95       	neg	r24
    5016:	04 c0       	rjmp	.+8      	; 0x5020 <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    5018:	83 3f       	cpi	r24, 0xF3	; 243
    501a:	29 f4       	brne	.+10     	; 0x5026 <mousekey_on+0x34>
    501c:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <move_unit>
    5020:	80 93 0f 02 	sts	0x020F, r24
    5024:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    5026:	89 3f       	cpi	r24, 0xF9	; 249
    5028:	19 f4       	brne	.+6      	; 0x5030 <mousekey_on+0x3e>
    502a:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <wheel_unit>
    502e:	05 c0       	rjmp	.+10     	; 0x503a <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    5030:	8a 3f       	cpi	r24, 0xFA	; 250
    5032:	31 f4       	brne	.+12     	; 0x5040 <mousekey_on+0x4e>
    5034:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <wheel_unit>
    5038:	81 95       	neg	r24
    503a:	80 93 11 02 	sts	0x0211, r24
    503e:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    5040:	8b 3f       	cpi	r24, 0xFB	; 251
    5042:	21 f4       	brne	.+8      	; 0x504c <mousekey_on+0x5a>
    5044:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <wheel_unit>
    5048:	81 95       	neg	r24
    504a:	04 c0       	rjmp	.+8      	; 0x5054 <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    504c:	8c 3f       	cpi	r24, 0xFC	; 252
    504e:	29 f4       	brne	.+10     	; 0x505a <mousekey_on+0x68>
    5050:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <wheel_unit>
    5054:	80 93 12 02 	sts	0x0212, r24
    5058:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    505a:	84 3f       	cpi	r24, 0xF4	; 244
    505c:	21 f4       	brne	.+8      	; 0x5066 <mousekey_on+0x74>
    505e:	80 91 0e 02 	lds	r24, 0x020E
    5062:	81 60       	ori	r24, 0x01	; 1
    5064:	17 c0       	rjmp	.+46     	; 0x5094 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    5066:	85 3f       	cpi	r24, 0xF5	; 245
    5068:	21 f4       	brne	.+8      	; 0x5072 <mousekey_on+0x80>
    506a:	80 91 0e 02 	lds	r24, 0x020E
    506e:	82 60       	ori	r24, 0x02	; 2
    5070:	11 c0       	rjmp	.+34     	; 0x5094 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    5072:	86 3f       	cpi	r24, 0xF6	; 246
    5074:	21 f4       	brne	.+8      	; 0x507e <mousekey_on+0x8c>
    5076:	80 91 0e 02 	lds	r24, 0x020E
    507a:	84 60       	ori	r24, 0x04	; 4
    507c:	0b c0       	rjmp	.+22     	; 0x5094 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    507e:	87 3f       	cpi	r24, 0xF7	; 247
    5080:	21 f4       	brne	.+8      	; 0x508a <mousekey_on+0x98>
    5082:	80 91 0e 02 	lds	r24, 0x020E
    5086:	88 60       	ori	r24, 0x08	; 8
    5088:	05 c0       	rjmp	.+10     	; 0x5094 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    508a:	88 3f       	cpi	r24, 0xF8	; 248
    508c:	31 f4       	brne	.+12     	; 0x509a <mousekey_on+0xa8>
    508e:	80 91 0e 02 	lds	r24, 0x020E
    5092:	80 61       	ori	r24, 0x10	; 16
    5094:	80 93 0e 02 	sts	0x020E, r24
    5098:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    509a:	8d 3f       	cpi	r24, 0xFD	; 253
    509c:	21 f4       	brne	.+8      	; 0x50a6 <mousekey_on+0xb4>
    509e:	80 91 13 02 	lds	r24, 0x0213
    50a2:	81 60       	ori	r24, 0x01	; 1
    50a4:	0b c0       	rjmp	.+22     	; 0x50bc <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    50a6:	8e 3f       	cpi	r24, 0xFE	; 254
    50a8:	21 f4       	brne	.+8      	; 0x50b2 <mousekey_on+0xc0>
    50aa:	80 91 13 02 	lds	r24, 0x0213
    50ae:	82 60       	ori	r24, 0x02	; 2
    50b0:	05 c0       	rjmp	.+10     	; 0x50bc <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    50b2:	8f 3f       	cpi	r24, 0xFF	; 255
    50b4:	29 f4       	brne	.+10     	; 0x50c0 <mousekey_on+0xce>
    50b6:	80 91 13 02 	lds	r24, 0x0213
    50ba:	84 60       	ori	r24, 0x04	; 4
    50bc:	80 93 13 02 	sts	0x0213, r24
    50c0:	08 95       	ret

000050c2 <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    50c2:	80 3f       	cpi	r24, 0xF0	; 240
    50c4:	29 f4       	brne	.+10     	; 0x50d0 <mousekey_off+0xe>
    50c6:	80 91 10 02 	lds	r24, 0x0210
    50ca:	87 ff       	sbrs	r24, 7
    50cc:	6e c0       	rjmp	.+220    	; 0x51aa <mousekey_off+0xe8>
    50ce:	07 c0       	rjmp	.+14     	; 0x50de <mousekey_off+0x1c>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    50d0:	81 3f       	cpi	r24, 0xF1	; 241
    50d2:	41 f4       	brne	.+16     	; 0x50e4 <mousekey_off+0x22>
    50d4:	80 91 10 02 	lds	r24, 0x0210
    50d8:	18 16       	cp	r1, r24
    50da:	0c f0       	brlt	.+2      	; 0x50de <mousekey_off+0x1c>
    50dc:	66 c0       	rjmp	.+204    	; 0x51aa <mousekey_off+0xe8>
    50de:	10 92 10 02 	sts	0x0210, r1
    50e2:	63 c0       	rjmp	.+198    	; 0x51aa <mousekey_off+0xe8>
    50e4:	90 91 0f 02 	lds	r25, 0x020F
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    50e8:	82 3f       	cpi	r24, 0xF2	; 242
    50ea:	19 f4       	brne	.+6      	; 0x50f2 <mousekey_off+0x30>
    50ec:	97 ff       	sbrs	r25, 7
    50ee:	5d c0       	rjmp	.+186    	; 0x51aa <mousekey_off+0xe8>
    50f0:	05 c0       	rjmp	.+10     	; 0x50fc <mousekey_off+0x3a>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    50f2:	83 3f       	cpi	r24, 0xF3	; 243
    50f4:	31 f4       	brne	.+12     	; 0x5102 <mousekey_off+0x40>
    50f6:	19 16       	cp	r1, r25
    50f8:	0c f0       	brlt	.+2      	; 0x50fc <mousekey_off+0x3a>
    50fa:	57 c0       	rjmp	.+174    	; 0x51aa <mousekey_off+0xe8>
    50fc:	10 92 0f 02 	sts	0x020F, r1
    5100:	54 c0       	rjmp	.+168    	; 0x51aa <mousekey_off+0xe8>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    5102:	89 3f       	cpi	r24, 0xF9	; 249
    5104:	31 f4       	brne	.+12     	; 0x5112 <mousekey_off+0x50>
    5106:	80 91 11 02 	lds	r24, 0x0211
    510a:	18 16       	cp	r1, r24
    510c:	0c f0       	brlt	.+2      	; 0x5110 <mousekey_off+0x4e>
    510e:	4d c0       	rjmp	.+154    	; 0x51aa <mousekey_off+0xe8>
    5110:	06 c0       	rjmp	.+12     	; 0x511e <mousekey_off+0x5c>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    5112:	8a 3f       	cpi	r24, 0xFA	; 250
    5114:	39 f4       	brne	.+14     	; 0x5124 <mousekey_off+0x62>
    5116:	80 91 11 02 	lds	r24, 0x0211
    511a:	87 ff       	sbrs	r24, 7
    511c:	46 c0       	rjmp	.+140    	; 0x51aa <mousekey_off+0xe8>
    511e:	10 92 11 02 	sts	0x0211, r1
    5122:	43 c0       	rjmp	.+134    	; 0x51aa <mousekey_off+0xe8>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    5124:	8b 3f       	cpi	r24, 0xFB	; 251
    5126:	29 f4       	brne	.+10     	; 0x5132 <mousekey_off+0x70>
    5128:	80 91 12 02 	lds	r24, 0x0212
    512c:	87 ff       	sbrs	r24, 7
    512e:	3d c0       	rjmp	.+122    	; 0x51aa <mousekey_off+0xe8>
    5130:	06 c0       	rjmp	.+12     	; 0x513e <mousekey_off+0x7c>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    5132:	8c 3f       	cpi	r24, 0xFC	; 252
    5134:	39 f4       	brne	.+14     	; 0x5144 <mousekey_off+0x82>
    5136:	80 91 12 02 	lds	r24, 0x0212
    513a:	18 16       	cp	r1, r24
    513c:	b4 f5       	brge	.+108    	; 0x51aa <mousekey_off+0xe8>
    513e:	10 92 12 02 	sts	0x0212, r1
    5142:	33 c0       	rjmp	.+102    	; 0x51aa <mousekey_off+0xe8>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    5144:	84 3f       	cpi	r24, 0xF4	; 244
    5146:	21 f4       	brne	.+8      	; 0x5150 <mousekey_off+0x8e>
    5148:	80 91 0e 02 	lds	r24, 0x020E
    514c:	8e 7f       	andi	r24, 0xFE	; 254
    514e:	05 c0       	rjmp	.+10     	; 0x515a <mousekey_off+0x98>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    5150:	85 3f       	cpi	r24, 0xF5	; 245
    5152:	31 f4       	brne	.+12     	; 0x5160 <mousekey_off+0x9e>
    5154:	80 91 0e 02 	lds	r24, 0x020E
    5158:	8d 7f       	andi	r24, 0xFD	; 253
    515a:	80 93 0e 02 	sts	0x020E, r24
    515e:	25 c0       	rjmp	.+74     	; 0x51aa <mousekey_off+0xe8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    5160:	86 3f       	cpi	r24, 0xF6	; 246
    5162:	21 f4       	brne	.+8      	; 0x516c <mousekey_off+0xaa>
    5164:	80 91 0e 02 	lds	r24, 0x020E
    5168:	8b 7f       	andi	r24, 0xFB	; 251
    516a:	f7 cf       	rjmp	.-18     	; 0x515a <mousekey_off+0x98>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    516c:	87 3f       	cpi	r24, 0xF7	; 247
    516e:	21 f4       	brne	.+8      	; 0x5178 <mousekey_off+0xb6>
    5170:	80 91 0e 02 	lds	r24, 0x020E
    5174:	87 7f       	andi	r24, 0xF7	; 247
    5176:	f1 cf       	rjmp	.-30     	; 0x515a <mousekey_off+0x98>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    5178:	88 3f       	cpi	r24, 0xF8	; 248
    517a:	21 f4       	brne	.+8      	; 0x5184 <mousekey_off+0xc2>
    517c:	80 91 0e 02 	lds	r24, 0x020E
    5180:	8f 7e       	andi	r24, 0xEF	; 239
    5182:	eb cf       	rjmp	.-42     	; 0x515a <mousekey_off+0x98>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    5184:	8d 3f       	cpi	r24, 0xFD	; 253
    5186:	21 f4       	brne	.+8      	; 0x5190 <mousekey_off+0xce>
    5188:	80 91 13 02 	lds	r24, 0x0213
    518c:	8e 7f       	andi	r24, 0xFE	; 254
    518e:	0b c0       	rjmp	.+22     	; 0x51a6 <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    5190:	8e 3f       	cpi	r24, 0xFE	; 254
    5192:	21 f4       	brne	.+8      	; 0x519c <mousekey_off+0xda>
    5194:	80 91 13 02 	lds	r24, 0x0213
    5198:	8d 7f       	andi	r24, 0xFD	; 253
    519a:	05 c0       	rjmp	.+10     	; 0x51a6 <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    519c:	8f 3f       	cpi	r24, 0xFF	; 255
    519e:	29 f4       	brne	.+10     	; 0x51aa <mousekey_off+0xe8>
    51a0:	80 91 13 02 	lds	r24, 0x0213
    51a4:	8b 7f       	andi	r24, 0xFB	; 251
    51a6:	80 93 13 02 	sts	0x0213, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    51aa:	80 91 0f 02 	lds	r24, 0x020F
    51ae:	81 11       	cpse	r24, r1
    51b0:	0e c0       	rjmp	.+28     	; 0x51ce <mousekey_off+0x10c>
    51b2:	80 91 10 02 	lds	r24, 0x0210
    51b6:	81 11       	cpse	r24, r1
    51b8:	0a c0       	rjmp	.+20     	; 0x51ce <mousekey_off+0x10c>
    51ba:	80 91 11 02 	lds	r24, 0x0211
    51be:	81 11       	cpse	r24, r1
    51c0:	06 c0       	rjmp	.+12     	; 0x51ce <mousekey_off+0x10c>
    51c2:	80 91 12 02 	lds	r24, 0x0212
    51c6:	81 11       	cpse	r24, r1
    51c8:	02 c0       	rjmp	.+4      	; 0x51ce <mousekey_off+0x10c>
        mousekey_repeat = 0;
    51ca:	10 92 0d 02 	sts	0x020D, r1
    51ce:	08 95       	ret

000051d0 <mousekey_send>:
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    51d0:	8e e0       	ldi	r24, 0x0E	; 14
    51d2:	92 e0       	ldi	r25, 0x02	; 2
    51d4:	0e 94 9d 18 	call	0x313a	; 0x313a <host_mouse_send>
    last_timer = timer_read();
    51d8:	0e 94 34 25 	call	0x4a68	; 0x4a68 <timer_read>
    51dc:	90 93 0c 02 	sts	0x020C, r25
    51e0:	80 93 0b 02 	sts	0x020B, r24
    51e4:	08 95       	ret

000051e6 <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    51e6:	cf 93       	push	r28
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    51e8:	80 91 0b 02 	lds	r24, 0x020B
    51ec:	90 91 0c 02 	lds	r25, 0x020C
    51f0:	0e 94 41 25 	call	0x4a82	; 0x4a82 <timer_elapsed>
    51f4:	40 91 0d 02 	lds	r20, 0x020D
    51f8:	44 23       	and	r20, r20
    51fa:	21 f0       	breq	.+8      	; 0x5204 <mousekey_task+0x1e>
    51fc:	20 91 15 01 	lds	r18, 0x0115
    5200:	30 e0       	ldi	r19, 0x00	; 0
    5202:	06 c0       	rjmp	.+12     	; 0x5210 <mousekey_task+0x2a>
    5204:	20 91 16 01 	lds	r18, 0x0116
    5208:	5a e0       	ldi	r21, 0x0A	; 10
    520a:	25 9f       	mul	r18, r21
    520c:	90 01       	movw	r18, r0
    520e:	11 24       	eor	r1, r1
    5210:	82 17       	cp	r24, r18
    5212:	93 07       	cpc	r25, r19
    5214:	08 f4       	brcc	.+2      	; 0x5218 <mousekey_task+0x32>
    5216:	86 c0       	rjmp	.+268    	; 0x5324 <mousekey_task+0x13e>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    5218:	80 91 0f 02 	lds	r24, 0x020F
    521c:	81 11       	cpse	r24, r1
    521e:	0d c0       	rjmp	.+26     	; 0x523a <mousekey_task+0x54>
    5220:	90 91 10 02 	lds	r25, 0x0210
    5224:	91 11       	cpse	r25, r1
    5226:	09 c0       	rjmp	.+18     	; 0x523a <mousekey_task+0x54>
    5228:	90 91 11 02 	lds	r25, 0x0211
    522c:	91 11       	cpse	r25, r1
    522e:	05 c0       	rjmp	.+10     	; 0x523a <mousekey_task+0x54>
    5230:	90 91 12 02 	lds	r25, 0x0212
    5234:	99 23       	and	r25, r25
    5236:	09 f4       	brne	.+2      	; 0x523a <mousekey_task+0x54>
    5238:	75 c0       	rjmp	.+234    	; 0x5324 <mousekey_task+0x13e>
        return;

    if (mousekey_repeat != UINT8_MAX)
    523a:	4f 3f       	cpi	r20, 0xFF	; 255
    523c:	19 f0       	breq	.+6      	; 0x5244 <mousekey_task+0x5e>
        mousekey_repeat++;
    523e:	4f 5f       	subi	r20, 0xFF	; 255
    5240:	40 93 0d 02 	sts	0x020D, r20


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    5244:	18 16       	cp	r1, r24
    5246:	24 f4       	brge	.+8      	; 0x5250 <mousekey_task+0x6a>
    5248:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <move_unit>
    524c:	80 93 0f 02 	sts	0x020F, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    5250:	80 91 0f 02 	lds	r24, 0x020F
    5254:	87 ff       	sbrs	r24, 7
    5256:	05 c0       	rjmp	.+10     	; 0x5262 <mousekey_task+0x7c>
    5258:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <move_unit>
    525c:	81 95       	neg	r24
    525e:	80 93 0f 02 	sts	0x020F, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    5262:	80 91 10 02 	lds	r24, 0x0210
    5266:	18 16       	cp	r1, r24
    5268:	24 f4       	brge	.+8      	; 0x5272 <mousekey_task+0x8c>
    526a:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <move_unit>
    526e:	80 93 10 02 	sts	0x0210, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    5272:	80 91 10 02 	lds	r24, 0x0210
    5276:	87 ff       	sbrs	r24, 7
    5278:	05 c0       	rjmp	.+10     	; 0x5284 <mousekey_task+0x9e>
    527a:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <move_unit>
    527e:	81 95       	neg	r24
    5280:	80 93 10 02 	sts	0x0210, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    5284:	60 91 0f 02 	lds	r22, 0x020F
    5288:	66 23       	and	r22, r22
    528a:	39 f1       	breq	.+78     	; 0x52da <mousekey_task+0xf4>
    528c:	c0 91 10 02 	lds	r28, 0x0210
    5290:	cc 23       	and	r28, r28
    5292:	19 f1       	breq	.+70     	; 0x52da <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    5294:	77 27       	eor	r23, r23
    5296:	67 fd       	sbrc	r22, 7
    5298:	70 95       	com	r23
    529a:	87 2f       	mov	r24, r23
    529c:	97 2f       	mov	r25, r23
    529e:	0e 94 85 2c 	call	0x590a	; 0x590a <__floatsisf>
    52a2:	23 e3       	ldi	r18, 0x33	; 51
    52a4:	33 e3       	ldi	r19, 0x33	; 51
    52a6:	43 e3       	ldi	r20, 0x33	; 51
    52a8:	5f e3       	ldi	r21, 0x3F	; 63
    52aa:	0e 94 e9 2c 	call	0x59d2	; 0x59d2 <__mulsf3>
    52ae:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <__fixsfsi>
    52b2:	60 93 0f 02 	sts	0x020F, r22
        mouse_report.y *= 0.7;
    52b6:	6c 2f       	mov	r22, r28
    52b8:	77 27       	eor	r23, r23
    52ba:	67 fd       	sbrc	r22, 7
    52bc:	70 95       	com	r23
    52be:	87 2f       	mov	r24, r23
    52c0:	97 2f       	mov	r25, r23
    52c2:	0e 94 85 2c 	call	0x590a	; 0x590a <__floatsisf>
    52c6:	23 e3       	ldi	r18, 0x33	; 51
    52c8:	33 e3       	ldi	r19, 0x33	; 51
    52ca:	43 e3       	ldi	r20, 0x33	; 51
    52cc:	5f e3       	ldi	r21, 0x3F	; 63
    52ce:	0e 94 e9 2c 	call	0x59d2	; 0x59d2 <__mulsf3>
    52d2:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <__fixsfsi>
    52d6:	60 93 10 02 	sts	0x0210, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    52da:	80 91 11 02 	lds	r24, 0x0211
    52de:	18 16       	cp	r1, r24
    52e0:	24 f4       	brge	.+8      	; 0x52ea <mousekey_task+0x104>
    52e2:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <wheel_unit>
    52e6:	80 93 11 02 	sts	0x0211, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    52ea:	80 91 11 02 	lds	r24, 0x0211
    52ee:	87 ff       	sbrs	r24, 7
    52f0:	05 c0       	rjmp	.+10     	; 0x52fc <mousekey_task+0x116>
    52f2:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <wheel_unit>
    52f6:	81 95       	neg	r24
    52f8:	80 93 11 02 	sts	0x0211, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    52fc:	80 91 12 02 	lds	r24, 0x0212
    5300:	18 16       	cp	r1, r24
    5302:	24 f4       	brge	.+8      	; 0x530c <mousekey_task+0x126>
    5304:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <wheel_unit>
    5308:	80 93 12 02 	sts	0x0212, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    530c:	80 91 12 02 	lds	r24, 0x0212
    5310:	87 ff       	sbrs	r24, 7
    5312:	05 c0       	rjmp	.+10     	; 0x531e <mousekey_task+0x138>
    5314:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <wheel_unit>
    5318:	81 95       	neg	r24
    531a:	80 93 12 02 	sts	0x0212, r24

    mousekey_send();
}
    531e:	cf 91       	pop	r28
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    5320:	0c 94 e8 28 	jmp	0x51d0	; 0x51d0 <mousekey_send>
}
    5324:	cf 91       	pop	r28
    5326:	08 95       	ret

00005328 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    5328:	ee e0       	ldi	r30, 0x0E	; 14
    532a:	f2 e0       	ldi	r31, 0x02	; 2
    532c:	85 e0       	ldi	r24, 0x05	; 5
    532e:	df 01       	movw	r26, r30
    5330:	1d 92       	st	X+, r1
    5332:	8a 95       	dec	r24
    5334:	e9 f7       	brne	.-6      	; 0x5330 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    5336:	10 92 0d 02 	sts	0x020D, r1
    mousekey_accel = 0;
    533a:	10 92 13 02 	sts	0x0213, r1
    533e:	08 95       	ret

00005340 <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    5340:	83 30       	cpi	r24, 0x03	; 3
    5342:	89 f1       	breq	.+98     	; 0x53a6 <mousekey_param_inc+0x66>
    5344:	30 f4       	brcc	.+12     	; 0x5352 <mousekey_param_inc+0x12>
    5346:	81 30       	cpi	r24, 0x01	; 1
    5348:	61 f0       	breq	.+24     	; 0x5362 <mousekey_param_inc+0x22>
    534a:	82 30       	cpi	r24, 0x02	; 2
    534c:	09 f0       	breq	.+2      	; 0x5350 <mousekey_param_inc+0x10>
    534e:	6e c0       	rjmp	.+220    	; 0x542c <mousekey_param_inc+0xec>
    5350:	19 c0       	rjmp	.+50     	; 0x5384 <mousekey_param_inc+0x44>
    5352:	85 30       	cpi	r24, 0x05	; 5
    5354:	09 f4       	brne	.+2      	; 0x5358 <mousekey_param_inc+0x18>
    5356:	49 c0       	rjmp	.+146    	; 0x53ea <mousekey_param_inc+0xaa>
    5358:	b8 f1       	brcs	.+110    	; 0x53c8 <mousekey_param_inc+0x88>
    535a:	86 30       	cpi	r24, 0x06	; 6
    535c:	09 f0       	breq	.+2      	; 0x5360 <mousekey_param_inc+0x20>
    535e:	66 c0       	rjmp	.+204    	; 0x542c <mousekey_param_inc+0xec>
    5360:	55 c0       	rjmp	.+170    	; 0x540c <mousekey_param_inc+0xcc>
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    5362:	20 91 16 01 	lds	r18, 0x0116
    5366:	86 2f       	mov	r24, r22
    5368:	90 e0       	ldi	r25, 0x00	; 0
    536a:	82 0f       	add	r24, r18
    536c:	91 1d       	adc	r25, r1
    536e:	8f 3f       	cpi	r24, 0xFF	; 255
    5370:	91 05       	cpc	r25, r1
    5372:	20 f4       	brcc	.+8      	; 0x537c <mousekey_param_inc+0x3c>
                mk_delay += inc;
    5374:	62 0f       	add	r22, r18
    5376:	60 93 16 01 	sts	0x0116, r22
    537a:	08 95       	ret
            else
                mk_delay = UINT8_MAX;
    537c:	8f ef       	ldi	r24, 0xFF	; 255
    537e:	80 93 16 01 	sts	0x0116, r24
    5382:	08 95       	ret
            PRINT_SET_VAL(mk_delay);
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    5384:	20 91 15 01 	lds	r18, 0x0115
    5388:	86 2f       	mov	r24, r22
    538a:	90 e0       	ldi	r25, 0x00	; 0
    538c:	82 0f       	add	r24, r18
    538e:	91 1d       	adc	r25, r1
    5390:	8f 3f       	cpi	r24, 0xFF	; 255
    5392:	91 05       	cpc	r25, r1
    5394:	20 f4       	brcc	.+8      	; 0x539e <mousekey_param_inc+0x5e>
                mk_interval += inc;
    5396:	62 0f       	add	r22, r18
    5398:	60 93 15 01 	sts	0x0115, r22
    539c:	08 95       	ret
            else
                mk_interval = UINT8_MAX;
    539e:	8f ef       	ldi	r24, 0xFF	; 255
    53a0:	80 93 15 01 	sts	0x0115, r24
    53a4:	08 95       	ret
            PRINT_SET_VAL(mk_interval);
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    53a6:	20 91 14 01 	lds	r18, 0x0114
    53aa:	86 2f       	mov	r24, r22
    53ac:	90 e0       	ldi	r25, 0x00	; 0
    53ae:	82 0f       	add	r24, r18
    53b0:	91 1d       	adc	r25, r1
    53b2:	8f 3f       	cpi	r24, 0xFF	; 255
    53b4:	91 05       	cpc	r25, r1
    53b6:	20 f4       	brcc	.+8      	; 0x53c0 <mousekey_param_inc+0x80>
                mk_max_speed += inc;
    53b8:	62 0f       	add	r22, r18
    53ba:	60 93 14 01 	sts	0x0114, r22
    53be:	08 95       	ret
            else
                mk_max_speed = UINT8_MAX;
    53c0:	8f ef       	ldi	r24, 0xFF	; 255
    53c2:	80 93 14 01 	sts	0x0114, r24
    53c6:	08 95       	ret
            PRINT_SET_VAL(mk_max_speed);
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    53c8:	20 91 13 01 	lds	r18, 0x0113
    53cc:	86 2f       	mov	r24, r22
    53ce:	90 e0       	ldi	r25, 0x00	; 0
    53d0:	82 0f       	add	r24, r18
    53d2:	91 1d       	adc	r25, r1
    53d4:	8f 3f       	cpi	r24, 0xFF	; 255
    53d6:	91 05       	cpc	r25, r1
    53d8:	20 f4       	brcc	.+8      	; 0x53e2 <mousekey_param_inc+0xa2>
                mk_time_to_max += inc;
    53da:	62 0f       	add	r22, r18
    53dc:	60 93 13 01 	sts	0x0113, r22
    53e0:	08 95       	ret
            else
                mk_time_to_max = UINT8_MAX;
    53e2:	8f ef       	ldi	r24, 0xFF	; 255
    53e4:	80 93 13 01 	sts	0x0113, r24
    53e8:	08 95       	ret
            PRINT_SET_VAL(mk_time_to_max);
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    53ea:	20 91 12 01 	lds	r18, 0x0112
    53ee:	86 2f       	mov	r24, r22
    53f0:	90 e0       	ldi	r25, 0x00	; 0
    53f2:	82 0f       	add	r24, r18
    53f4:	91 1d       	adc	r25, r1
    53f6:	8f 3f       	cpi	r24, 0xFF	; 255
    53f8:	91 05       	cpc	r25, r1
    53fa:	20 f4       	brcc	.+8      	; 0x5404 <mousekey_param_inc+0xc4>
                mk_wheel_max_speed += inc;
    53fc:	62 0f       	add	r22, r18
    53fe:	60 93 12 01 	sts	0x0112, r22
    5402:	08 95       	ret
            else
                mk_wheel_max_speed = UINT8_MAX;
    5404:	8f ef       	ldi	r24, 0xFF	; 255
    5406:	80 93 12 01 	sts	0x0112, r24
    540a:	08 95       	ret
            PRINT_SET_VAL(mk_wheel_max_speed);
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    540c:	20 91 11 01 	lds	r18, 0x0111
    5410:	86 2f       	mov	r24, r22
    5412:	90 e0       	ldi	r25, 0x00	; 0
    5414:	82 0f       	add	r24, r18
    5416:	91 1d       	adc	r25, r1
    5418:	8f 3f       	cpi	r24, 0xFF	; 255
    541a:	91 05       	cpc	r25, r1
    541c:	20 f4       	brcc	.+8      	; 0x5426 <mousekey_param_inc+0xe6>
                mk_wheel_time_to_max += inc;
    541e:	62 0f       	add	r22, r18
    5420:	60 93 11 01 	sts	0x0111, r22
    5424:	08 95       	ret
            else
                mk_wheel_time_to_max = UINT8_MAX;
    5426:	8f ef       	ldi	r24, 0xFF	; 255
    5428:	80 93 11 01 	sts	0x0111, r24
    542c:	08 95       	ret

0000542e <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    542e:	83 30       	cpi	r24, 0x03	; 3
    5430:	21 f1       	breq	.+72     	; 0x547a <mousekey_param_dec+0x4c>
    5432:	30 f4       	brcc	.+12     	; 0x5440 <mousekey_param_dec+0x12>
    5434:	81 30       	cpi	r24, 0x01	; 1
    5436:	59 f0       	breq	.+22     	; 0x544e <mousekey_param_dec+0x20>
    5438:	82 30       	cpi	r24, 0x02	; 2
    543a:	09 f0       	breq	.+2      	; 0x543e <mousekey_param_dec+0x10>
    543c:	49 c0       	rjmp	.+146    	; 0x54d0 <mousekey_param_dec+0xa2>
    543e:	12 c0       	rjmp	.+36     	; 0x5464 <mousekey_param_dec+0x36>
    5440:	85 30       	cpi	r24, 0x05	; 5
    5442:	89 f1       	breq	.+98     	; 0x54a6 <mousekey_param_dec+0x78>
    5444:	28 f1       	brcs	.+74     	; 0x5490 <mousekey_param_dec+0x62>
    5446:	86 30       	cpi	r24, 0x06	; 6
    5448:	09 f0       	breq	.+2      	; 0x544c <mousekey_param_dec+0x1e>
    544a:	42 c0       	rjmp	.+132    	; 0x54d0 <mousekey_param_dec+0xa2>
    544c:	37 c0       	rjmp	.+110    	; 0x54bc <mousekey_param_dec+0x8e>
        case 1:
            if (mk_delay > dec)
    544e:	80 91 16 01 	lds	r24, 0x0116
    5452:	68 17       	cp	r22, r24
    5454:	20 f4       	brcc	.+8      	; 0x545e <mousekey_param_dec+0x30>
                mk_delay -= dec;
    5456:	86 1b       	sub	r24, r22
    5458:	80 93 16 01 	sts	0x0116, r24
    545c:	08 95       	ret
            else
                mk_delay = 0;
    545e:	10 92 16 01 	sts	0x0116, r1
    5462:	08 95       	ret
            PRINT_SET_VAL(mk_delay);
            break;
        case 2:
            if (mk_interval > dec)
    5464:	80 91 15 01 	lds	r24, 0x0115
    5468:	68 17       	cp	r22, r24
    546a:	20 f4       	brcc	.+8      	; 0x5474 <mousekey_param_dec+0x46>
                mk_interval -= dec;
    546c:	86 1b       	sub	r24, r22
    546e:	80 93 15 01 	sts	0x0115, r24
    5472:	08 95       	ret
            else
                mk_interval = 0;
    5474:	10 92 15 01 	sts	0x0115, r1
    5478:	08 95       	ret
            PRINT_SET_VAL(mk_interval);
            break;
        case 3:
            if (mk_max_speed > dec)
    547a:	80 91 14 01 	lds	r24, 0x0114
    547e:	68 17       	cp	r22, r24
    5480:	20 f4       	brcc	.+8      	; 0x548a <mousekey_param_dec+0x5c>
                mk_max_speed -= dec;
    5482:	86 1b       	sub	r24, r22
    5484:	80 93 14 01 	sts	0x0114, r24
    5488:	08 95       	ret
            else
                mk_max_speed = 0;
    548a:	10 92 14 01 	sts	0x0114, r1
    548e:	08 95       	ret
            PRINT_SET_VAL(mk_max_speed);
            break;
        case 4:
            if (mk_time_to_max > dec)
    5490:	80 91 13 01 	lds	r24, 0x0113
    5494:	68 17       	cp	r22, r24
    5496:	20 f4       	brcc	.+8      	; 0x54a0 <mousekey_param_dec+0x72>
                mk_time_to_max -= dec;
    5498:	86 1b       	sub	r24, r22
    549a:	80 93 13 01 	sts	0x0113, r24
    549e:	08 95       	ret
            else
                mk_time_to_max = 0;
    54a0:	10 92 13 01 	sts	0x0113, r1
    54a4:	08 95       	ret
            PRINT_SET_VAL(mk_time_to_max);
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    54a6:	80 91 12 01 	lds	r24, 0x0112
    54aa:	68 17       	cp	r22, r24
    54ac:	20 f4       	brcc	.+8      	; 0x54b6 <mousekey_param_dec+0x88>
                mk_wheel_max_speed -= dec;
    54ae:	86 1b       	sub	r24, r22
    54b0:	80 93 12 01 	sts	0x0112, r24
    54b4:	08 95       	ret
            else
                mk_wheel_max_speed = 0;
    54b6:	10 92 12 01 	sts	0x0112, r1
    54ba:	08 95       	ret
            PRINT_SET_VAL(mk_wheel_max_speed);
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    54bc:	80 91 11 01 	lds	r24, 0x0111
    54c0:	68 17       	cp	r22, r24
    54c2:	20 f4       	brcc	.+8      	; 0x54cc <mousekey_param_dec+0x9e>
                mk_wheel_time_to_max -= dec;
    54c4:	86 1b       	sub	r24, r22
    54c6:	80 93 11 01 	sts	0x0111, r24
    54ca:	08 95       	ret
            else
                mk_wheel_time_to_max = 0;
    54cc:	10 92 11 01 	sts	0x0111, r1
    54d0:	08 95       	ret

000054d2 <switch_default_layer>:
}

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    54d2:	41 e0       	ldi	r20, 0x01	; 1
    54d4:	50 e0       	ldi	r21, 0x00	; 0
    54d6:	60 e0       	ldi	r22, 0x00	; 0
    54d8:	70 e0       	ldi	r23, 0x00	; 0
    54da:	04 c0       	rjmp	.+8      	; 0x54e4 <switch_default_layer+0x12>
    54dc:	44 0f       	add	r20, r20
    54de:	55 1f       	adc	r21, r21
    54e0:	66 1f       	adc	r22, r22
    54e2:	77 1f       	adc	r23, r23
    54e4:	8a 95       	dec	r24
    54e6:	d2 f7       	brpl	.-12     	; 0x54dc <switch_default_layer+0xa>
    54e8:	cb 01       	movw	r24, r22
    54ea:	ba 01       	movw	r22, r20
    54ec:	0e 94 c2 22 	call	0x4584	; 0x4584 <default_layer_set>
    clear_keyboard();
    54f0:	0c 94 b7 1e 	jmp	0x3d6e	; 0x3d6e <clear_keyboard>

000054f4 <command_common>:
#endif

static bool command_common(uint8_t code)
{
    static host_driver_t *host_driver = 0;
    switch (code) {
    54f4:	8b 31       	cpi	r24, 0x1B	; 27
    54f6:	09 f4       	brne	.+2      	; 0x54fa <command_common+0x6>
    54f8:	65 c0       	rjmp	.+202    	; 0x55c4 <command_common+0xd0>
    54fa:	e8 f4       	brcc	.+58     	; 0x5536 <command_common+0x42>
    54fc:	8e 30       	cpi	r24, 0x0E	; 14
    54fe:	09 f4       	brne	.+2      	; 0x5502 <command_common+0xe>
    5500:	6b c0       	rjmp	.+214    	; 0x55d8 <command_common+0xe4>
    5502:	60 f4       	brcc	.+24     	; 0x551c <command_common+0x28>
    5504:	87 30       	cpi	r24, 0x07	; 7
    5506:	09 f4       	brne	.+2      	; 0x550a <command_common+0x16>
    5508:	52 c0       	rjmp	.+164    	; 0x55ae <command_common+0xba>
    550a:	18 f4       	brcc	.+6      	; 0x5512 <command_common+0x1e>
    550c:	86 30       	cpi	r24, 0x06	; 6
    550e:	71 f5       	brne	.+92     	; 0x556c <command_common+0x78>
    5510:	36 c0       	rjmp	.+108    	; 0x557e <command_common+0x8a>
    5512:	88 30       	cpi	r24, 0x08	; 8
    5514:	69 f1       	breq	.+90     	; 0x5570 <command_common+0x7c>
    5516:	8b 30       	cpi	r24, 0x0B	; 11
    5518:	49 f5       	brne	.+82     	; 0x556c <command_common+0x78>
    551a:	89 c0       	rjmp	.+274    	; 0x562e <command_common+0x13a>
    551c:	81 31       	cpi	r24, 0x11	; 17
    551e:	09 f4       	brne	.+2      	; 0x5522 <command_common+0x2e>
    5520:	76 c0       	rjmp	.+236    	; 0x560e <command_common+0x11a>
    5522:	18 f4       	brcc	.+6      	; 0x552a <command_common+0x36>
    5524:	80 31       	cpi	r24, 0x10	; 16
    5526:	11 f5       	brne	.+68     	; 0x556c <command_common+0x78>
    5528:	61 c0       	rjmp	.+194    	; 0x55ec <command_common+0xf8>
    552a:	86 31       	cpi	r24, 0x16	; 22
    552c:	09 f4       	brne	.+2      	; 0x5530 <command_common+0x3c>
    552e:	7f c0       	rjmp	.+254    	; 0x562e <command_common+0x13a>
    5530:	89 31       	cpi	r24, 0x19	; 25
    5532:	e1 f4       	brne	.+56     	; 0x556c <command_common+0x78>
    5534:	7c c0       	rjmp	.+248    	; 0x562e <command_common+0x13a>
    5536:	85 33       	cpi	r24, 0x35	; 53
    5538:	09 f4       	brne	.+2      	; 0x553c <command_common+0x48>
    553a:	72 c0       	rjmp	.+228    	; 0x5620 <command_common+0x12c>
    553c:	50 f4       	brcc	.+20     	; 0x5552 <command_common+0x5e>
    553e:	87 32       	cpi	r24, 0x27	; 39
    5540:	09 f4       	brne	.+2      	; 0x5544 <command_common+0x50>
    5542:	6e c0       	rjmp	.+220    	; 0x5620 <command_common+0x12c>
    5544:	18 f4       	brcc	.+6      	; 0x554c <command_common+0x58>
    5546:	8e 31       	cpi	r24, 0x1E	; 30
    5548:	88 f0       	brcs	.+34     	; 0x556c <command_common+0x78>
    554a:	6c c0       	rjmp	.+216    	; 0x5624 <command_common+0x130>
    554c:	89 32       	cpi	r24, 0x29	; 41
    554e:	71 f4       	brne	.+28     	; 0x556c <command_common+0x78>
    5550:	67 c0       	rjmp	.+206    	; 0x5620 <command_common+0x12c>
    5552:	83 34       	cpi	r24, 0x43	; 67
    5554:	30 f4       	brcc	.+12     	; 0x5562 <command_common+0x6e>
    5556:	8a 33       	cpi	r24, 0x3A	; 58
    5558:	08 f0       	brcs	.+2      	; 0x555c <command_common+0x68>
    555a:	66 c0       	rjmp	.+204    	; 0x5628 <command_common+0x134>
    555c:	88 33       	cpi	r24, 0x38	; 56
    555e:	31 f4       	brne	.+12     	; 0x556c <command_common+0x78>
    5560:	66 c0       	rjmp	.+204    	; 0x562e <command_common+0x13a>
    5562:	83 34       	cpi	r24, 0x43	; 67
    5564:	09 f4       	brne	.+2      	; 0x5568 <command_common+0x74>
    5566:	5c c0       	rjmp	.+184    	; 0x5620 <command_common+0x12c>
    5568:	88 34       	cpi	r24, 0x48	; 72
    556a:	99 f0       	breq	.+38     	; 0x5592 <command_common+0x9e>
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
            break;
        default:
            print("?");
            return false;
    556c:	80 e0       	ldi	r24, 0x00	; 0
    556e:	08 95       	ret
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    5570:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <eeconfig_read_debug>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    print(".mouse: "); print_dec(dc.mouse); print("\n");

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    5574:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <eeconfig_read_keymap>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    print(".nkro: "); print_dec(kc.nkro); print("\n");

#ifdef BACKLIGHT_ENABLE
    backlight_config_t bc;
    bc.raw = eeconfig_read_backlight();
    5578:	0e 94 6f 27 	call	0x4ede	; 0x4ede <eeconfig_read_backlight>
    557c:	58 c0       	rjmp	.+176    	; 0x562e <command_common+0x13a>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    557e:	80 91 05 02 	lds	r24, 0x0205
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    5582:	81 7f       	andi	r24, 0xF1	; 241
    5584:	8e 7f       	andi	r24, 0xFE	; 254
    5586:	80 93 05 02 	sts	0x0205, r24
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
    558a:	81 e0       	ldi	r24, 0x01	; 1
    558c:	80 93 14 02 	sts	0x0214, r24
            break;
    5590:	08 95       	ret
        case KC_PAUSE:
            clear_keyboard();
    5592:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <clear_keyboard>
    5596:	2f ef       	ldi	r18, 0xFF	; 255
    5598:	83 ed       	ldi	r24, 0xD3	; 211
    559a:	90 e3       	ldi	r25, 0x30	; 48
    559c:	21 50       	subi	r18, 0x01	; 1
    559e:	80 40       	sbci	r24, 0x00	; 0
    55a0:	90 40       	sbci	r25, 0x00	; 0
    55a2:	e1 f7       	brne	.-8      	; 0x559c <command_common+0xa8>
    55a4:	00 c0       	rjmp	.+0      	; 0x55a6 <command_common+0xb2>
    55a6:	00 00       	nop
            print("\n\nbootloader... ");
            _delay_ms(1000);
            bootloader_jump(); // not return
    55a8:	0e 94 94 25 	call	0x4b28	; 0x4b28 <bootloader_jump>
    55ac:	40 c0       	rjmp	.+128    	; 0x562e <command_common+0x13a>
            break;
        case KC_D:
            if (debug_enable) {
    55ae:	80 91 05 02 	lds	r24, 0x0205
    55b2:	80 ff       	sbrs	r24, 0
    55b4:	03 c0       	rjmp	.+6      	; 0x55bc <command_common+0xc8>
                print("\ndebug: off\n");
                debug_matrix   = false;
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    55b6:	81 7f       	andi	r24, 0xF1	; 241
    55b8:	8e 7f       	andi	r24, 0xFE	; 254
    55ba:	01 c0       	rjmp	.+2      	; 0x55be <command_common+0xca>
            } else {
                print("\ndebug: on\n");
                debug_enable   = true;
    55bc:	81 60       	ori	r24, 0x01	; 1
    55be:	80 93 05 02 	sts	0x0205, r24
    55c2:	35 c0       	rjmp	.+106    	; 0x562e <command_common+0x13a>
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    55c4:	90 91 05 02 	lds	r25, 0x0205
    55c8:	91 fb       	bst	r25, 1
    55ca:	88 27       	eor	r24, r24
    55cc:	80 f9       	bld	r24, 0
    55ce:	21 e0       	ldi	r18, 0x01	; 1
    55d0:	82 27       	eor	r24, r18
    55d2:	80 fb       	bst	r24, 0
    55d4:	91 f9       	bld	r25, 1
    55d6:	13 c0       	rjmp	.+38     	; 0x55fe <command_common+0x10a>
            } else {
                print("\nmatrix: off\n");
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    55d8:	90 91 05 02 	lds	r25, 0x0205
    55dc:	92 fb       	bst	r25, 2
    55de:	88 27       	eor	r24, r24
    55e0:	80 f9       	bld	r24, 0
    55e2:	21 e0       	ldi	r18, 0x01	; 1
    55e4:	82 27       	eor	r24, r18
    55e6:	80 fb       	bst	r24, 0
    55e8:	92 f9       	bld	r25, 2
    55ea:	09 c0       	rjmp	.+18     	; 0x55fe <command_common+0x10a>
            } else {
                print("\nkeyboard: off\n");
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    55ec:	90 91 05 02 	lds	r25, 0x0205
    55f0:	93 fb       	bst	r25, 3
    55f2:	88 27       	eor	r24, r24
    55f4:	80 f9       	bld	r24, 0
    55f6:	21 e0       	ldi	r18, 0x01	; 1
    55f8:	82 27       	eor	r24, r18
    55fa:	80 fb       	bst	r24, 0
    55fc:	93 f9       	bld	r25, 3
    55fe:	90 93 05 02 	sts	0x0205, r25
            if (debug_mouse) {
    5602:	88 23       	and	r24, r24
    5604:	a1 f0       	breq	.+40     	; 0x562e <command_common+0x13a>
                print("\nmouse: on\n");
                debug_enable = true;
    5606:	91 60       	ori	r25, 0x01	; 1
    5608:	90 93 05 02 	sts	0x0205, r25
    560c:	10 c0       	rjmp	.+32     	; 0x562e <command_common+0x13a>
#   endif
#endif
            break;
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    560e:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    5612:	80 91 0e 01 	lds	r24, 0x010E
    5616:	91 e0       	ldi	r25, 0x01	; 1
    5618:	89 27       	eor	r24, r25
    561a:	80 93 0e 01 	sts	0x010E, r24
    561e:	07 c0       	rjmp	.+14     	; 0x562e <command_common+0x13a>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    5620:	80 e0       	ldi	r24, 0x00	; 0
    5622:	03 c0       	rjmp	.+6      	; 0x562a <command_common+0x136>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    5624:	8d 51       	subi	r24, 0x1D	; 29
    5626:	01 c0       	rjmp	.+2      	; 0x562a <command_common+0x136>
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    5628:	89 53       	subi	r24, 0x39	; 57
    562a:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <switch_default_layer>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    562e:	81 e0       	ldi	r24, 0x01	; 1
}
    5630:	08 95       	ret

00005632 <command_extra>:
/* This allows to define extra commands. return false when not processed. */
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    return false;
}
    5632:	80 e0       	ldi	r24, 0x00	; 0
    5634:	08 95       	ret

00005636 <command_console_extra>:

bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    return false;
}
    5636:	80 e0       	ldi	r24, 0x00	; 0
    5638:	08 95       	ret

0000563a <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    563a:	cf 93       	push	r28
    563c:	c8 2f       	mov	r28, r24
    switch (command_state) {
    563e:	80 91 14 02 	lds	r24, 0x0214
    5642:	81 30       	cpi	r24, 0x01	; 1
    5644:	71 f0       	breq	.+28     	; 0x5662 <command_proc+0x28>
    5646:	20 f0       	brcs	.+8      	; 0x5650 <command_proc+0x16>
    5648:	82 30       	cpi	r24, 0x02	; 2
    564a:	09 f0       	breq	.+2      	; 0x564e <command_proc+0x14>
    564c:	89 c0       	rjmp	.+274    	; 0x5760 <command_proc+0x126>
    564e:	37 c0       	rjmp	.+110    	; 0x56be <command_proc+0x84>
        case ONESHOT:
            if (!IS_COMMAND())
    5650:	a0 91 0f 01 	lds	r26, 0x010F
    5654:	b0 91 10 01 	lds	r27, 0x0110
    5658:	8c 91       	ld	r24, X
    565a:	82 32       	cpi	r24, 0x22	; 34
    565c:	09 f0       	breq	.+2      	; 0x5660 <command_proc+0x26>
    565e:	82 c0       	rjmp	.+260    	; 0x5764 <command_proc+0x12a>
    5660:	07 c0       	rjmp	.+14     	; 0x5670 <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    5662:	a0 91 0f 01 	lds	r26, 0x010F
    5666:	b0 91 10 01 	lds	r27, 0x0110
    566a:	8c 91       	ld	r24, X
    566c:	82 32       	cpi	r24, 0x22	; 34
    566e:	49 f4       	brne	.+18     	; 0x5682 <command_proc+0x48>
                return (command_extra(code) || command_common(code));
    5670:	8c 2f       	mov	r24, r28
    5672:	0e 94 19 2b 	call	0x5632	; 0x5632 <command_extra>
    5676:	81 11       	cpse	r24, r1
    5678:	1e c0       	rjmp	.+60     	; 0x56b6 <command_proc+0x7c>
    567a:	8c 2f       	mov	r24, r28
    567c:	0e 94 7a 2a 	call	0x54f4	; 0x54f4 <command_common>
    5680:	1c c0       	rjmp	.+56     	; 0x56ba <command_proc+0x80>
            else
                return (command_console_extra(code) || command_console(code));
    5682:	8c 2f       	mov	r24, r28
    5684:	0e 94 1b 2b 	call	0x5636	; 0x5636 <command_console_extra>
    5688:	81 11       	cpse	r24, r1
    568a:	15 c0       	rjmp	.+42     	; 0x56b6 <command_proc+0x7c>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    568c:	c4 31       	cpi	r28, 0x14	; 20
    568e:	69 f0       	breq	.+26     	; 0x56aa <command_proc+0x70>
    5690:	30 f4       	brcc	.+12     	; 0x569e <command_proc+0x64>
    5692:	cb 30       	cpi	r28, 0x0B	; 11
    5694:	81 f0       	breq	.+32     	; 0x56b6 <command_proc+0x7c>
    5696:	c0 31       	cpi	r28, 0x10	; 16
    5698:	09 f0       	breq	.+2      	; 0x569c <command_proc+0x62>
    569a:	68 c0       	rjmp	.+208    	; 0x576c <command_proc+0x132>
    569c:	09 c0       	rjmp	.+18     	; 0x56b0 <command_proc+0x76>
    569e:	c9 32       	cpi	r28, 0x29	; 41
    56a0:	21 f0       	breq	.+8      	; 0x56aa <command_proc+0x70>
    56a2:	c8 33       	cpi	r28, 0x38	; 56
    56a4:	09 f0       	breq	.+2      	; 0x56a8 <command_proc+0x6e>
    56a6:	62 c0       	rjmp	.+196    	; 0x576c <command_proc+0x132>
    56a8:	06 c0       	rjmp	.+12     	; 0x56b6 <command_proc+0x7c>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    56aa:	10 92 14 02 	sts	0x0214, r1
    56ae:	5e c0       	rjmp	.+188    	; 0x576c <command_proc+0x132>
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
            print("M> ");
            command_state = MOUSEKEY;
    56b0:	82 e0       	ldi	r24, 0x02	; 2
    56b2:	80 93 14 02 	sts	0x0214, r24
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    56b6:	81 e0       	ldi	r24, 0x01	; 1
    56b8:	90 e0       	ldi	r25, 0x00	; 0
    56ba:	81 70       	andi	r24, 0x01	; 1
    56bc:	5a c0       	rjmp	.+180    	; 0x5772 <command_proc+0x138>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    56be:	c9 32       	cpi	r28, 0x29	; 41
    56c0:	c9 f0       	breq	.+50     	; 0x56f4 <command_proc+0xba>
    56c2:	60 f4       	brcc	.+24     	; 0x56dc <command_proc+0xa2>
    56c4:	c4 31       	cpi	r28, 0x14	; 20
    56c6:	b1 f0       	breq	.+44     	; 0x56f4 <command_proc+0xba>
    56c8:	20 f4       	brcc	.+8      	; 0x56d2 <command_proc+0x98>
    56ca:	c7 30       	cpi	r28, 0x07	; 7
    56cc:	09 f0       	breq	.+2      	; 0x56d0 <command_proc+0x96>
    56ce:	4c c0       	rjmp	.+152    	; 0x5768 <command_proc+0x12e>
    56d0:	34 c0       	rjmp	.+104    	; 0x573a <command_proc+0x100>
    56d2:	ce 51       	subi	r28, 0x1E	; 30
    56d4:	c6 30       	cpi	r28, 0x06	; 6
    56d6:	08 f0       	brcs	.+2      	; 0x56da <command_proc+0xa0>
    56d8:	47 c0       	rjmp	.+142    	; 0x5768 <command_proc+0x12e>
    56da:	17 c0       	rjmp	.+46     	; 0x570a <command_proc+0xd0>
    56dc:	ce 34       	cpi	r28, 0x4E	; 78
    56de:	39 f1       	breq	.+78     	; 0x572e <command_proc+0xf4>
    56e0:	20 f4       	brcc	.+8      	; 0x56ea <command_proc+0xb0>
    56e2:	cb 34       	cpi	r28, 0x4B	; 75
    56e4:	09 f0       	breq	.+2      	; 0x56e8 <command_proc+0xae>
    56e6:	40 c0       	rjmp	.+128    	; 0x5768 <command_proc+0x12e>
    56e8:	1c c0       	rjmp	.+56     	; 0x5722 <command_proc+0xe8>
    56ea:	c1 35       	cpi	r28, 0x51	; 81
    56ec:	c1 f0       	breq	.+48     	; 0x571e <command_proc+0xe4>
    56ee:	c2 35       	cpi	r28, 0x52	; 82
    56f0:	d9 f5       	brne	.+118    	; 0x5768 <command_proc+0x12e>
    56f2:	13 c0       	rjmp	.+38     	; 0x571a <command_proc+0xe0>
        case KC_SLASH: /* ? */
            mousekey_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    56f4:	80 91 15 02 	lds	r24, 0x0215
    56f8:	88 23       	and	r24, r24
    56fa:	19 f0       	breq	.+6      	; 0x5702 <command_proc+0xc8>
                mousekey_param = 0;
    56fc:	10 92 15 02 	sts	0x0215, r1
    5700:	33 c0       	rjmp	.+102    	; 0x5768 <command_proc+0x12e>
            } else {
                print("C> ");
                command_state = CONSOLE;
    5702:	81 e0       	ldi	r24, 0x01	; 1
    5704:	80 93 14 02 	sts	0x0214, r24
    5708:	34 c0       	rjmp	.+104    	; 0x5772 <command_proc+0x138>
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    570a:	ec 2f       	mov	r30, r28
    570c:	f0 e0       	ldi	r31, 0x00	; 0
    570e:	ea 5a       	subi	r30, 0xAA	; 170
    5710:	fe 4f       	sbci	r31, 0xFE	; 254
    5712:	80 81       	ld	r24, Z
    5714:	80 93 15 02 	sts	0x0215, r24
    5718:	27 c0       	rjmp	.+78     	; 0x5768 <command_proc+0x12e>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    571a:	61 e0       	ldi	r22, 0x01	; 1
    571c:	03 c0       	rjmp	.+6      	; 0x5724 <command_proc+0xea>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    571e:	61 e0       	ldi	r22, 0x01	; 1
    5720:	07 c0       	rjmp	.+14     	; 0x5730 <command_proc+0xf6>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    5722:	6a e0       	ldi	r22, 0x0A	; 10
    5724:	80 91 15 02 	lds	r24, 0x0215
    5728:	0e 94 a0 29 	call	0x5340	; 0x5340 <mousekey_param_inc>
    572c:	1d c0       	rjmp	.+58     	; 0x5768 <command_proc+0x12e>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    572e:	6a e0       	ldi	r22, 0x0A	; 10
    5730:	80 91 15 02 	lds	r24, 0x0215
    5734:	0e 94 17 2a 	call	0x542e	; 0x542e <mousekey_param_dec>
    5738:	17 c0       	rjmp	.+46     	; 0x5768 <command_proc+0x12e>
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    573a:	8e e1       	ldi	r24, 0x1E	; 30
    573c:	80 93 16 01 	sts	0x0116, r24
            mk_interval = MOUSEKEY_INTERVAL;
    5740:	82 e3       	ldi	r24, 0x32	; 50
    5742:	80 93 15 01 	sts	0x0115, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    5746:	8a e0       	ldi	r24, 0x0A	; 10
    5748:	80 93 14 01 	sts	0x0114, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    574c:	84 e1       	ldi	r24, 0x14	; 20
    574e:	80 93 13 01 	sts	0x0113, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    5752:	88 e0       	ldi	r24, 0x08	; 8
    5754:	80 93 12 01 	sts	0x0112, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    5758:	88 e2       	ldi	r24, 0x28	; 40
    575a:	80 93 11 01 	sts	0x0111, r24
    575e:	04 c0       	rjmp	.+8      	; 0x5768 <command_proc+0x12e>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    5760:	10 92 14 02 	sts	0x0214, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    5764:	80 e0       	ldi	r24, 0x00	; 0
    5766:	05 c0       	rjmp	.+10     	; 0x5772 <command_proc+0x138>
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    5768:	81 e0       	ldi	r24, 0x01	; 1
    576a:	03 c0       	rjmp	.+6      	; 0x5772 <command_proc+0x138>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    576c:	80 e0       	ldi	r24, 0x00	; 0
    576e:	90 e0       	ldi	r25, 0x00	; 0
    5770:	a4 cf       	rjmp	.-184    	; 0x56ba <command_proc+0x80>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    5772:	cf 91       	pop	r28
    5774:	08 95       	ret

00005776 <backlight_init>:
backlight_config_t backlight_config;

void backlight_init(void)
{
    /* check signature */
    if (!eeconfig_is_enabled()) {
    5776:	0e 94 49 27 	call	0x4e92	; 0x4e92 <eeconfig_is_enabled>
    577a:	81 11       	cpse	r24, r1
    577c:	02 c0       	rjmp	.+4      	; 0x5782 <backlight_init+0xc>
        eeconfig_init();
    577e:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <eeconfig_init>
    }
    backlight_config.raw = eeconfig_read_backlight();
    5782:	0e 94 6f 27 	call	0x4ede	; 0x4ede <eeconfig_read_backlight>
    5786:	80 93 45 02 	sts	0x0245, r24
    backlight_set(backlight_config.enable ? backlight_config.level : 0);
    578a:	80 ff       	sbrs	r24, 0
    578c:	02 c0       	rjmp	.+4      	; 0x5792 <backlight_init+0x1c>
    578e:	86 95       	lsr	r24
    5790:	01 c0       	rjmp	.+2      	; 0x5794 <backlight_init+0x1e>
    5792:	80 e0       	ldi	r24, 0x00	; 0
    5794:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <backlight_set>

00005798 <backlight_increase>:
}

void backlight_increase(void)
{
    if(backlight_config.level < BACKLIGHT_LEVELS)
    5798:	80 91 45 02 	lds	r24, 0x0245
    579c:	98 2f       	mov	r25, r24
    579e:	96 95       	lsr	r25
    57a0:	29 2f       	mov	r18, r25
    57a2:	30 e0       	ldi	r19, 0x00	; 0
    57a4:	25 30       	cpi	r18, 0x05	; 5
    57a6:	31 05       	cpc	r19, r1
    57a8:	4c f4       	brge	.+18     	; 0x57bc <backlight_increase+0x24>
    {
        backlight_config.level++;
    57aa:	9f 5f       	subi	r25, 0xFF	; 255
    57ac:	99 0f       	add	r25, r25
    57ae:	81 70       	andi	r24, 0x01	; 1
        backlight_config.enable = 1;
    57b0:	89 2b       	or	r24, r25
    57b2:	81 60       	ori	r24, 0x01	; 1
    57b4:	80 93 45 02 	sts	0x0245, r24
        eeconfig_write_backlight(backlight_config.raw);
    57b8:	0e 94 73 27 	call	0x4ee6	; 0x4ee6 <eeconfig_write_backlight>
    }
    dprintf("backlight increase: %u\n", backlight_config.level);
    backlight_set(backlight_config.level);
    57bc:	80 91 45 02 	lds	r24, 0x0245
    57c0:	86 95       	lsr	r24
    57c2:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <backlight_set>

000057c6 <backlight_decrease>:
}

void backlight_decrease(void)
{
    if(backlight_config.level > 0)
    57c6:	80 91 45 02 	lds	r24, 0x0245
    57ca:	98 2f       	mov	r25, r24
    57cc:	96 95       	lsr	r25
    57ce:	91 f0       	breq	.+36     	; 0x57f4 <backlight_decrease+0x2e>
    {
        backlight_config.level--;
    57d0:	91 58       	subi	r25, 0x81	; 129
    57d2:	99 0f       	add	r25, r25
    57d4:	81 70       	andi	r24, 0x01	; 1
    57d6:	89 2b       	or	r24, r25
    57d8:	80 93 45 02 	sts	0x0245, r24
        backlight_config.enable = !!backlight_config.level;
    57dc:	8e 7f       	andi	r24, 0xFE	; 254
    57de:	91 e0       	ldi	r25, 0x01	; 1
    57e0:	09 f4       	brne	.+2      	; 0x57e4 <backlight_decrease+0x1e>
    57e2:	90 e0       	ldi	r25, 0x00	; 0
    57e4:	80 91 45 02 	lds	r24, 0x0245
    57e8:	90 fb       	bst	r25, 0
    57ea:	80 f9       	bld	r24, 0
    57ec:	80 93 45 02 	sts	0x0245, r24
        eeconfig_write_backlight(backlight_config.raw);
    57f0:	0e 94 73 27 	call	0x4ee6	; 0x4ee6 <eeconfig_write_backlight>
    }
    dprintf("backlight decrease: %u\n", backlight_config.level);
    backlight_set(backlight_config.level);
    57f4:	80 91 45 02 	lds	r24, 0x0245
    57f8:	86 95       	lsr	r24
    57fa:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <backlight_set>

000057fe <backlight_toggle>:
}

void backlight_toggle(void)
{
    backlight_config.enable ^= 1;
    57fe:	80 91 45 02 	lds	r24, 0x0245
    5802:	98 2f       	mov	r25, r24
    5804:	90 95       	com	r25
    5806:	90 fb       	bst	r25, 0
    5808:	80 f9       	bld	r24, 0
    580a:	80 93 45 02 	sts	0x0245, r24
    eeconfig_write_backlight(backlight_config.raw);
    580e:	0e 94 73 27 	call	0x4ee6	; 0x4ee6 <eeconfig_write_backlight>
    dprintf("backlight toggle: %u\n", backlight_config.enable);
    backlight_set(backlight_config.enable ? backlight_config.level : 0);
    5812:	80 91 45 02 	lds	r24, 0x0245
    5816:	80 ff       	sbrs	r24, 0
    5818:	02 c0       	rjmp	.+4      	; 0x581e <backlight_toggle+0x20>
    581a:	86 95       	lsr	r24
    581c:	01 c0       	rjmp	.+2      	; 0x5820 <backlight_toggle+0x22>
    581e:	80 e0       	ldi	r24, 0x00	; 0
    5820:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <backlight_set>

00005824 <backlight_step>:
}

void backlight_step(void)
{
    backlight_config.level++;
    5824:	30 91 45 02 	lds	r19, 0x0245
    5828:	23 2f       	mov	r18, r19
    582a:	26 95       	lsr	r18
    582c:	2f 5f       	subi	r18, 0xFF	; 255
    582e:	2f 77       	andi	r18, 0x7F	; 127
    if(backlight_config.level > BACKLIGHT_LEVELS)
    5830:	82 2f       	mov	r24, r18
    5832:	90 e0       	ldi	r25, 0x00	; 0
    5834:	31 70       	andi	r19, 0x01	; 1
    5836:	06 97       	sbiw	r24, 0x06	; 6
    5838:	2c f4       	brge	.+10     	; 0x5844 <backlight_step+0x20>
    backlight_set(backlight_config.enable ? backlight_config.level : 0);
}

void backlight_step(void)
{
    backlight_config.level++;
    583a:	22 0f       	add	r18, r18
    583c:	23 2b       	or	r18, r19
    583e:	20 93 45 02 	sts	0x0245, r18
    5842:	02 c0       	rjmp	.+4      	; 0x5848 <backlight_step+0x24>
    if(backlight_config.level > BACKLIGHT_LEVELS)
    {
        backlight_config.level = 0;
    5844:	30 93 45 02 	sts	0x0245, r19
    }
    backlight_config.enable = !!backlight_config.level;
    5848:	80 91 45 02 	lds	r24, 0x0245
    584c:	28 2f       	mov	r18, r24
    584e:	2e 7f       	andi	r18, 0xFE	; 254
    5850:	91 e0       	ldi	r25, 0x01	; 1
    5852:	09 f4       	brne	.+2      	; 0x5856 <backlight_step+0x32>
    5854:	90 e0       	ldi	r25, 0x00	; 0
    5856:	90 fb       	bst	r25, 0
    5858:	80 f9       	bld	r24, 0
    585a:	80 93 45 02 	sts	0x0245, r24
    eeconfig_write_backlight(backlight_config.raw);
    585e:	0e 94 73 27 	call	0x4ee6	; 0x4ee6 <eeconfig_write_backlight>
    dprintf("backlight step: %u\n", backlight_config.level);
    backlight_set(backlight_config.level);
    5862:	80 91 45 02 	lds	r24, 0x0245
    5866:	86 95       	lsr	r24
    5868:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <backlight_set>

0000586c <backlight_level>:
}

void backlight_level(uint8_t level)
{
    backlight_config.level ^= level;
    586c:	20 91 45 02 	lds	r18, 0x0245
    5870:	92 2f       	mov	r25, r18
    5872:	96 95       	lsr	r25
    5874:	98 27       	eor	r25, r24
    5876:	99 0f       	add	r25, r25
    5878:	82 2f       	mov	r24, r18
    587a:	81 70       	andi	r24, 0x01	; 1
    587c:	89 2b       	or	r24, r25
    587e:	80 93 45 02 	sts	0x0245, r24
    backlight_config.enable = !!backlight_config.level;
    5882:	8e 7f       	andi	r24, 0xFE	; 254
    5884:	91 e0       	ldi	r25, 0x01	; 1
    5886:	09 f4       	brne	.+2      	; 0x588a <backlight_level+0x1e>
    5888:	90 e0       	ldi	r25, 0x00	; 0
    588a:	80 91 45 02 	lds	r24, 0x0245
    588e:	90 fb       	bst	r25, 0
    5890:	80 f9       	bld	r24, 0
    5892:	80 93 45 02 	sts	0x0245, r24
    eeconfig_write_backlight(backlight_config.raw);
    5896:	0e 94 73 27 	call	0x4ee6	; 0x4ee6 <eeconfig_write_backlight>
    backlight_set(backlight_config.level);
    589a:	80 91 45 02 	lds	r24, 0x0245
    589e:	86 95       	lsr	r24
    58a0:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <backlight_set>

000058a4 <__fixsfsi>:
    58a4:	04 d0       	rcall	.+8      	; 0x58ae <__fixunssfsi>
    58a6:	68 94       	set
    58a8:	b1 11       	cpse	r27, r1
    58aa:	8d c0       	rjmp	.+282    	; 0x59c6 <__fp_szero>
    58ac:	08 95       	ret

000058ae <__fixunssfsi>:
    58ae:	70 d0       	rcall	.+224    	; 0x5990 <__fp_splitA>
    58b0:	88 f0       	brcs	.+34     	; 0x58d4 <__fixunssfsi+0x26>
    58b2:	9f 57       	subi	r25, 0x7F	; 127
    58b4:	90 f0       	brcs	.+36     	; 0x58da <__fixunssfsi+0x2c>
    58b6:	b9 2f       	mov	r27, r25
    58b8:	99 27       	eor	r25, r25
    58ba:	b7 51       	subi	r27, 0x17	; 23
    58bc:	a0 f0       	brcs	.+40     	; 0x58e6 <__fixunssfsi+0x38>
    58be:	d1 f0       	breq	.+52     	; 0x58f4 <__fixunssfsi+0x46>
    58c0:	66 0f       	add	r22, r22
    58c2:	77 1f       	adc	r23, r23
    58c4:	88 1f       	adc	r24, r24
    58c6:	99 1f       	adc	r25, r25
    58c8:	1a f0       	brmi	.+6      	; 0x58d0 <__fixunssfsi+0x22>
    58ca:	ba 95       	dec	r27
    58cc:	c9 f7       	brne	.-14     	; 0x58c0 <__fixunssfsi+0x12>
    58ce:	12 c0       	rjmp	.+36     	; 0x58f4 <__fixunssfsi+0x46>
    58d0:	b1 30       	cpi	r27, 0x01	; 1
    58d2:	81 f0       	breq	.+32     	; 0x58f4 <__fixunssfsi+0x46>
    58d4:	77 d0       	rcall	.+238    	; 0x59c4 <__fp_zero>
    58d6:	b1 e0       	ldi	r27, 0x01	; 1
    58d8:	08 95       	ret
    58da:	74 c0       	rjmp	.+232    	; 0x59c4 <__fp_zero>
    58dc:	67 2f       	mov	r22, r23
    58de:	78 2f       	mov	r23, r24
    58e0:	88 27       	eor	r24, r24
    58e2:	b8 5f       	subi	r27, 0xF8	; 248
    58e4:	39 f0       	breq	.+14     	; 0x58f4 <__fixunssfsi+0x46>
    58e6:	b9 3f       	cpi	r27, 0xF9	; 249
    58e8:	cc f3       	brlt	.-14     	; 0x58dc <__fixunssfsi+0x2e>
    58ea:	86 95       	lsr	r24
    58ec:	77 95       	ror	r23
    58ee:	67 95       	ror	r22
    58f0:	b3 95       	inc	r27
    58f2:	d9 f7       	brne	.-10     	; 0x58ea <__fixunssfsi+0x3c>
    58f4:	3e f4       	brtc	.+14     	; 0x5904 <__fixunssfsi+0x56>
    58f6:	90 95       	com	r25
    58f8:	80 95       	com	r24
    58fa:	70 95       	com	r23
    58fc:	61 95       	neg	r22
    58fe:	7f 4f       	sbci	r23, 0xFF	; 255
    5900:	8f 4f       	sbci	r24, 0xFF	; 255
    5902:	9f 4f       	sbci	r25, 0xFF	; 255
    5904:	08 95       	ret

00005906 <__floatunsisf>:
    5906:	e8 94       	clt
    5908:	09 c0       	rjmp	.+18     	; 0x591c <__floatsisf+0x12>

0000590a <__floatsisf>:
    590a:	97 fb       	bst	r25, 7
    590c:	3e f4       	brtc	.+14     	; 0x591c <__floatsisf+0x12>
    590e:	90 95       	com	r25
    5910:	80 95       	com	r24
    5912:	70 95       	com	r23
    5914:	61 95       	neg	r22
    5916:	7f 4f       	sbci	r23, 0xFF	; 255
    5918:	8f 4f       	sbci	r24, 0xFF	; 255
    591a:	9f 4f       	sbci	r25, 0xFF	; 255
    591c:	99 23       	and	r25, r25
    591e:	a9 f0       	breq	.+42     	; 0x594a <__floatsisf+0x40>
    5920:	f9 2f       	mov	r31, r25
    5922:	96 e9       	ldi	r25, 0x96	; 150
    5924:	bb 27       	eor	r27, r27
    5926:	93 95       	inc	r25
    5928:	f6 95       	lsr	r31
    592a:	87 95       	ror	r24
    592c:	77 95       	ror	r23
    592e:	67 95       	ror	r22
    5930:	b7 95       	ror	r27
    5932:	f1 11       	cpse	r31, r1
    5934:	f8 cf       	rjmp	.-16     	; 0x5926 <__floatsisf+0x1c>
    5936:	fa f4       	brpl	.+62     	; 0x5976 <__floatsisf+0x6c>
    5938:	bb 0f       	add	r27, r27
    593a:	11 f4       	brne	.+4      	; 0x5940 <__floatsisf+0x36>
    593c:	60 ff       	sbrs	r22, 0
    593e:	1b c0       	rjmp	.+54     	; 0x5976 <__floatsisf+0x6c>
    5940:	6f 5f       	subi	r22, 0xFF	; 255
    5942:	7f 4f       	sbci	r23, 0xFF	; 255
    5944:	8f 4f       	sbci	r24, 0xFF	; 255
    5946:	9f 4f       	sbci	r25, 0xFF	; 255
    5948:	16 c0       	rjmp	.+44     	; 0x5976 <__floatsisf+0x6c>
    594a:	88 23       	and	r24, r24
    594c:	11 f0       	breq	.+4      	; 0x5952 <__floatsisf+0x48>
    594e:	96 e9       	ldi	r25, 0x96	; 150
    5950:	11 c0       	rjmp	.+34     	; 0x5974 <__floatsisf+0x6a>
    5952:	77 23       	and	r23, r23
    5954:	21 f0       	breq	.+8      	; 0x595e <__floatsisf+0x54>
    5956:	9e e8       	ldi	r25, 0x8E	; 142
    5958:	87 2f       	mov	r24, r23
    595a:	76 2f       	mov	r23, r22
    595c:	05 c0       	rjmp	.+10     	; 0x5968 <__floatsisf+0x5e>
    595e:	66 23       	and	r22, r22
    5960:	71 f0       	breq	.+28     	; 0x597e <__floatsisf+0x74>
    5962:	96 e8       	ldi	r25, 0x86	; 134
    5964:	86 2f       	mov	r24, r22
    5966:	70 e0       	ldi	r23, 0x00	; 0
    5968:	60 e0       	ldi	r22, 0x00	; 0
    596a:	2a f0       	brmi	.+10     	; 0x5976 <__floatsisf+0x6c>
    596c:	9a 95       	dec	r25
    596e:	66 0f       	add	r22, r22
    5970:	77 1f       	adc	r23, r23
    5972:	88 1f       	adc	r24, r24
    5974:	da f7       	brpl	.-10     	; 0x596c <__floatsisf+0x62>
    5976:	88 0f       	add	r24, r24
    5978:	96 95       	lsr	r25
    597a:	87 95       	ror	r24
    597c:	97 f9       	bld	r25, 7
    597e:	08 95       	ret

00005980 <__fp_split3>:
    5980:	57 fd       	sbrc	r21, 7
    5982:	90 58       	subi	r25, 0x80	; 128
    5984:	44 0f       	add	r20, r20
    5986:	55 1f       	adc	r21, r21
    5988:	59 f0       	breq	.+22     	; 0x59a0 <__fp_splitA+0x10>
    598a:	5f 3f       	cpi	r21, 0xFF	; 255
    598c:	71 f0       	breq	.+28     	; 0x59aa <__fp_splitA+0x1a>
    598e:	47 95       	ror	r20

00005990 <__fp_splitA>:
    5990:	88 0f       	add	r24, r24
    5992:	97 fb       	bst	r25, 7
    5994:	99 1f       	adc	r25, r25
    5996:	61 f0       	breq	.+24     	; 0x59b0 <__fp_splitA+0x20>
    5998:	9f 3f       	cpi	r25, 0xFF	; 255
    599a:	79 f0       	breq	.+30     	; 0x59ba <__fp_splitA+0x2a>
    599c:	87 95       	ror	r24
    599e:	08 95       	ret
    59a0:	12 16       	cp	r1, r18
    59a2:	13 06       	cpc	r1, r19
    59a4:	14 06       	cpc	r1, r20
    59a6:	55 1f       	adc	r21, r21
    59a8:	f2 cf       	rjmp	.-28     	; 0x598e <__fp_split3+0xe>
    59aa:	46 95       	lsr	r20
    59ac:	f1 df       	rcall	.-30     	; 0x5990 <__fp_splitA>
    59ae:	08 c0       	rjmp	.+16     	; 0x59c0 <__fp_splitA+0x30>
    59b0:	16 16       	cp	r1, r22
    59b2:	17 06       	cpc	r1, r23
    59b4:	18 06       	cpc	r1, r24
    59b6:	99 1f       	adc	r25, r25
    59b8:	f1 cf       	rjmp	.-30     	; 0x599c <__fp_splitA+0xc>
    59ba:	86 95       	lsr	r24
    59bc:	71 05       	cpc	r23, r1
    59be:	61 05       	cpc	r22, r1
    59c0:	08 94       	sec
    59c2:	08 95       	ret

000059c4 <__fp_zero>:
    59c4:	e8 94       	clt

000059c6 <__fp_szero>:
    59c6:	bb 27       	eor	r27, r27
    59c8:	66 27       	eor	r22, r22
    59ca:	77 27       	eor	r23, r23
    59cc:	cb 01       	movw	r24, r22
    59ce:	97 f9       	bld	r25, 7
    59d0:	08 95       	ret

000059d2 <__mulsf3>:
    59d2:	0b d0       	rcall	.+22     	; 0x59ea <__mulsf3x>
    59d4:	78 c0       	rjmp	.+240    	; 0x5ac6 <__fp_round>
    59d6:	69 d0       	rcall	.+210    	; 0x5aaa <__fp_pscA>
    59d8:	28 f0       	brcs	.+10     	; 0x59e4 <__mulsf3+0x12>
    59da:	6e d0       	rcall	.+220    	; 0x5ab8 <__fp_pscB>
    59dc:	18 f0       	brcs	.+6      	; 0x59e4 <__mulsf3+0x12>
    59de:	95 23       	and	r25, r21
    59e0:	09 f0       	breq	.+2      	; 0x59e4 <__mulsf3+0x12>
    59e2:	5a c0       	rjmp	.+180    	; 0x5a98 <__fp_inf>
    59e4:	5f c0       	rjmp	.+190    	; 0x5aa4 <__fp_nan>
    59e6:	11 24       	eor	r1, r1
    59e8:	ee cf       	rjmp	.-36     	; 0x59c6 <__fp_szero>

000059ea <__mulsf3x>:
    59ea:	ca df       	rcall	.-108    	; 0x5980 <__fp_split3>
    59ec:	a0 f3       	brcs	.-24     	; 0x59d6 <__mulsf3+0x4>

000059ee <__mulsf3_pse>:
    59ee:	95 9f       	mul	r25, r21
    59f0:	d1 f3       	breq	.-12     	; 0x59e6 <__mulsf3+0x14>
    59f2:	95 0f       	add	r25, r21
    59f4:	50 e0       	ldi	r21, 0x00	; 0
    59f6:	55 1f       	adc	r21, r21
    59f8:	62 9f       	mul	r22, r18
    59fa:	f0 01       	movw	r30, r0
    59fc:	72 9f       	mul	r23, r18
    59fe:	bb 27       	eor	r27, r27
    5a00:	f0 0d       	add	r31, r0
    5a02:	b1 1d       	adc	r27, r1
    5a04:	63 9f       	mul	r22, r19
    5a06:	aa 27       	eor	r26, r26
    5a08:	f0 0d       	add	r31, r0
    5a0a:	b1 1d       	adc	r27, r1
    5a0c:	aa 1f       	adc	r26, r26
    5a0e:	64 9f       	mul	r22, r20
    5a10:	66 27       	eor	r22, r22
    5a12:	b0 0d       	add	r27, r0
    5a14:	a1 1d       	adc	r26, r1
    5a16:	66 1f       	adc	r22, r22
    5a18:	82 9f       	mul	r24, r18
    5a1a:	22 27       	eor	r18, r18
    5a1c:	b0 0d       	add	r27, r0
    5a1e:	a1 1d       	adc	r26, r1
    5a20:	62 1f       	adc	r22, r18
    5a22:	73 9f       	mul	r23, r19
    5a24:	b0 0d       	add	r27, r0
    5a26:	a1 1d       	adc	r26, r1
    5a28:	62 1f       	adc	r22, r18
    5a2a:	83 9f       	mul	r24, r19
    5a2c:	a0 0d       	add	r26, r0
    5a2e:	61 1d       	adc	r22, r1
    5a30:	22 1f       	adc	r18, r18
    5a32:	74 9f       	mul	r23, r20
    5a34:	33 27       	eor	r19, r19
    5a36:	a0 0d       	add	r26, r0
    5a38:	61 1d       	adc	r22, r1
    5a3a:	23 1f       	adc	r18, r19
    5a3c:	84 9f       	mul	r24, r20
    5a3e:	60 0d       	add	r22, r0
    5a40:	21 1d       	adc	r18, r1
    5a42:	82 2f       	mov	r24, r18
    5a44:	76 2f       	mov	r23, r22
    5a46:	6a 2f       	mov	r22, r26
    5a48:	11 24       	eor	r1, r1
    5a4a:	9f 57       	subi	r25, 0x7F	; 127
    5a4c:	50 40       	sbci	r21, 0x00	; 0
    5a4e:	8a f0       	brmi	.+34     	; 0x5a72 <__mulsf3_pse+0x84>
    5a50:	e1 f0       	breq	.+56     	; 0x5a8a <__mulsf3_pse+0x9c>
    5a52:	88 23       	and	r24, r24
    5a54:	4a f0       	brmi	.+18     	; 0x5a68 <__mulsf3_pse+0x7a>
    5a56:	ee 0f       	add	r30, r30
    5a58:	ff 1f       	adc	r31, r31
    5a5a:	bb 1f       	adc	r27, r27
    5a5c:	66 1f       	adc	r22, r22
    5a5e:	77 1f       	adc	r23, r23
    5a60:	88 1f       	adc	r24, r24
    5a62:	91 50       	subi	r25, 0x01	; 1
    5a64:	50 40       	sbci	r21, 0x00	; 0
    5a66:	a9 f7       	brne	.-22     	; 0x5a52 <__mulsf3_pse+0x64>
    5a68:	9e 3f       	cpi	r25, 0xFE	; 254
    5a6a:	51 05       	cpc	r21, r1
    5a6c:	70 f0       	brcs	.+28     	; 0x5a8a <__mulsf3_pse+0x9c>
    5a6e:	14 c0       	rjmp	.+40     	; 0x5a98 <__fp_inf>
    5a70:	aa cf       	rjmp	.-172    	; 0x59c6 <__fp_szero>
    5a72:	5f 3f       	cpi	r21, 0xFF	; 255
    5a74:	ec f3       	brlt	.-6      	; 0x5a70 <__mulsf3_pse+0x82>
    5a76:	98 3e       	cpi	r25, 0xE8	; 232
    5a78:	dc f3       	brlt	.-10     	; 0x5a70 <__mulsf3_pse+0x82>
    5a7a:	86 95       	lsr	r24
    5a7c:	77 95       	ror	r23
    5a7e:	67 95       	ror	r22
    5a80:	b7 95       	ror	r27
    5a82:	f7 95       	ror	r31
    5a84:	e7 95       	ror	r30
    5a86:	9f 5f       	subi	r25, 0xFF	; 255
    5a88:	c1 f7       	brne	.-16     	; 0x5a7a <__mulsf3_pse+0x8c>
    5a8a:	fe 2b       	or	r31, r30
    5a8c:	88 0f       	add	r24, r24
    5a8e:	91 1d       	adc	r25, r1
    5a90:	96 95       	lsr	r25
    5a92:	87 95       	ror	r24
    5a94:	97 f9       	bld	r25, 7
    5a96:	08 95       	ret

00005a98 <__fp_inf>:
    5a98:	97 f9       	bld	r25, 7
    5a9a:	9f 67       	ori	r25, 0x7F	; 127
    5a9c:	80 e8       	ldi	r24, 0x80	; 128
    5a9e:	70 e0       	ldi	r23, 0x00	; 0
    5aa0:	60 e0       	ldi	r22, 0x00	; 0
    5aa2:	08 95       	ret

00005aa4 <__fp_nan>:
    5aa4:	9f ef       	ldi	r25, 0xFF	; 255
    5aa6:	80 ec       	ldi	r24, 0xC0	; 192
    5aa8:	08 95       	ret

00005aaa <__fp_pscA>:
    5aaa:	00 24       	eor	r0, r0
    5aac:	0a 94       	dec	r0
    5aae:	16 16       	cp	r1, r22
    5ab0:	17 06       	cpc	r1, r23
    5ab2:	18 06       	cpc	r1, r24
    5ab4:	09 06       	cpc	r0, r25
    5ab6:	08 95       	ret

00005ab8 <__fp_pscB>:
    5ab8:	00 24       	eor	r0, r0
    5aba:	0a 94       	dec	r0
    5abc:	12 16       	cp	r1, r18
    5abe:	13 06       	cpc	r1, r19
    5ac0:	14 06       	cpc	r1, r20
    5ac2:	05 06       	cpc	r0, r21
    5ac4:	08 95       	ret

00005ac6 <__fp_round>:
    5ac6:	09 2e       	mov	r0, r25
    5ac8:	03 94       	inc	r0
    5aca:	00 0c       	add	r0, r0
    5acc:	11 f4       	brne	.+4      	; 0x5ad2 <__fp_round+0xc>
    5ace:	88 23       	and	r24, r24
    5ad0:	52 f0       	brmi	.+20     	; 0x5ae6 <__fp_round+0x20>
    5ad2:	bb 0f       	add	r27, r27
    5ad4:	40 f4       	brcc	.+16     	; 0x5ae6 <__fp_round+0x20>
    5ad6:	bf 2b       	or	r27, r31
    5ad8:	11 f4       	brne	.+4      	; 0x5ade <__fp_round+0x18>
    5ada:	60 ff       	sbrs	r22, 0
    5adc:	04 c0       	rjmp	.+8      	; 0x5ae6 <__fp_round+0x20>
    5ade:	6f 5f       	subi	r22, 0xFF	; 255
    5ae0:	7f 4f       	sbci	r23, 0xFF	; 255
    5ae2:	8f 4f       	sbci	r24, 0xFF	; 255
    5ae4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ae6:	08 95       	ret

00005ae8 <__udivmodqi4>:
    5ae8:	99 1b       	sub	r25, r25
    5aea:	79 e0       	ldi	r23, 0x09	; 9
    5aec:	04 c0       	rjmp	.+8      	; 0x5af6 <__udivmodqi4_ep>

00005aee <__udivmodqi4_loop>:
    5aee:	99 1f       	adc	r25, r25
    5af0:	96 17       	cp	r25, r22
    5af2:	08 f0       	brcs	.+2      	; 0x5af6 <__udivmodqi4_ep>
    5af4:	96 1b       	sub	r25, r22

00005af6 <__udivmodqi4_ep>:
    5af6:	88 1f       	adc	r24, r24
    5af8:	7a 95       	dec	r23
    5afa:	c9 f7       	brne	.-14     	; 0x5aee <__udivmodqi4_loop>
    5afc:	80 95       	com	r24
    5afe:	08 95       	ret

00005b00 <__udivmodhi4>:
    5b00:	aa 1b       	sub	r26, r26
    5b02:	bb 1b       	sub	r27, r27
    5b04:	51 e1       	ldi	r21, 0x11	; 17
    5b06:	07 c0       	rjmp	.+14     	; 0x5b16 <__udivmodhi4_ep>

00005b08 <__udivmodhi4_loop>:
    5b08:	aa 1f       	adc	r26, r26
    5b0a:	bb 1f       	adc	r27, r27
    5b0c:	a6 17       	cp	r26, r22
    5b0e:	b7 07       	cpc	r27, r23
    5b10:	10 f0       	brcs	.+4      	; 0x5b16 <__udivmodhi4_ep>
    5b12:	a6 1b       	sub	r26, r22
    5b14:	b7 0b       	sbc	r27, r23

00005b16 <__udivmodhi4_ep>:
    5b16:	88 1f       	adc	r24, r24
    5b18:	99 1f       	adc	r25, r25
    5b1a:	5a 95       	dec	r21
    5b1c:	a9 f7       	brne	.-22     	; 0x5b08 <__udivmodhi4_loop>
    5b1e:	80 95       	com	r24
    5b20:	90 95       	com	r25
    5b22:	bc 01       	movw	r22, r24
    5b24:	cd 01       	movw	r24, r26
    5b26:	08 95       	ret

00005b28 <__divmodhi4>:
    5b28:	97 fb       	bst	r25, 7
    5b2a:	07 2e       	mov	r0, r23
    5b2c:	16 f4       	brtc	.+4      	; 0x5b32 <__divmodhi4+0xa>
    5b2e:	00 94       	com	r0
    5b30:	07 d0       	rcall	.+14     	; 0x5b40 <__divmodhi4_neg1>
    5b32:	77 fd       	sbrc	r23, 7
    5b34:	09 d0       	rcall	.+18     	; 0x5b48 <__divmodhi4_neg2>
    5b36:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <__udivmodhi4>
    5b3a:	07 fc       	sbrc	r0, 7
    5b3c:	05 d0       	rcall	.+10     	; 0x5b48 <__divmodhi4_neg2>
    5b3e:	3e f4       	brtc	.+14     	; 0x5b4e <__divmodhi4_exit>

00005b40 <__divmodhi4_neg1>:
    5b40:	90 95       	com	r25
    5b42:	81 95       	neg	r24
    5b44:	9f 4f       	sbci	r25, 0xFF	; 255
    5b46:	08 95       	ret

00005b48 <__divmodhi4_neg2>:
    5b48:	70 95       	com	r23
    5b4a:	61 95       	neg	r22
    5b4c:	7f 4f       	sbci	r23, 0xFF	; 255

00005b4e <__divmodhi4_exit>:
    5b4e:	08 95       	ret

00005b50 <__eerd_byte_m32u4>:
    5b50:	f9 99       	sbic	0x1f, 1	; 31
    5b52:	fe cf       	rjmp	.-4      	; 0x5b50 <__eerd_byte_m32u4>
    5b54:	92 bd       	out	0x22, r25	; 34
    5b56:	81 bd       	out	0x21, r24	; 33
    5b58:	f8 9a       	sbi	0x1f, 0	; 31
    5b5a:	99 27       	eor	r25, r25
    5b5c:	80 b5       	in	r24, 0x20	; 32
    5b5e:	08 95       	ret

00005b60 <__eerd_dword_m32u4>:
    5b60:	a6 e1       	ldi	r26, 0x16	; 22
    5b62:	b0 e0       	ldi	r27, 0x00	; 0
    5b64:	44 e0       	ldi	r20, 0x04	; 4
    5b66:	50 e0       	ldi	r21, 0x00	; 0
    5b68:	0c 94 d9 2d 	jmp	0x5bb2	; 0x5bb2 <__eerd_blraw_m32u4>

00005b6c <__eerd_word_m32u4>:
    5b6c:	a8 e1       	ldi	r26, 0x18	; 24
    5b6e:	b0 e0       	ldi	r27, 0x00	; 0
    5b70:	42 e0       	ldi	r20, 0x02	; 2
    5b72:	50 e0       	ldi	r21, 0x00	; 0
    5b74:	0c 94 d9 2d 	jmp	0x5bb2	; 0x5bb2 <__eerd_blraw_m32u4>

00005b78 <__eewr_byte_m32u4>:
    5b78:	26 2f       	mov	r18, r22

00005b7a <__eewr_r18_m32u4>:
    5b7a:	f9 99       	sbic	0x1f, 1	; 31
    5b7c:	fe cf       	rjmp	.-4      	; 0x5b7a <__eewr_r18_m32u4>
    5b7e:	1f ba       	out	0x1f, r1	; 31
    5b80:	92 bd       	out	0x22, r25	; 34
    5b82:	81 bd       	out	0x21, r24	; 33
    5b84:	20 bd       	out	0x20, r18	; 32
    5b86:	0f b6       	in	r0, 0x3f	; 63
    5b88:	f8 94       	cli
    5b8a:	fa 9a       	sbi	0x1f, 2	; 31
    5b8c:	f9 9a       	sbi	0x1f, 1	; 31
    5b8e:	0f be       	out	0x3f, r0	; 63
    5b90:	01 96       	adiw	r24, 0x01	; 1
    5b92:	08 95       	ret

00005b94 <__eewr_dword_m32u4>:
    5b94:	24 2f       	mov	r18, r20
    5b96:	0e 94 bd 2d 	call	0x5b7a	; 0x5b7a <__eewr_r18_m32u4>
    5b9a:	25 2f       	mov	r18, r21
    5b9c:	0e 94 bd 2d 	call	0x5b7a	; 0x5b7a <__eewr_r18_m32u4>
    5ba0:	0c 94 d2 2d 	jmp	0x5ba4	; 0x5ba4 <__eewr_word_m32u4>

00005ba4 <__eewr_word_m32u4>:
    5ba4:	0e 94 bc 2d 	call	0x5b78	; 0x5b78 <__eewr_byte_m32u4>
    5ba8:	27 2f       	mov	r18, r23
    5baa:	0c 94 bd 2d 	jmp	0x5b7a	; 0x5b7a <__eewr_r18_m32u4>

00005bae <__eerd_block_m32u4>:
    5bae:	dc 01       	movw	r26, r24
    5bb0:	cb 01       	movw	r24, r22

00005bb2 <__eerd_blraw_m32u4>:
    5bb2:	fc 01       	movw	r30, r24
    5bb4:	f9 99       	sbic	0x1f, 1	; 31
    5bb6:	fe cf       	rjmp	.-4      	; 0x5bb4 <__eerd_blraw_m32u4+0x2>
    5bb8:	06 c0       	rjmp	.+12     	; 0x5bc6 <__eerd_blraw_m32u4+0x14>
    5bba:	f2 bd       	out	0x22, r31	; 34
    5bbc:	e1 bd       	out	0x21, r30	; 33
    5bbe:	f8 9a       	sbi	0x1f, 0	; 31
    5bc0:	31 96       	adiw	r30, 0x01	; 1
    5bc2:	00 b4       	in	r0, 0x20	; 32
    5bc4:	0d 92       	st	X+, r0
    5bc6:	41 50       	subi	r20, 0x01	; 1
    5bc8:	50 40       	sbci	r21, 0x00	; 0
    5bca:	b8 f7       	brcc	.-18     	; 0x5bba <__eerd_blraw_m32u4+0x8>
    5bcc:	08 95       	ret

00005bce <_exit>:
    5bce:	f8 94       	cli

00005bd0 <__stop_program>:
    5bd0:	ff cf       	rjmp	.-2      	; 0x5bd0 <__stop_program>
